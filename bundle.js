/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={676:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:()=>r})},3349:(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,{Z:()=>r})},6156:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},2122:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:()=>r})},3552:(e,t,n)=>{"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})},1253:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9756);function o(e,t){if(null==e)return{};var n,o,a=(0,r.Z)(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},9756:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},4699:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2961);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},7329:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(676),o=n(2961);function a(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},484:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,{Z:()=>r})},2961:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(676);function o(e,t){if(e){if("string"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?(0,r.Z)(e,t):void 0}}},5318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}}},862:(e,t,n)=>{var r=n(8);function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var l=a?Object.getOwnPropertyDescriptor(e,i):null;l&&(l.get||l.set)?Object.defineProperty(n,i,l):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}},8:e=>{function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=t=function(e){return typeof e}:e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(n)}e.exports=t},9693:(e,t,n)=>{"use strict";n.d(t,{mi:()=>l,U1:()=>s,_j:()=>c,$n:()=>d});var r=n(288);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error((0,r.Z)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function i(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function l(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e){var t="hsl"===(e=a(e)).type?a(function(e){var t=(e=a(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-l*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),i({type:s,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function s(e,t){return e=a(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,i(e)}function c(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function d(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return i(e)}},9402:(e,t,n)=>{"use strict";n.d(t,{Z:()=>se});var r=n(1253),o=n(5953),a=n(2122),i=["xs","sm","md","lg","xl"];function l(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,o=e.unit,l=void 0===o?"px":o,u=e.step,s=void 0===u?5:u,c=(0,r.Z)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function f(e,t){var r=i.indexOf(t);return r===i.length-1?d(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(l,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[i[r+1]]?n[i[r+1]]:t)-s/100).concat(l,")")}return(0,a.Z)({keys:i,values:n,up:d,down:function(e){var t=i.indexOf(e)+1,r=n[i[t]];return t===i.length?d("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(l,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)}var u=n(6156);function s(e,t,n){var r;return(0,a.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.Z)({paddingLeft:t(2),paddingRight:t(2)},n,(0,u.Z)({},e.up("sm"),(0,a.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,u.Z)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,u.Z)(r,e.up("sm"),{minHeight:64}),r)},n)}var c=n(288);const d={black:"#000",white:"#fff"},f={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},p="#7986cb",h="#3f51b5",m="#303f9f",v="#ff4081",y="#f50057",g="#c51162",b="#e57373",w="#f44336",k="#d32f2f",x="#ffb74d",S="#ff9800",E="#f57c00",C="#64b5f6",P="#2196f3",R="#1976d2",N="#81c784",_="#4caf50",O="#388e3c";var T=n(9693),M={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.white,default:f[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},z={text:{primary:d.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:f[800],default:"#303030"},action:{active:d.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function L(e,t,n,r){var o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,T.$n)(e.main,o):"dark"===t&&(e.dark=(0,T._j)(e.main,a)))}function I(e){var t=e.primary,n=void 0===t?{light:p,main:h,dark:m}:t,i=e.secondary,l=void 0===i?{light:v,main:y,dark:g}:i,u=e.error,s=void 0===u?{light:b,main:w,dark:k}:u,I=e.warning,Z=void 0===I?{light:x,main:S,dark:E}:I,A=e.info,D=void 0===A?{light:C,main:P,dark:R}:A,j=e.success,F=void 0===j?{light:N,main:_,dark:O}:j,U=e.type,$=void 0===U?"light":U,B=e.contrastThreshold,V=void 0===B?3:B,W=e.tonalOffset,H=void 0===W?.2:W,q=(0,r.Z)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function Q(e){return(0,T.mi)(e,z.text.primary)>=V?z.text.primary:M.text.primary}var K=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,a.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error((0,c.Z)(4,t));if("string"!=typeof e.main)throw new Error((0,c.Z)(5,JSON.stringify(e.main)));return L(e,"light",n,H),L(e,"dark",r,H),e.contrastText||(e.contrastText=Q(e.main)),e},G={dark:z,light:M};return(0,o.Z)((0,a.Z)({common:d,type:$,primary:K(n),secondary:K(l,"A400","A200","A700"),error:K(s),warning:K(Z),info:K(D),success:K(F),grey:f,contrastThreshold:V,getContrastText:Q,augmentColor:K,tonalOffset:H},G[$]),q)}function Z(e){return Math.round(1e5*e)/1e5}var A={textTransform:"uppercase"},D='"Roboto", "Helvetica", "Arial", sans-serif';function j(e,t){var n="function"==typeof t?t(e):t,i=n.fontFamily,l=void 0===i?D:i,u=n.fontSize,s=void 0===u?14:u,c=n.fontWeightLight,d=void 0===c?300:c,f=n.fontWeightRegular,p=void 0===f?400:f,h=n.fontWeightMedium,m=void 0===h?500:h,v=n.fontWeightBold,y=void 0===v?700:v,g=n.htmlFontSize,b=void 0===g?16:g,w=n.allVariants,k=n.pxToRem,x=(0,r.Z)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),S=s/14,E=k||function(e){return"".concat(e/b*S,"rem")},C=function(e,t,n,r,o){return(0,a.Z)({fontFamily:l,fontWeight:e,fontSize:E(t),lineHeight:n},l===D?{letterSpacing:"".concat(Z(r/t),"em")}:{},o,w)},P={h1:C(d,96,1.167,-1.5),h2:C(d,60,1.2,-.5),h3:C(p,48,1.167,0),h4:C(p,34,1.235,.25),h5:C(p,24,1.334,0),h6:C(m,20,1.6,.15),subtitle1:C(p,16,1.75,.15),subtitle2:C(m,14,1.57,.1),body1:C(p,16,1.5,.15),body2:C(p,14,1.43,.15),button:C(m,14,1.75,.4,A),caption:C(p,12,1.66,.4),overline:C(p,12,2.66,1,A)};return(0,o.Z)((0,a.Z)({htmlFontSize:b,pxToRem:E,round:Z,fontFamily:l,fontSize:s,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:m,fontWeightBold:y},P),x,{clone:!1})}function F(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const U=["none",F(0,2,1,-1,0,1,1,0,0,1,3,0),F(0,3,1,-2,0,2,2,0,0,1,5,0),F(0,3,3,-2,0,3,4,0,0,1,8,0),F(0,2,4,-1,0,4,5,0,0,1,10,0),F(0,3,5,-1,0,5,8,0,0,1,14,0),F(0,3,5,-1,0,6,10,0,0,1,18,0),F(0,4,5,-2,0,7,10,1,0,2,16,1),F(0,5,5,-3,0,8,10,1,0,3,14,2),F(0,5,6,-3,0,9,12,1,0,3,16,2),F(0,6,6,-3,0,10,14,1,0,4,18,3),F(0,6,7,-4,0,11,15,1,0,4,20,3),F(0,7,8,-4,0,12,17,2,0,5,22,4),F(0,7,8,-4,0,13,19,2,0,5,24,4),F(0,7,9,-4,0,14,21,2,0,5,26,4),F(0,8,9,-5,0,15,22,2,0,6,28,5),F(0,8,10,-5,0,16,24,2,0,6,30,5),F(0,8,11,-5,0,17,26,2,0,6,32,5),F(0,9,11,-5,0,18,28,2,0,7,34,6),F(0,9,12,-6,0,19,29,2,0,7,36,6),F(0,10,13,-6,0,20,31,3,0,8,38,7),F(0,10,13,-6,0,21,33,3,0,8,40,7),F(0,10,14,-6,0,22,35,3,0,8,42,7),F(0,11,14,-7,0,23,36,3,0,9,44,8),F(0,11,15,-7,0,24,38,3,0,9,46,8)],$={borderRadius:4};var B=n(4699),V=n(484),W=(n(5697),{xs:0,sm:600,md:960,lg:1280,xl:1920}),H={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(W[e],"px)")}};const q=function(e,t){return t?(0,o.Z)(e,t,{clone:!1}):e};var Q,K,G={m:"margin",p:"padding"},Y={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},X={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},J=(Q=function(e){if(e.length>2){if(!X[e])return[e];e=X[e]}var t=e.split(""),n=(0,B.Z)(t,2),r=n[0],o=n[1],a=G[r],i=Y[o]||"";return Array.isArray(i)?i.map((function(e){return a+e})):[a+i]},K={},function(e){return void 0===K[e]&&(K[e]=Q(e)),K[e]}),ee=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function te(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function ne(e){var t=te(e.theme);return Object.keys(e).map((function(n){if(-1===ee.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(J(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||H;return t.reduce((function(e,o,a){return e[r.up(r.keys[a])]=n(t[a]),e}),{})}if("object"===(0,V.Z)(t)){var o=e.theme.breakpoints||H;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(q,{})}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=te({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}ne.propTypes={},ne.filterProps=ee;var oe={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},ae={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function ie(e){return"".concat(Math.round(e),"ms")}const le={easing:oe,duration:ae,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,o=void 0===n?ae.standard:n,a=t.easing,i=void 0===a?oe.easeInOut:a,l=t.delay,u=void 0===l?0:l;return(0,r.Z)(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof o?o:ie(o)," ").concat(i," ").concat("string"==typeof u?u:ie(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},ue={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},se=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,a=e.mixins,i=void 0===a?{}:a,u=e.palette,c=void 0===u?{}:u,d=e.spacing,f=e.typography,p=void 0===f?{}:f,h=(0,r.Z)(e,["breakpoints","mixins","palette","spacing","typography"]),m=I(c),v=l(n),y=re(d),g=(0,o.Z)({breakpoints:v,direction:"ltr",mixins:s(v,y,i),overrides:{},palette:m,props:{},shadows:U,typography:j(m,p),spacing:y,shape:$,transitions:le,zIndex:ue},h),b=arguments.length,w=new Array(b>1?b-1:0),k=1;k<b;k++)w[k-1]=arguments[k];return w.reduce((function(e,t){return(0,o.Z)(e,t)}),g)}()},8786:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(2122),o=n(1253),a=n(7294),i=(n(5697),n(8679)),l=n.n(i),u=n(7342);function s(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,a=t.props[n];for(o in a)void 0===r[o]&&(r[o]=a[o]);return r}var c=n(5959);var d=n(9402);const f=function(e,t){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var i=t.defaultTheme,d=t.withTheme,f=void 0!==d&&d,p=t.name,h=(0,o.Z)(t,["defaultTheme","withTheme","name"]),m=p,v=(0,u.Z)(e,(0,r.Z)({defaultTheme:i,Component:n,name:p||n.displayName,classNamePrefix:m},h)),y=a.forwardRef((function(e,t){e.classes;var l,u=e.innerRef,d=(0,o.Z)(e,["classes","innerRef"]),h=v((0,r.Z)({},n.defaultProps,e)),m=d;return("string"==typeof p||f)&&(l=(0,c.Z)()||i,p&&(m=s({theme:l,name:p,props:d})),f&&!m.theme&&(m.theme=l)),a.createElement(n,(0,r.Z)({ref:u||t,classes:h},m))}));return l()(y,n),y}}(e,(0,r.Z)({defaultTheme:d.Z},t))}},3871:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(288);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},9437:(e,t,n)=>{"use strict";function r(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];var i=this,l=function(){e.apply(i,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}n.d(t,{Z:()=>r})},8201:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>o,createSvgIcon:()=>f,debounce:()=>p.Z,deprecatedPropType:()=>h,isMuiElement:()=>m,ownerDocument:()=>v,ownerWindow:()=>y,requirePropFactory:()=>g,setRef:()=>b.Z,unstable_useId:()=>E,unsupportedProp:()=>w,useControlled:()=>k.Z,useEventCallback:()=>x.Z,useForkRef:()=>S.Z,useIsFocusVisible:()=>C.Z});var r=n(3871);function o(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}var a=n(2122),i=n(7294),l=n(1253),u=(n(5697),n(6010)),s=n(8786),c=i.forwardRef((function(e,t){var n=e.children,o=e.classes,s=e.className,c=e.color,d=void 0===c?"inherit":c,f=e.component,p=void 0===f?"svg":f,h=e.fontSize,m=void 0===h?"default":h,v=e.htmlColor,y=e.titleAccess,g=e.viewBox,b=void 0===g?"0 0 24 24":g,w=(0,l.Z)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return i.createElement(p,(0,a.Z)({className:(0,u.Z)(o.root,s,"inherit"!==d&&o["color".concat((0,r.Z)(d))],"default"!==m&&o["fontSize".concat((0,r.Z)(m))]),focusable:"false",viewBox:b,color:v,"aria-hidden":!y||void 0,role:y?"img":void 0,ref:t},w),n,y?i.createElement("title",null,y):null)}));c.muiName="SvgIcon";const d=(0,s.Z)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(c);function f(e,t){var n=function(t,n){return i.createElement(d,(0,a.Z)({ref:n},t),e)};return n.muiName=d.muiName,i.memo(i.forwardRef(n))}var p=n(9437);function h(e,t){return function(){return null}}function m(e,t){return i.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function v(e){return e&&e.ownerDocument||document}function y(e){return v(e).defaultView||window}function g(e){return function(){return null}}var b=n(4236);function w(e,t,n,r,o){return null}var k=n(2775),x=n(5192),S=n(3834);function E(e){var t=i.useState(e),n=t[0],r=t[1],o=e||n;return i.useEffect((function(){null==n&&r("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}var C=n(4896)},4236:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},2775:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e){var t=e.controlled,n=e.default,o=(e.name,e.state,r.useRef(void 0!==t).current),a=r.useState(n),i=a[0],l=a[1];return[o?t:i,r.useCallback((function(e){o||l(e)}),[])]}},5192:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function a(e){var t=r.useRef(e);return o((function(){t.current=e})),r.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}},3834:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(4236);function a(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){(0,o.Z)(e,n),(0,o.Z)(t,n)}}),[e,t])}},4896:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7294),o=n(3935),a=!0,i=!1,l=null,u={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function s(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function c(){a=!1}function d(){"hidden"===this.visibilityState&&i&&(a=!0)}function f(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return a||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!u[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function p(){i=!0,window.clearTimeout(l),l=window.setTimeout((function(){i=!1}),100)}function h(){return{isFocusVisible:f,onBlurVisible:p,ref:r.useCallback((function(e){var t,n=o.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",s,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",d,!0))}),[])}}},8995:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var a=o(n(7294)),i=(0,r(n(2108)).default)(a.createElement("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search");t.Z=i},2108:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(8201)},7342:(e,t,n)=>{"use strict";n.d(t,{Z:()=>sn});var r=n(1253),o=n(2122),a=n(7294),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const l="object"===("undefined"==typeof window?"undefined":i(window))&&"object"===("undefined"==typeof document?"undefined":i(document))&&9===document.nodeType;function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}var c=n(3552),d=n(3349),f=n(9756),p={}.constructor;function h(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(h);if(e.constructor!==p)return e;var t={};for(var n in e)t[n]=h(e[n]);return t}function m(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=h(t);return r.plugins.onCreateRule(e,o,n)||(e[0],null)}var v=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},y=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=v(e[r]," ");else n=v(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function g(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function b(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,a=void 0===o?0:o,i=t.fallbacks;if(e&&a++,i)if(Array.isArray(i))for(var l=0;l<i.length;l++){var u=i[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+g(s+": "+y(c)+";",a))}}else for(var d in i){var f=i[d];null!=f&&(r&&(r+="\n"),r+=""+g(d+": "+y(f)+";",a))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+g(p+": "+y(h)+";",a))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),g(e+" {"+r,--a)+g("}",a)):r}var w=/([[\].#*$><+~=|^:(),"'`\s])/g,k="undefined"!=typeof CSS&&CSS.escape,x=function(e){return k?k(e):e.replace(w,"\\$1")},S=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var a=null==o||!1===o,i=e in this.style;if(a&&!i&&!r)return this;var l=a&&i;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),E=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var a=r.selector,i=r.scoped,l=r.sheet,u=r.generateId;return a?o.selectorText=a:!1!==i&&(o.id=u((0,d.Z)((0,d.Z)(o)),l),o.selectorText="."+x(o.id)),o}(0,c.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=y(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return b(this.selectorText,this.style,n)},s(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(S),C={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new E(e,t,n)}},P={indent:1,children:!0},R=/@([\w-]+)/,N=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(R);for(var a in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=P),null==e.indent&&(e.indent=P.indent),null==e.children&&(e.children=P.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),_=/@media|@supports\s+/,O={onCreateRule:function(e,t,n){return _.test(e)?new N(e,t,n):null}},T={indent:1,children:!0},M=/@keyframes\s+([\w-]+)/,z=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(M);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,i=n.sheet,l=n.generateId;for(var u in this.id=!1===a?this.name:x(l(this,i)),this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(u,t[u],(0,o.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=T),null==e.indent&&(e.indent=T.indent),null==e.children&&(e.children=T.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),L=/@keyframes\s+/,I=/\$([\w-]+)/g,Z=function(e,t){return"string"==typeof e?e.replace(I,(function(e,n){return n in t?t[n]:e})):e},A=function(e,t,n){var r=e[t],o=Z(r,n);o!==r&&(e[t]=o)},D={onCreateRule:function(e,t,n){return"string"==typeof e&&L.test(e)?new z(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&A(e,"animation-name",n.keyframes),"animation"in e&&A(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return Z(e,r.keyframes);default:return e}}},j=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,c.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return b(this.key,this.style,n)},t}(S),F={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new j(e,t,n):null}},U=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=b(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return b(this.at,this.style,e)},e}(),$=/@font-face/,B={onCreateRule:function(e,t,n){return $.test(e)?new U(e,t,n):null}},V=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return b(this.key,this.style,e)},e}(),W={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new V(e,t,n):null}},H=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),q={"@charset":!0,"@import":!0,"@namespace":!0},Q=[C,O,D,F,B,W,{onCreateRule:function(e,t,n){return e in q?new H(e,t,n):null}}],K={process:!0},G={force:!0,process:!0},Y=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,a=r.parent,i=r.sheet,l=r.jss,u=r.Renderer,s=r.generateId,c=r.scoped,d=(0,o.Z)({classes:this.classes,parent:a,sheet:i,jss:l,Renderer:u,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(d.selector="."+x(this.classes[f]));var p=m(f,t,d);if(!p)return null;this.register(p);var h=void 0===d.index?this.index.length:d.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof E?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof z&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof E?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof z&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=K);var o=this.options,a=o.jss.plugins,i=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(a.onUpdate(n,t,i,r),r.process&&u&&u!==l.style){for(var s in a.onProcessStyle(l.style,l,i),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,G)}for(var d in u){var f=l.style[d],p=u[d];null==f&&f!==p&&l.prop(d,null,G)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var a=this.index[o].toString(e);(a||r)&&(t&&(t+="\n"),t+=a)}return t},e}(),X=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,o.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Y(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),J=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ee=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,f.Z)(t,["attached"]),o="",a=0;a<this.registry.length;a++){var i=this.registry[a];null!=n&&i.attached!==n||(o&&(o+="\n"),o+=i.toString(r))}return o},s(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),te="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==te[ne]&&(te[ne]=0);var re=te[ne]++,oe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",a="";return r&&(r.options.classNamePrefix&&(a=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(a||"c")+re+o+t:a+n.key+"-"+re+(o?"-"+o:"")+"-"+t}},ae=function(e){var t;return function(){return t||(t=e()),t}},ie=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},le=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=y(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},ue=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},se=function(e,t){return e.selectorText=t,e.selectorText===t},ce=ae((function(){return document.querySelector("head")}));var de=ae((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),fe=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},pe=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},he=function(){function e(e){this.getPropertyValue=ie,this.setProperty=le,this.removeProperty=ue,this.setSelector=se,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&ee.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var a=de();a&&this.element.setAttribute("nonce",a)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=ee.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=ce(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,a=o.parentNode;a&&a.insertBefore(e,o.nextSibling)}else ce().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var a=pe(n,t);if(!1===(o=fe(n,r.toString({children:!1}),a)))return!1;this.refCssRule(e,a,o)}return this.insertRules(r.rules,o),o}var i=e.toString();if(!i)return!1;var l=pe(n,t),u=fe(n,i,l);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,l,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof X&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),me=0,ve=function(){function e(e){this.id=me++,this.version="10.5.1",this.plugins=new J,this.options={id:{minify:!1},createGenerateId:oe,Renderer:l?he:null,plugins:[]},this.generateId=oe({minify:!1});for(var t=0;t<Q.length;t++)this.plugins.use(Q[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,o.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ee.index?0:ee.index+1);var r=new X(e,(0,o.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ee.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=(0,o.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var a=m(e,t,r);return a&&this.plugins.onProcessRule(a),a},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function ye(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var a=ye(r);a&&(t||(t={}),t[n]=a)}}return t}var ge="object"==typeof CSS&&null!=CSS&&"number"in CSS,be=function(e){return new ve(e)};function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=(0,o.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}be();const ke=function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},xe=function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},Se=function(e,t,n){e.get(t).delete(n)};var Ee=n(5959);n(5697);const Ce="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var Pe=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],Re=Date.now(),Ne="fnValues"+Re,_e="fnStyle"+ ++Re;var Oe="@global",Te="@global ",Me=function(){function e(e,t,n){for(var r in this.type="global",this.at=Oe,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),ze=function(){function e(e,t,n){this.type="global",this.at=Oe,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(Te.length);this.rule=n.jss.createRule(r,t,(0,o.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Le=/\s*,\s*/g;function Ie(e,t){for(var n=e.split(Le),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Ze=/\s*,\s*/g,Ae=/&/g,De=/\$([\w-]+)/g;var je=/[A-Z]/g,Fe=/^ms-/,Ue={};function $e(e){return"-"+e.toLowerCase()}const Be=function(e){if(Ue.hasOwnProperty(e))return Ue[e];var t=e.replace(je,$e);return Ue[e]=Fe.test(t)?"-"+t:t};function Ve(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:Be(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ve):t.fallbacks=Ve(e.fallbacks)),t}var We=ge&&CSS?CSS.px:"px",He=ge&&CSS?CSS.ms:"ms",qe=ge&&CSS?CSS.percent:"%";function Qe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Ke=Qe({"animation-delay":He,"animation-duration":He,"background-position":We,"background-position-x":We,"background-position-y":We,"background-size":We,border:We,"border-bottom":We,"border-bottom-left-radius":We,"border-bottom-right-radius":We,"border-bottom-width":We,"border-left":We,"border-left-width":We,"border-radius":We,"border-right":We,"border-right-width":We,"border-top":We,"border-top-left-radius":We,"border-top-right-radius":We,"border-top-width":We,"border-width":We,"border-block":We,"border-block-end":We,"border-block-end-width":We,"border-block-start":We,"border-block-start-width":We,"border-block-width":We,"border-inline":We,"border-inline-end":We,"border-inline-end-width":We,"border-inline-start":We,"border-inline-start-width":We,"border-inline-width":We,"border-start-start-radius":We,"border-start-end-radius":We,"border-end-start-radius":We,"border-end-end-radius":We,margin:We,"margin-bottom":We,"margin-left":We,"margin-right":We,"margin-top":We,"margin-block":We,"margin-block-end":We,"margin-block-start":We,"margin-inline":We,"margin-inline-end":We,"margin-inline-start":We,padding:We,"padding-bottom":We,"padding-left":We,"padding-right":We,"padding-top":We,"padding-block":We,"padding-block-end":We,"padding-block-start":We,"padding-inline":We,"padding-inline-end":We,"padding-inline-start":We,"mask-position-x":We,"mask-position-y":We,"mask-size":We,height:We,width:We,"min-height":We,"max-height":We,"min-width":We,"max-width":We,bottom:We,left:We,top:We,right:We,inset:We,"inset-block":We,"inset-block-end":We,"inset-block-start":We,"inset-inline":We,"inset-inline-end":We,"inset-inline-start":We,"box-shadow":We,"text-shadow":We,"column-gap":We,"column-rule":We,"column-rule-width":We,"column-width":We,"font-size":We,"font-size-delta":We,"letter-spacing":We,"text-decoration-thickness":We,"text-indent":We,"text-stroke":We,"text-stroke-width":We,"word-spacing":We,motion:We,"motion-offset":We,outline:We,"outline-offset":We,"outline-width":We,perspective:We,"perspective-origin-x":qe,"perspective-origin-y":qe,"transform-origin":qe,"transform-origin-x":qe,"transform-origin-y":qe,"transform-origin-z":qe,"transition-delay":He,"transition-duration":He,"vertical-align":We,"flex-basis":We,"shape-margin":We,size:We,gap:We,grid:We,"grid-gap":We,"row-gap":We,"grid-row-gap":We,"grid-column-gap":We,"grid-template-rows":We,"grid-template-columns":We,"grid-auto-rows":We,"grid-auto-columns":We,"box-shadow-x":We,"box-shadow-y":We,"box-shadow-blur":We,"box-shadow-spread":We,"font-line-height":We,"text-shadow-x":We,"text-shadow-y":We,"text-shadow-blur":We});function Ge(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Ge(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Ge(o,t[o],n);else for(var a in t)t[a]=Ge(e+"-"+a,t[a],n);else if("number"==typeof t&&!Number.isNaN(t)){var i=n[e]||Ke[e];return!i||0===t&&i===We?t.toString():"function"==typeof i?i(t).toString():""+t+i}return t}var Ye=n(7329),Xe="",Je="",et="",tt="",nt=l&&"ontouchstart"in document.documentElement;if(l){var rt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ot=document.createElement("p").style;for(var at in rt)if(at+"Transform"in ot){Xe=at,Je=rt[at];break}"Webkit"===Xe&&"msHyphens"in ot&&(Xe="ms",Je=rt.ms,tt="edge"),"Webkit"===Xe&&"-apple-trailing-word"in ot&&(et="apple")}var it=Xe,lt=Je,ut=et,st=tt,ct=nt,dt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===it?"-webkit-"+e:lt+e)}},ft={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===it?lt+"print-"+e:e)}},pt=/[-\s]+(.)?/g;function ht(e,t){return t?t.toUpperCase():""}function mt(e){return e.replace(pt,ht)}function vt(e){return mt("-"+e)}var yt,gt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===it){var n="mask-image";if(mt(n)in t)return e;if(it+vt(n)in t)return lt+e}return e}},bt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ut||ct?e:lt+e)}},wt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:lt+e)}},kt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:lt+e)}},xt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===it||"ms"===it&&"edge"!==st?lt+e:e)}},St={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===it||"ms"===it||"apple"===ut?lt+e:e)}},Et={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===it?"WebkitColumn"+vt(e)in t&&lt+"column-"+e:"Moz"===it&&"page"+vt(e)in t&&"page-"+e)}},Ct={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===it)return e;var n=e.replace("-inline","");return it+vt(n)in t&&lt+n}},Pt={supportedProperty:function(e,t){return mt(e)in t&&e}},Rt={supportedProperty:function(e,t){var n=vt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:it+n in t?lt+e:"Webkit"!==it&&"Webkit"+n in t&&"-webkit-"+e}},Nt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===it?""+lt+e:e)}},_t={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===it?lt+"scroll-chaining":e)}},Ot={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Tt={supportedProperty:function(e,t){var n=Ot[e];return!!n&&it+vt(n)in t&&lt+n}},Mt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},zt=Object.keys(Mt),Lt=function(e){return lt+e},It=[dt,ft,gt,bt,wt,kt,xt,St,Et,Ct,Pt,Rt,Nt,_t,Tt,{supportedProperty:function(e,t,n){var r=n.multiple;if(zt.indexOf(e)>-1){var o=Mt[e];if(!Array.isArray(o))return it+vt(o)in t&&lt+o;if(!r)return!1;for(var a=0;a<o.length;a++)if(!(it+vt(o[0])in t))return!1;return o.map(Lt)}return!1}}],Zt=It.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),At=It.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,(0,Ye.Z)(t.noPrefill)),e}),[]),Dt={};if(l){yt=document.createElement("p");var jt=window.getComputedStyle(document.documentElement,"");for(var Ft in jt)isNaN(Ft)||(Dt[jt[Ft]]=jt[Ft]);At.forEach((function(e){return delete Dt[e]}))}function Ut(e,t){if(void 0===t&&(t={}),!yt)return e;if(null!=Dt[e])return Dt[e];"transition"!==e&&"transform"!==e||(t[e]=e in yt.style);for(var n=0;n<Zt.length&&(Dt[e]=Zt[n](e,yt.style,t),!Dt[e]);n++);try{yt.style[e]=""}catch(e){return!1}return Dt[e]}var $t,Bt={},Vt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Wt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Ht(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?Ut(t):", "+Ut(n))||t||n}function qt(e,t){var n=t;if(!$t||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Bt[r])return Bt[r];try{$t.style[e]=n}catch(e){return Bt[r]=!1,!1}if(Vt[e])n=n.replace(Wt,Ht);else if(""===$t.style[e]&&("-ms-flex"===(n=lt+n)&&($t.style[e]="-ms-flexbox"),$t.style[e]=n,""===$t.style[e]))return Bt[r]=!1,!1;return $t.style[e]="",Bt[r]=n,Bt[r]}l&&($t=document.createElement("p"));var Qt,Kt=be({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=m(e,{},n);return r[_e]=t,r},onProcessStyle:function(e,t){if(Ne in t||_e in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Ne]=n,e},onUpdate:function(e,t,n,r){var o=t,a=o[_e];a&&(o.style=a(e)||{});var i=o[Ne];if(i)for(var l in i)o.prop(l,i[l](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Oe)return new Me(e,t,n);if("@"===e[0]&&e.substr(0,Te.length)===Te)return new ze(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,a=r?r[Oe]:null;if(a){for(var i in a)t.addRule(i,a[i],(0,o.Z)({},n,{selector:Ie(i,e.selector)}));delete r[Oe]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var a in r)if("@"===a[0]&&a.substr(0,Oe.length)===Oe){var i=Ie(a.substr(Oe.length),e.selector);t.addRule(i,r[a],(0,o.Z)({},n,{selector:i})),delete r[a]}}(e,t))}},function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Ze),r=e.split(Ze),o="",a=0;a<n.length;a++)for(var i=n[a],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(Ae,i):i+" "+u}return o}function n(e,t,n){if(n)return(0,o.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var a=(0,o.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete a.name,a}return{onProcessStyle:function(r,a,i){if("style"!==a.type)return r;var l,u,s=a,c=s.options.parent;for(var d in r){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(l=n(s,c,l),f){var h=t(d,s.selector);u||(u=e(c,i)),h=h.replace(De,u),c.addRule(h,r[d],(0,o.Z)({},l,{selector:h}))}else p&&c.addRule(d,{},l).addRule(s.key,r[d],{selector:s.selector});delete r[d]}}return r}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ve(e[t]);return e}return Ve(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Be(t);return t===r?e:(n.prop(r,e),null)}},function(e){void 0===e&&(e={});var t=Qe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Ge(r,e[r],t);return e},onChangeValue:function(e,n){return Ge(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,a=Ut(n);a&&a!==n&&(o=!0);var i=!1,l=qt(a,y(r));l&&l!==r&&(i=!0),(o||i)&&(o&&delete t[n],t[a||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===it?e:"@"+lt+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return qt(t,y(e))||e}}}(),(Qt=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},r=Object.keys(e).sort(Qt),o=0;o<r.length;o++)n[r[o]]=e[r[o]];return n}})]}),Gt={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,a=e.seed,i=void 0===a?"":a,l=""===i?"":"".concat(i,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Pe.indexOf(e.key))return"Mui-".concat(e.key);var a="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Ce]&&""===i?"".concat(a,"-").concat(s()):a}return"".concat(l).concat(o).concat(s())}}(),jss:Kt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Yt=a.createContext(Gt),Xt=-1e9;function Jt(){return Xt+=1}var en=n(5953);function tn(e){var t="function"==typeof e;return{create:function(n,r){var a;try{a=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return a;var i=n.overrides[r],l=(0,o.Z)({},a);return Object.keys(i).forEach((function(e){l[e]=(0,en.Z)(l[e],i[e])})),l},options:{}}}const nn={};function rn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=we({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function on(e,t){var n=e.state,r=e.theme,a=e.stylesOptions,i=e.stylesCreator,l=e.name;if(!a.disableGeneration){var u=xe(a.sheetsManager,i,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},ke(a.sheetsManager,i,r,u));var s=(0,o.Z)({},i.options,a,{theme:r,flip:"boolean"==typeof a.flip?a.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=a.sheetsRegistry;if(0===u.refs){var d;a.sheetsCache&&(d=xe(a.sheetsCache,i,r));var f=i.create(r,l);d||((d=a.jss.createStyleSheet(f,(0,o.Z)({link:!1},s))).attach(),a.sheetsCache&&ke(a.sheetsCache,i,r,d)),c&&c.add(d),u.staticSheet=d,u.dynamicStyles=ye(f)}if(u.dynamicStyles){var p=a.jss.createStyleSheet(u.dynamicStyles,(0,o.Z)({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=we({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function an(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function ln(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var a=xe(r.sheetsManager,o,n);a.refs-=1;var i=r.sheetsRegistry;0===a.refs&&(Se(r.sheetsManager,o,n),r.jss.removeStyleSheet(a.staticSheet),i&&i.remove(a.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),i&&i.remove(t.dynamicSheet))}}function un(e,t){var n,r=a.useRef([]),o=a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),a.useEffect((function(){return function(){n&&n()}}),[o])}function sn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,i=t.classNamePrefix,l=t.Component,u=t.defaultTheme,s=void 0===u?nn:u,c=(0,r.Z)(t,["name","classNamePrefix","Component","defaultTheme"]),d=tn(e),f=n||i||"makeStyles";d.options={index:Jt(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(0,Ee.Z)()||s,r=(0,o.Z)({},a.useContext(Yt),c),i=a.useRef(),u=a.useRef();un((function(){var o={name:n,state:{},stylesCreator:d,stylesOptions:r,theme:t};return on(o,e),u.current=!1,i.current=o,function(){ln(o)}}),[t,d]),a.useEffect((function(){u.current&&an(i.current,e),u.current=!0}));var f=rn(i.current,e.classes,l);return f};return p}},5959:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294);const o=r.createContext(null);function a(){return r.useContext(o)}},5953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(2122),o=n(484);function a(e){return e&&"object"===(0,o.Z)(e)&&e.constructor===Object}function i(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?(0,r.Z)({},e):e;return a(e)&&a(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(a(t[r])&&r in e?o[r]=i(e[r],t[r],n):o[r]=t[r])})),o}},288:(e,t,n)=>{"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o})},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=f(n,y);try{s(t,y,g)}catch(e){}}}}return t}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(u[l[d]]=i[l[d]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,S=60106,E=60107,C=60108,P=60114,R=60109,N=60110,_=60112,O=60113,T=60120,M=60115,z=60116,L=60121,I=60128,Z=60129,A=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;x=j("react.element"),S=j("react.portal"),E=j("react.fragment"),C=j("react.strict_mode"),P=j("react.profiler"),R=j("react.provider"),N=j("react.context"),_=j("react.forward_ref"),O=j("react.suspense"),T=j("react.suspense_list"),M=j("react.memo"),z=j("react.lazy"),L=j("react.block"),j("react.scope"),I=j("react.opaque.id"),Z=j("react.debug_trace_mode"),A=j("react.offscreen"),D=j("react.legacy_hidden")}var F,U="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function B(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var V=!1;function W(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function H(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case P:return"Profiler";case C:return"StrictMode";case O:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case R:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return q(e.type);case L:return q(e._render);case z:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function se(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Re=null,Ne=null;function _e(e){if(e=Jr(e)){if("function"!=typeof Pe)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),Pe(e.stateNode,e.type,t))}}function Oe(e){Re?Ne?Ne.push(e):Ne=[e]:Re=e}function Te(){if(Re){var e=Re,t=Ne;if(Ne=Re=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Me(e,t){return e(t)}function ze(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var Ie=Me,Ze=!1,Ae=!1;function De(){null===Re&&null===Ne||(Le(),Te())}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Fe=!1;if(d)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(me){Fe=!1}function $e(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Be=!1,Ve=null,We=!1,He=null,qe={onError:function(e){Be=!0,Ve=e}};function Qe(e,t,n,r,o,a,i,l,u){Be=!1,Ve=null,$e.apply(qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ye(e){if(Ke(e)!==e)throw Error(i(188))}function Xe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ye(o),e;if(a===r)return Ye(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Xr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&yt(it)&&(it=null),null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),st.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)vt(n),null===n.blockedOn&&dt.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},Et={},Ct={};function Pt(e){if(Et[e])return Et[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return Et[e]=n[t];return e}d&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Rt=Pt("animationend"),Nt=Pt("animationiteration"),_t=Pt("animationstart"),Ot=Pt("transitionend"),Tt=new Map,Mt=new Map,zt=["abort","abort",Rt,"animationEnd",Nt,"animationIteration",_t,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Mt.set(r,t),Tt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var It=8;function Zt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function At(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=It=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=Zt(u),o=It):0!=(l&=a)&&(r=Zt(l),o=It)}else 0!=(a=n&~i)?(r=Zt(a),o=It):0!==l&&(r=Zt(l),o=It);if(0===r)return 0;if(r=n&((0>(r=31-Bt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Zt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Bt(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function jt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?jt(10,t):e;case 10:return 0===(e=Ft(192&~t))?jt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Bt(t)]=n}var Bt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Wt|0)|0},Vt=Math.log,Wt=Math.LN2,Ht=a.unstable_UserBlockingPriority,qt=a.unstable_runWithPriority,Qt=!0;function Kt(e,t,n,r){Ze||Le();var o=Yt,a=Ze;Ze=!0;try{ze(o,e,t,n,r)}finally{(Ze=a)||De()}}function Gt(e,t,n,r){qt(Ht,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<at.length&&-1<ft.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Xt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<ft.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Tr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=Ce(r);if(null!==(o=Xr(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ge(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Tr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=ln(dn),pn=o({},dn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(mn),yn=ln(o({},mn,{dataTransfer:0})),gn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kn=ln(o({},dn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Pn(){return Cn}var Rn=ln(o({},pn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Nn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),On=ln(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=ln(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Mn=[9,13,27,32],zn=d&&"CompositionEvent"in window,Ln=null;d&&"documentMode"in document&&(Ln=document.documentMode);var In=d&&"TextEvent"in window&&!Ln,Zn=d&&(!zn||Ln&&8<Ln&&11>=Ln),An=String.fromCharCode(32),Dn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Vn(e,t,n,r){Oe(r),0<(t=zr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Hn=null;function qn(e){Cr(e,0)}function Qn(e){if(Y(eo(e)))return e}function Kn(e,t){if("change"===e)return t}var Gn=!1;if(d){var Yn;if(d){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Yn=Xn}else Yn=!1;Gn=Yn&&(!document.documentMode||9<document.documentMode)}function er(){Wn&&(Wn.detachEvent("onpropertychange",tr),Hn=Wn=null)}function tr(e){if("value"===e.propertyName&&Qn(Hn)){var t=[];if(Vn(t,Hn,e,Ce(e)),e=qn,Ze)e(t);else{Ze=!0;try{Me(e,t)}finally{Ze=!1,De()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(Wn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Hn)}function or(e,t){if("click"===e)return Qn(t)}function ar(e,t){if("input"===e||"change"===e)return Qn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=d&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,yr=null,gr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==mr||mr!==X(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=zr(vr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(zt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<wr.length;kr++)Mt.set(wr[kr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Qe.apply(this,arguments),Be){if(!Be)throw Error(i(198));var c=Ve;Be=!1,Ve=null,We||(We=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Er(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Er(o,l,s),a=u}}}if(We)throw e=He,We=!1,He=null,e}function Pr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Or(t,e,2,!1),n.add(r))}var Rr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Rr]||(e[Rr]=!0,l.forEach((function(t){Sr.has(t)||_r(t,!1,e,null),_r(t,!0,e,null)})))}function _r(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Or(a,e,o,t),i.add(l))}function Or(e,t,n,r){var o=Mt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Gt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Tr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ae)return e();Ae=!0;try{Ie(e,t,n)}finally{Ae=!1,De()}}((function(){var r=a,o=Ce(n),i=[];e:{var l=Tt.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Rn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case Rt:case Nt:case _t:u=bn;break;case Ot:u=On;break;case"scroll":u=hn;break;case"wheel":u=Tn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Nn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=je(h,f))&&c.push(Mr(h,m,p))),d)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Xr(s)&&!s[Gr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Xr(s):null)&&(s!==(d=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(m,h+"leave",u,n,o)).target=d,l.relatedTarget=p,m=null,Xr(o)===r&&((c=new c(f,h+"enter",s,n,o)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=Lr(p))h++;for(p=0,m=f;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)f=Lr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Lr(c),f=Lr(f)}c=null}else c=null;null!==u&&Ir(i,l,u,c,!1),null!==s&&null!==d&&Ir(i,d,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if(Bn(l))if(Gn)v=ar;else{v=rr;var y=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=or);switch(v&&(v=v(e,r))?Vn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&oe(l,"number",l.value)),y=r?eo(r):window,e){case"focusin":(Bn(y)||"true"===y.contentEditable)&&(mr=y,vr=r,yr=null);break;case"focusout":yr=vr=mr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,br(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,o)}var g;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?jn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Zn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Un=!0)),0<(y=zr(r,b)).length&&(b=new kn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=Fn(n)))&&(b.data=g))),(g=In?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(Dn=!0,An);case"textInput":return(e=t.data)===An&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!zn&&jn(e,t)?(e=nn(),tn=en=Jt=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Zn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=zr(r,"onBeforeInput")).length&&(o=new kn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Cr(i,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=je(e,n))&&r.unshift(Mr(e,a,o)),null!=(a=je(e,t))&&r.push(Mr(e,a,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=je(n,a))&&i.unshift(Mr(n,u,l)):o||null!=(u=je(n,a))&&i.push(Mr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Zr(){}var Ar=null,Dr=null;function jr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Br(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Vr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Gr="__reactContainer$"+qr,Yr="__reactEvents$"+qr;function Xr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Qr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[Kr]||null}function no(e){var t=e[Yr];return void 0===t&&(t=e[Yr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=ao(uo),co=ao(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function mo(){io(co),io(so)}function vo(e,t,n){if(so.current!==uo)throw Error(i(168));lo(so,t),lo(co,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,q(t)||"Unknown",a));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=yo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(so),lo(so,e)):io(co),lo(co,n)}var wo=null,ko=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,Co=a.unstable_shouldYield,Po=a.unstable_requestPaint,Ro=a.unstable_now,No=a.unstable_getCurrentPriorityLevel,_o=a.unstable_ImmediatePriority,Oo=a.unstable_UserBlockingPriority,To=a.unstable_NormalPriority,Mo=a.unstable_LowPriority,zo=a.unstable_IdlePriority,Lo={},Io=void 0!==Po?Po:function(){},Zo=null,Ao=null,Do=!1,jo=Ro(),Fo=1e4>jo?Ro:function(){return Ro()-jo};function Uo(){switch(No()){case _o:return 99;case Oo:return 98;case To:return 97;case Mo:return 96;case zo:return 95;default:throw Error(i(332))}}function $o(e){switch(e){case 99:return _o;case 98:return Oo;case 97:return To;case 96:return Mo;case 95:return zo;default:throw Error(i(332))}}function Bo(e,t){return e=$o(e),xo(e,t)}function Vo(e,t,n){return e=$o(e),So(e,t,n)}function Wo(){if(null!==Ao){var e=Ao;Ao=null,Eo(e)}Ho()}function Ho(){if(!Do&&null!==Zo){Do=!0;var e=0;try{var t=Zo;Bo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Zo=null}catch(t){throw null!==Zo&&(Zo=Zo.slice(e+1)),So(_o,Wo),t}finally{Do=!1}}}var qo=k.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=ao(null),Go=null,Yo=null,Xo=null;function Jo(){Xo=Yo=Go=null}function ea(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Go=e,Xo=Yo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(zi=!0),e.firstContext=null)}function ra(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Yo){if(null===Go)throw Error(i(308));Yo=t,Go.dependencies={lanes:0,firstContext:t,responders:null}}else Yo=Yo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=s)}}if(null!==i){for(f=a.baseState,l=0,d=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,u);break e}f=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,f,u):h))break e;f=o({},f,u);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=p,s=f):d=d.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===d&&(s=f),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=d,Il|=l,e.lanes=l,e.memoizedState=f}}function da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=iu(),r=lu(e),o=la(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),uu(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function va(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(t)?fo:so.current,a=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(t)?fo:so.current,o.context=po(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ka(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Fu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Vu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=Uu(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=$u(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Uu(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case S:return(t=Wu(t,e.mode,n)).return=e,t}if(ba(t)||$(t))return(t=$u(t,e.mode,n,null)).return=e,t;ka(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===E?d(e,t,n.props.children,r,o):s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(ba(n)||$(n))return null!==o?null:d(e,t,n,r,null);ka(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,o,r.key):s(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||$(r))return d(t,e=e.get(n)||null,r,o,null);ka(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,d=i,m=i=0,v=null;null!==d&&m<l.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var y=p(o,d,l[m],u);if(null===y){null===d&&(d=v);break}e&&d&&null===y.alternate&&t(o,d),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,d=v}if(m===l.length)return n(o,d),s;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],u))&&(i=a(d,i,m),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(o,d);m<l.length;m++)null!==(v=h(d,o,m,l[m],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var d=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===d?c=b:d.sibling=b,d=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=f(o,g.value,s))&&(l=a(g,l,v),null===d?c=g:d.sibling=g,d=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===d?c=g:d.sibling=g,d=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===E&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case x:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===E){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=wa(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===E?((r=$u(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Uu(a.type,a.key,a.props,null,e.mode,u)).ref=wa(e,r,a),u.return=e,e=u)}return l(e);case S:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Wu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Vu(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return m(e,r,a,u);if($(a))return v(e,r,a,u);if(c&&ka(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,q(e.type)||"Component"))}return n(e,r)}}var Sa=xa(!0),Ea=xa(!1),Ca={},Pa=ao(Ca),Ra=ao(Ca),Na=ao(Ca);function _a(e){if(e===Ca)throw Error(i(174));return e}function Oa(e,t){switch(lo(Na,t),lo(Ra,e),lo(Pa,Ca),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Pa),lo(Pa,t)}function Ta(){io(Pa),io(Ra),io(Na)}function Ma(e){_a(Na.current);var t=_a(Pa.current),n=pe(t,e.type);t!==n&&(lo(Ra,e),lo(Pa,n))}function za(e){Ra.current===e&&(io(Pa),io(Ra))}var La=ao(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Za=null,Aa=null,Da=!1;function ja(e,t){var n=Du(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Da){var t=Aa;if(t){var n=t;if(!Fa(e,t)){if(!(t=Vr(n.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,Da=!1,void(Za=e);ja(Za,n)}Za=e,Aa=Vr(t.firstChild)}else e.flags=-1025&e.flags|2,Da=!1,Za=e}}function $a(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Za=e}function Ba(e){if(e!==Za)return!1;if(!Da)return $a(e),Da=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=Aa;t;)ja(e,t),t=Vr(t.nextSibling);if($a(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Aa=Vr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Aa=null}}else Aa=Za?Vr(e.stateNode.nextSibling):null;return!0}function Va(){Aa=Za=null,Da=!1}var Wa=[];function Ha(){for(var e=0;e<Wa.length;e++)Wa[e]._workInProgressVersionPrimary=null;Wa.length=0}var qa=k.ReactCurrentDispatcher,Qa=k.ReactCurrentBatchConfig,Ka=0,Ga=null,Ya=null,Xa=null,Ja=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(Ka=a,Ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qa.current=null===e||null===e.memoizedState?_i:Oi,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Xa=Ya=null,t.updateQueue=null,qa.current=Ti,e=n(r,o)}while(ei)}if(qa.current=Ni,t=null!==Ya&&null!==Ya.next,Ka=0,Xa=Ya=Ga=null,Ja=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xa?Ga.memoizedState=Xa=e:Xa=Xa.next=e,Xa}function ai(){if(null===Ya){var e=Ga.alternate;e=null!==e?e.memoizedState:null}else e=Ya.next;var t=null===Xa?Ga.memoizedState:Xa.next;if(null!==t)Xa=t,Ya=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ya=e).memoizedState,baseState:Ya.baseState,baseQueue:Ya.baseQueue,queue:Ya.queue,next:null},null===Xa?Ga.memoizedState=Xa=e:Xa=Xa.next=e}return Xa}function ii(e,t){return"function"==typeof t?t(e):t}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ya,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var d={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=d,a=r):u=u.next=d,Ga.lanes|=c,Il|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ir(r,t.memoizedState)||(zi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ir(a,t.memoizedState)||(zi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Wa.push(t))),e)return n(t._source);throw Wa.push(t),Error(i(350))}function ci(e,t,n,r){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=qa.current,s=u.useState((function(){return si(o,t,n)})),c=s[1],d=s[0];s=Xa;var f=e.memoizedState,p=f.refs,h=p.getSnapshot,m=f.source;f=f.subscribe;var v=Ga;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(l,e)){e=n(t._source),ir(d,e)||(c(e),e=lu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-Bt(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:d}).dispatch=c=Ri.bind(null,Ga,e),s.queue=e,s.baseQueue=null,d=si(o,t,n),s.memoizedState=s.baseState=d),d}function di(e,t,n){return ci(ai(),e,t,n)}function fi(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=Ri.bind(null,Ga,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ga.updateQueue)?(t={lastEffect:null},Ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function mi(){return ai().memoizedState}function vi(e,t,n,r){var o=oi();Ga.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function yi(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Ya){var i=Ya.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Ga.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function gi(e,t){return vi(516,4,e,t)}function bi(e,t){return yi(516,4,e,t)}function wi(e,t){return yi(4,2,e,t)}function ki(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,n){return n=null!=n?n.concat([e]):null,yi(4,2,ki.bind(null,t,e),n)}function Si(){}function Ei(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ci(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pi(e,t){var n=Uo();Bo(98>n?98:n,(function(){e(!0)})),Bo(97<n?97:n,(function(){var n=Qa.transition;Qa.transition=1;try{e(!1),t()}finally{Qa.transition=n}}))}function Ri(e,t,n){var r=iu(),o=lu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ga||null!==i&&i===Ga)ei=Ja=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ir(u,l))return}catch(e){}uu(e,o,r)}}var Ni={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},_i={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:gi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ri.bind(null,Ga,e),[r.memoizedState,e]},useRef:hi,useState:fi,useDebugValue:Si,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return gi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return hi(e=Pi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Da){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Ga.mode)&&(Ga.flags|=516,pi(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Oi={readContext:ra,useCallback:Ei,useContext:ra,useEffect:bi,useImperativeHandle:xi,useLayoutEffect:wi,useMemo:Ci,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:Si,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ti={readContext:ra,useCallback:Ei,useContext:ra,useEffect:bi,useImperativeHandle:xi,useLayoutEffect:wi,useMemo:Ci,useReducer:ui,useRef:mi,useState:function(){return ui(ii)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[mi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Mi=k.ReactCurrentOwner,zi=!1;function Li(e,t,n,r){t.child=null===e?Ea(t,null,n,r):Sa(t,e.child,n,r)}function Ii(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||zi?(t.flags|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Zi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||ju(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Uu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ai(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Ji(e,t,a):(t.flags|=1,(e=Fu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ai(e,t,n,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(zi=!1,0==(a&o))return t.lanes=e.lanes,Ji(e,t,a);0!=(16384&e.flags)&&(zi=!0)}return Fi(e,t,n,r,a)}function Di(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(0,e),null;t.memoizedState={baseLanes:0},vu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,vu(0,r);return Li(e,t,o,n),t.child}function ji(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fi(e,t,n,r,o){var a=ho(n)?fo:so.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||zi?(t.flags|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Ui(e,t,n,r,o){if(ho(n)){var a=!0;go(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),va(t,n,r),ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ra(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ya(t,i,r,s),oa=!1;var f=t.memoizedState;i.state=f,ca(t,r,i,o),u=t.memoizedState,l!==r||f!==u||co.current||oa?("function"==typeof c&&(pa(t,n,c,r),u=t.memoizedState),(l=oa||ma(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Qo(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ra(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&ya(t,i,r,u),oa=!1,f=t.memoizedState,i.state=f,ca(t,r,i,o);var h=t.memoizedState;l!==d||f!==h||co.current||oa?("function"==typeof p&&(pa(t,n,p,r),h=t.memoizedState),(s=oa||ma(t,n,s,r,f,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return $i(e,t,n,r,a,o)}function $i(e,t,n,r,o,a){ji(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Ji(e,t,a);r=t.stateNode,Mi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):Li(e,t,l,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Bi(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),Oa(e,t.containerInfo)}var Vi,Wi,Hi,qi={dehydrated:null,retryLane:0};function Qi(e,t,n){var r,o=t.pendingProps,a=La.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),lo(La,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,t.lanes=33554432,e):((n=Bu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Fu(i,l),null!==e?r=Fu(e,r):(r=$u(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Fu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Bu(t,o,0,null),n=$u(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Yi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Xi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Li(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(La,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Yi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ia(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Yi(t,!0,n,null,a,t.lastEffect);break;case"together":Yi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Fu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Da)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Ta(),io(co),io(so),Ha(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ba(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:za(t);var a=_a(Na.current);if(n=t.type,null!==e&&null!=t.stateNode)Wi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=_a(Pa.current),Ba(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Qr]=t,r[Kr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Pr(xr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":ue(r,l),Pr("invalid",r)}for(var s in Se(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Pr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Vi(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),a=r;break;case"iframe":case"object":case"embed":Pr("load",e),a=r;break;case"video":case"audio":for(a=0;a<xr.length;a++)Pr(xr[a],e);a=r;break;case"source":Pr("error",e),a=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),a=r;break;case"details":Pr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Pr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Pr("invalid",e);break;default:a=r}Se(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?ke(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ve(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Pr("scroll",e):null!=d&&w(e,l,d,s))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}jr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=_a(Na.current),_a(Pa.current),Ba(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return io(La),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ba(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?0===Ml&&(Ml=3):(0!==Ml&&3!==Ml||(Ml=4),null===Rl||0==(134217727&Il)&&0==(134217727&Zl)||fu(Rl,_l))),(r||n)&&(t.flags|=4),null);case 4:return Ta(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(io(La),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Ml||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ia(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(La,1&La.current|2),t.child}e=e.sibling}null!==r.tail&&Fo()>Fl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ia(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Da)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>Fl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=La.current,lo(La,l?1&t|2:1&t),n):null;case 23:case 24:return yu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ta(),io(co),io(so),Ha(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return za(e),null;case 13:return io(La),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(La),null;case 4:return Ta(),null;case 10:return ea(e),null;case 23:case 24:return yu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Vi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,_a(Pa.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(d in Se(n,r),n=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var s=a[d];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(u.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(s=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&c!==s&&(null!=c||null!=s))if("style"===d)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(u.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Pr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Hi=function(e,t,n,r){n!==r&&(t.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=la(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,Wl=r),ol(0,t)},n}function ll(e,t,n){(n=la(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Lu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Br(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function dl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Tu(n,e),Ou(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&da(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}da(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&jr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(ko&&"function"==typeof ko.onCommitFiberUnmount)try{ko.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Tu(t,n);else{r=t;try{o()}catch(e){Lu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Lu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?yl(e,n,t):gl(e,n,t)}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?ke(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ye(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(jl=Fo(),fl(t.child,!0)),void kl(t);case 19:return void kl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function kl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Zu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function xl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Sl=Math.ceil,El=k.ReactCurrentDispatcher,Cl=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,_l=0,Ol=0,Tl=ao(0),Ml=0,zl=null,Ll=0,Il=0,Zl=0,Al=0,Dl=null,jl=0,Fl=1/0;function Ul(){Fl=Fo()+500}var $l,Bl=null,Vl=!1,Wl=null,Hl=null,ql=!1,Ql=null,Kl=90,Gl=[],Yl=[],Xl=null,Jl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,au=!1;function iu(){return 0!=(48&Pl)?Fo():-1!==tu?tu:tu=Fo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===nu&&(nu=Ll),0!==qo.transition){0!==ru&&(ru=null!==Dl?Dl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Uo(),e=jt(0!=(4&Pl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Jl)throw Jl=0,eu=null,Error(i(185));if(null===(e=su(e,t)))return null;$t(e,t,n),e===Rl&&(Zl|=t,4===Ml&&fu(e,_l));var r=Uo();1===t?0!=(8&Pl)&&0==(48&Pl)?pu(e):(cu(e,n),0===Pl&&(Ul(),Wo())):(0==(4&Pl)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),cu(e,n)),Dl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Bt(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Zt(s);var d=It;a[u]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=At(e,e===Rl?_l:0),t=It,0===r)null!==n&&(n!==Lo&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&Eo(n)}15===t?(n=pu.bind(null,e),null===Zo?(Zo=[n],Ao=So(_o,Ho)):Zo.push(n),n=Lo):n=14===t?Vo(99,pu.bind(null,e)):Vo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),du.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function du(e){if(tu=-1,ru=nu=0,0!=(48&Pl))throw Error(i(327));var t=e.callbackNode;if(_u()&&e.callbackNode!==t)return null;var n=At(e,e===Rl?_l:0);if(0===n)return null;var r=n,o=Pl;Pl|=16;var a=wu();for(Rl===e&&_l===r||(Ul(),gu(e,r));;)try{Su();break}catch(t){bu(e,t)}if(Jo(),El.current=a,Pl=o,null!==Nl?r=0:(Rl=null,_l=0,r=Ml),0!=(Ll&Zl))gu(e,0);else if(0!==r){if(2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Br(e.containerInfo)),0!==(n=Dt(e))&&(r=ku(e,n))),1===r)throw t=zl,gu(e,0),fu(e,n),cu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=jl+500-Fo())){if(0!==At(e,0))break;if(((o=e.suspendedLanes)&n)!==n){iu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(Pu.bind(null,e),r);break}Pu(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Bt(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Fo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Ur(Pu.bind(null,e),n);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return cu(e,Fo()),e.callbackNode===t?du.bind(null,e):null}function fu(e,t){for(t&=~Al,t&=~Zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Bt(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Pl))throw Error(i(327));if(_u(),e===Rl&&0!=(e.expiredLanes&_l)){var t=_l,n=ku(e,t);0!=(Ll&Zl)&&(n=ku(e,t=At(e,t)))}else n=ku(e,t=At(e,0));if(0!==e.tag&&2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Br(e.containerInfo)),0!==(t=Dt(e))&&(n=ku(e,t))),1===n)throw n=zl,gu(e,0),fu(e,t),cu(e,Fo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),cu(e,Fo()),null}function hu(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Ul(),Wo())}}function mu(e,t){var n=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=n)&&(Ul(),Wo())}}function vu(e,t){lo(Tl,Ol),Ol|=t,Ll|=t}function yu(){Ol=Tl.current,io(Tl)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ta(),io(co),io(so),Ha();break;case 5:za(r);break;case 4:Ta();break;case 13:case 19:io(La);break;case 10:ea(r);break;case 23:case 24:yu()}n=n.return}Rl=e,Nl=Fu(e.current,null),_l=Ol=Ll=t,Ml=0,zl=null,Al=Zl=Il=0}function bu(e,t){for(;;){var n=Nl;try{if(Jo(),qa.current=Ni,Ja){for(var r=Ga.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ja=!1}if(Ka=0,Xa=Ya=Ga=null,ei=!1,Cl.current=null,null===n||null===n.return){Ml=1,zl=t,Nl=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=_l,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&La.current),f=i;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=f.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(p){var v=f.updateQueue;if(null===v){var y=new Set;y.add(s),f.updateQueue=y}else v.add(s);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=la(-1,1);g.tag=2,ua(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Iu.bind(null,a,s,l);s.then(w,w)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);u=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ml&&(Ml=2),u=rl(u,l),f=i;do{switch(f.tag){case 3:a=u,f.flags|=4096,t&=-t,f.lanes|=t,sa(f,il(0,a,t));break e;case 1:a=u;var k=f.type,x=f.stateNode;if(0==(64&f.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Hl||!Hl.has(x)))){f.flags|=4096,t&=-t,f.lanes|=t,sa(f,ll(f,a,t));break e}}f=f.return}while(null!==f)}Cu(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function wu(){var e=El.current;return El.current=Ni,null===e?Ni:e}function ku(e,t){var n=Pl;Pl|=16;var r=wu();for(Rl===e&&_l===t||gu(e,t);;)try{xu();break}catch(t){bu(e,t)}if(Jo(),Pl=n,El.current=r,null!==Nl)throw Error(i(261));return Rl=null,_l=0,Ml}function xu(){for(;null!==Nl;)Eu(Nl)}function Su(){for(;null!==Nl&&!Co();)Eu(Nl)}function Eu(e){var t=$l(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?Cu(e):Nl=t,Cl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Ol)))return void(Nl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ol)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Nl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Ml&&(Ml=5)}function Pu(e){var t=Uo();return Bo(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{_u()}while(null!==Ql);if(0!=(48&Pl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-Bt(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===Rl&&(Nl=Rl=null,_l=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Pl,Pl|=32,Cl.current=null,Ar=Qt,pr(l=fr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var d=0,f=-1,p=-1,h=0,m=0,v=l,y=null;t:for(;;){for(var g;v!==u||0!==a&&3!==v.nodeType||(f=d+a),v!==s||0!==c&&3!==v.nodeType||(p=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===l)break t;if(y===u&&++h===a&&(f=d),y===s&&++m===c&&(p=d),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===f||-1===p?null:{start:f,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Dr={focusedElem:l,selectionRange:u},Qt=!1,ou=null,au=!1,Bl=r;do{try{Nu()}catch(e){if(null===Bl)throw Error(i(330));Lu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);ou=null,Bl=r;do{try{for(l=e;null!==Bl;){var b=Bl.flags;if(16&b&&ye(Bl.stateNode,""),128&b){var w=Bl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:vl(Bl),Bl.flags&=-3;break;case 6:vl(Bl),Bl.flags&=-3,wl(Bl.alternate,Bl);break;case 1024:Bl.flags&=-1025;break;case 1028:Bl.flags&=-1025,wl(Bl.alternate,Bl);break;case 4:wl(Bl.alternate,Bl);break;case 8:bl(l,u=Bl);var x=u.alternate;hl(u),null!==x&&hl(x)}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));Lu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);if(k=Dr,w=fr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,x=Math.min(l.start,u),l=void 0===l.end?x:Math.min(l.end,u),!k.extend&&x>l&&(u=l,l=x,x=u),u=cr(b,x),a=cr(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),x>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Qt=!!Ar,Dr=Ar=null,e.current=n,Bl=r;do{try{for(b=e;null!==Bl;){var S=Bl.flags;if(36&S&&dl(b,Bl.alternate,Bl),128&S){w=void 0;var E=Bl.ref;if(null!==E){var C=Bl.stateNode;switch(Bl.tag){case 5:w=C;break;default:w=C}"function"==typeof E?E(w):E.current=w}}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));Lu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=null,Io(),Pl=o}else e.current=n;if(ql)ql=!1,Ql=e,Kl=t;else for(Bl=r;null!==Bl;)t=Bl.nextEffect,Bl.nextEffect=null,8&Bl.flags&&((S=Bl).sibling=null,S.stateNode=null),Bl=t;if(0===(r=e.pendingLanes)&&(Hl=null),1===r?e===eu?Jl++:(Jl=0,eu=e):Jl=0,n=n.stateNode,ko&&"function"==typeof ko.onCommitFiberRoot)try{ko.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Fo()),Vl)throw Vl=!1,e=Wl,Wl=null,e;return 0!=(8&Pl)||Wo(),null}function Nu(){for(;null!==Bl;){var e=Bl.alternate;au||null===ou||(0!=(8&Bl.flags)?Je(Bl,ou)&&(au=!0):13===Bl.tag&&xl(e,Bl)&&Je(Bl,ou)&&(au=!0));var t=Bl.flags;0!=(256&t)&&cl(e,Bl),0==(512&t)||ql||(ql=!0,Vo(97,(function(){return _u(),null}))),Bl=Bl.nextEffect}}function _u(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,Bo(e,Mu)}return!1}function Ou(e,t){Gl.push(t,e),ql||(ql=!0,Vo(97,(function(){return _u(),null})))}function Tu(e,t){Yl.push(t,e),ql||(ql=!0,Vo(97,(function(){return _u(),null})))}function Mu(){if(null===Ql)return!1;var e=Ql;if(Ql=null,0!=(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var n=Yl;Yl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,Wo(),!0}function zu(e,t,n){ua(e,t=il(0,t=rl(n,t),1)),t=iu(),null!==(e=su(e,1))&&($t(e,1,t),cu(e,t))}function Lu(e,t){if(3===e.tag)zu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){zu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){var o=ll(n,e=rl(t,e),1);if(ua(n,o),o=iu(),null!==(n=su(n,1)))$t(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Iu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=iu(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(_l&n)===n&&(4===Ml||3===Ml&&(62914560&_l)===_l&&500>Fo()-jl?gu(e,0):Al|=n),cu(e,t)}function Zu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===nu&&(nu=Ll),0===(t=Ft(62914560&~nu))&&(t=4194304))),n=iu(),null!==(e=su(e,t))&&($t(e,t,n),cu(e,n))}function Au(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Du(e,t,n,r){return new Au(e,t,n,r)}function ju(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,t){var n=e.alternate;return null===n?((n=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Uu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)ju(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return $u(n.children,o,a,t);case Z:l=8,o|=16;break;case C:l=8,o|=1;break;case P:return(e=Du(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=a,e;case O:return(e=Du(13,n,t,o)).type=O,e.elementType=O,e.lanes=a,e;case T:return(e=Du(19,n,t,o)).elementType=T,e.lanes=a,e;case A:return Bu(n,o,a,t);case D:return(e=Du(24,n,t,o)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case R:l=10;break e;case N:l=9;break e;case _:l=11;break e;case M:l=14;break e;case z:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Du(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function $u(e,t,n,r){return(e=Du(7,e,r,t)).lanes=n,e}function Bu(e,t,n,r){return(e=Du(23,e,r,t)).elementType=A,e.lanes=n,e}function Vu(e,t,n){return(e=Du(6,e,null,t)).lanes=n,e}function Wu(e,t,n){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qu(e,t,n,r){var o=t.current,a=iu(),l=lu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=yo(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),uu(o,l,a),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Gu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Gu(e,t),(e=e.alternate)&&Gu(e,t)}function Xu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hu(e,t,null!=n&&!0===n.hydrate),t=Du(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Gr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(i);l.call(e)}}Qu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(i);u.call(e)}}mu((function(){Qu(t,i,e,o)}))}return Ku(i)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(i(200));return qu(e,t,null,n)}$l=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)zi=!0;else{if(0==(n&r)){switch(zi=!1,t.tag){case 3:Bi(t),Va();break;case 5:Ma(t);break;case 1:ho(t.type)&&go(t);break;case 4:Oa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qi(e,t,n):(lo(La,1&La.current),null!==(t=Ji(e,t,n))?t.sibling:null);lo(La,1&La.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(La,La.current),r)break;return null;case 23:case 24:return t.lanes=0,Di(e,t,n)}return Ji(e,t,n)}zi=0!=(16384&e.flags)}else zi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var a=!0;go(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(t,r,l,e),o.updater=ha,t.stateNode=o,o._reactInternals=t,ga(t,r,e,n),t=$i(null,t,r,!0,a,n)}else t.tag=0,Li(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return ju(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===M)return 14}return 2}(o),e=Qo(o,e),a){case 0:t=Fi(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Ii(null,t,o,e,n);break e;case 14:t=Zi(null,t,o,Qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Bi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Va(),t=Ji(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Aa=Vr(t.stateNode.containerInfo.firstChild),Za=t,a=Da=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Wa.push(a);for(n=Ea(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Li(e,t,r,n),Va();t=t.child}return t;case 5:return Ma(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fr(r,o)?l=null:null!==a&&Fr(r,a)&&(t.flags|=16),ji(e,t),Li(e,t,l,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return Qi(e,t,n);case 4:return Oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Li(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Li(e,t,t.pendingProps,n),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(lo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(-1,n&-n)).tag=2,ua(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ta(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Li(e,t,r,n),t.child;case 14:return a=Qo(o=t.type,t.pendingProps),Zi(e,t,o,a=Qo(o.type,a),r,n);case 15:return Ai(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,go(t)):e=!1,na(t,n),va(t,r,o),ga(t,r,o,n),$i(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return Di(e,t,n)}throw Error(i(156,t.tag))},Xu.prototype.render=function(e){Qu(e,this._internalRoot,null,null)},Xu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qu(null,e,null,(function(){t[Gr]=null}))},et=function(e){13===e.tag&&(uu(e,4,iu()),Yu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,iu()),Yu(e,67108864))},nt=function(e){if(13===e.tag){var t=iu(),n=lu(e);uu(e,n,t),Yu(e,n)}},rt=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));Y(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Me=hu,ze=function(e,t,n,r,o){var a=Pl;Pl|=4;try{return Bo(98,e.bind(null,t,n,r,o))}finally{0===(Pl=a)&&(Ul(),Wo())}},Le=function(){0==(49&Pl)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Fo())}))}Wo()}(),_u())},Ie=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=n)&&(Ul(),Wo())}};var ns={Events:[Jr,eo,to,Oe,Te,_u,{current:!1}]},rs={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{wo=as.inject(os),ko=as}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Pl;if(0!=(48&n))return e(t);Pl|=1;try{if(e)return Bo(99,e.bind(null,t))}finally{Pl=n,Wo()}},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(i(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ju(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(i(40));return!!e._reactRootContainer&&(mu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Gr]=null}))})),!0)},t.unstable_batchedUpdates=hu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="17.0.1"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case f:case v:case m:case u:return e;default:return t}}case o:return t}}}function x(e){return k(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===f},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},1216:(e,t,n)=>{"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(7294),a=d(o),i=d(n(5697)),l=n(4081),u=d(n(8315)),s=d(n(8282)),c=d(n(821));function d(e){return e&&e.__esModule?e:{default:e}}var f="data-lazyload-listened",p=[],h=[],m=!1;try{var v=Object.defineProperty({},"passive",{get:function(){m=!0}});window.addEventListener("test",null,v)}catch(e){}var y=!!m&&{capture:!1,passive:!0},g=function(e){var t=e.ref;if(t instanceof HTMLElement){var n=(0,u.default)(t);(e.props.overflow&&n!==t.ownerDocument&&n!==document&&n!==document.documentElement?function(e,t){var n=e.ref,r=void 0,o=void 0,a=void 0,i=void 0;try{var l=t.getBoundingClientRect();r=l.top,o=l.left,a=l.height,i=l.width}catch(e){r=0,o=0,a=0,i=0}var u=window.innerHeight||document.documentElement.clientHeight,s=window.innerWidth||document.documentElement.clientWidth,c=Math.max(r,0),d=Math.max(o,0),f=Math.min(u,r+a)-c,p=Math.min(s,o+i)-d,h=void 0,m=void 0,v=void 0,y=void 0;try{var g=n.getBoundingClientRect();h=g.top,m=g.left,v=g.height,y=g.width}catch(e){h=0,m=0,v=0,y=0}var b=h-c,w=m-d,k=Array.isArray(e.props.offset)?e.props.offset:[e.props.offset,e.props.offset];return b-k[0]<=f&&b+v+k[1]>=0&&w-k[0]<=p&&w+y+k[1]>=0}(e,n):function(e){var t=e.ref;if(!(t.offsetWidth||t.offsetHeight||t.getClientRects().length))return!1;var n=void 0,r=void 0;try{var o=t.getBoundingClientRect();n=o.top,r=o.height}catch(e){n=0,r=0}var a=window.innerHeight||document.documentElement.clientHeight,i=Array.isArray(e.props.offset)?e.props.offset:[e.props.offset,e.props.offset];return n-i[0]<=a&&n+r+i[1]>=0}(e))?e.visible||(e.props.once&&h.push(e),e.visible=!0,e.forceUpdate()):e.props.once&&e.visible||(e.visible=!1,e.props.unmountIfInvisible&&e.forceUpdate())}},b=function(){for(var e=0;e<p.length;++e){var t=p[e];g(t)}h.forEach((function(e){var t=p.indexOf(e);-1!==t&&p.splice(t,1)})),h=[]},w=void 0,k=null,x=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.visible=!1,n.setRef=n.setRef.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"componentDidMount",value:function(){var e=window,t=this.props.scrollContainer;t&&"string"==typeof t&&(e=e.document.querySelector(t));var n=void 0!==this.props.debounce&&"throttle"===w||"debounce"===w&&void 0===this.props.debounce;if(n&&((0,l.off)(e,"scroll",k,y),(0,l.off)(window,"resize",k,y),k=null),k||(void 0!==this.props.debounce?(k=(0,s.default)(b,"number"==typeof this.props.debounce?this.props.debounce:300),w="debounce"):void 0!==this.props.throttle?(k=(0,c.default)(b,"number"==typeof this.props.throttle?this.props.throttle:300),w="throttle"):k=b),this.props.overflow){var r=(0,u.default)(this.ref);if(r&&"function"==typeof r.getAttribute){var o=+r.getAttribute(f)+1;1===o&&r.addEventListener("scroll",k,y),r.setAttribute(f,o)}}else if(0===p.length||n){var a=this.props,i=a.scroll,d=a.resize;i&&(0,l.on)(e,"scroll",k,y),d&&(0,l.on)(window,"resize",k,y)}p.push(this),g(this)}},{key:"shouldComponentUpdate",value:function(){return this.visible}},{key:"componentWillUnmount",value:function(){if(this.props.overflow){var e=(0,u.default)(this.ref);if(e&&"function"==typeof e.getAttribute){var t=+e.getAttribute(f)-1;0===t?(e.removeEventListener("scroll",k,y),e.removeAttribute(f)):e.setAttribute(f,t)}}var n=p.indexOf(this);-1!==n&&p.splice(n,1),0===p.length&&"undefined"!=typeof window&&((0,l.off)(window,"resize",k,y),(0,l.off)(window,"scroll",k,y))}},{key:"setRef",value:function(e){e&&(this.ref=e)}},{key:"render",value:function(){var e=this.props,t=e.height,n=e.children,r=e.placeholder,o=e.classNamePrefix,i=e.style;return a.default.createElement("div",{className:o+"-wrapper",ref:this.setRef,style:i},this.visible?n:r||a.default.createElement("div",{style:{height:t},className:o+"-placeholder"}))}}]),t}(o.Component);x.propTypes={classNamePrefix:i.default.string,once:i.default.bool,height:i.default.oneOfType([i.default.number,i.default.string]),offset:i.default.oneOfType([i.default.number,i.default.arrayOf(i.default.number)]),overflow:i.default.bool,resize:i.default.bool,scroll:i.default.bool,children:i.default.node,throttle:i.default.oneOfType([i.default.number,i.default.bool]),debounce:i.default.oneOfType([i.default.number,i.default.bool]),placeholder:i.default.node,scrollContainer:i.default.oneOfType([i.default.string,i.default.object]),unmountIfInvisible:i.default.bool,style:i.default.object},x.defaultProps={classNamePrefix:"lazyload",once:!1,offset:0,overflow:!1,resize:!1,scroll:!0,unmountIfInvisible:!1};t.ZP=x},8282:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=void 0,o=void 0,a=void 0,i=void 0,l=void 0,u=function u(){var s=+new Date-i;s<t&&s>=0?r=setTimeout(u,t-s):(r=null,n||(l=e.apply(a,o),r||(a=null,o=null)))};return function(){a=this,o=arguments,i=+new Date;var s=n&&!r;return r||(r=setTimeout(u,t)),s&&(l=e.apply(a,o),a=null,o=null),l}}},4081:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=function(e,t,n,r){r=r||!1,e.addEventListener?e.addEventListener(t,n,r):e.attachEvent&&e.attachEvent("on"+t,(function(t){n.call(e,t||window.event)}))},t.off=function(e,t,n,r){r=r||!1,e.removeEventListener?e.removeEventListener(t,n,r):e.detachEvent&&e.detachEvent("on"+t,n)}},8315:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!(e instanceof HTMLElement))return document.documentElement;for(var t="absolute"===e.style.position,n=/(scroll|auto)/,r=e;r;){if(!r.parentNode)return e.ownerDocument||document.documentElement;var o=window.getComputedStyle(r),a=o.position,i=o.overflow,l=o["overflow-x"],u=o["overflow-y"];if("static"===a&&t)r=r.parentNode;else{if(n.test(i)&&n.test(l)&&n.test(u))return r;r=r.parentNode}}return e.ownerDocument||e.documentElement||document.documentElement}},821:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r,o;return t||(t=250),function(){var a=n||this,i=+new Date,l=arguments;r&&i<r+t?(clearTimeout(o),o=setTimeout((function(){r=i,e.apply(a,l)}),t)):(r=i,e.apply(a,l))}}},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),u=d("react.forward_ref"),t.Suspense=d("react.suspense"),s=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+P(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),R(i,t,n,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+P(l=e[s],s);u+=R(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=R(l=l.value,t,n,c=r+P(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function T(){var e=O.current;if(null===e)throw Error(p(321));return e}var M={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!x.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var d=0;d<c;d++)s[d]=arguments[d+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,d=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+g;try{v(!0,e)?k.postMessage(null):(m=!1,v=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,k.postMessage(null))},r=function(e,n){y=f((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>C(i,n))void 0!==u&&0>C(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],R=[],N=1,_=null,O=3,T=!1,M=!1,z=!1;function L(e){for(var t=S(R);null!==t;){if(null===t.callback)E(R);else{if(!(t.startTime<=e))break;E(R),t.sortIndex=t.expirationTime,x(P,t)}t=S(R)}}function I(e){if(z=!1,L(e),!M)if(null!==S(P))M=!0,n(Z);else{var t=S(R);null!==t&&r(I,t.startTime-e)}}function Z(e,n){M=!1,z&&(z=!1,o()),T=!0;var a=O;try{for(L(n),_=S(P);null!==_&&(!(_.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=_.callback;if("function"==typeof i){_.callback=null,O=_.priorityLevel;var l=i(_.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?_.callback=l:_===S(P)&&E(P),L(n)}else E(P);_=S(P)}if(null!==_)var u=!0;else{var s=S(R);null!==s&&r(I,s.startTime-n),u=!1}return u}finally{_=null,O=a,T=!1}}var A=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||T||(M=!0,n(Z))},t.unstable_getCurrentPriorityLevel=function(){return O},t.unstable_getFirstCallbackNode=function(){return S(P)},t.unstable_next=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=A,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:N++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(R,e),null===S(P)&&e===S(R)&&(z?o():z=!0,r(I,i-l))):(e.sortIndex=u,x(P,e),M||T||(M=!0,n(Z))),e},t.unstable_wrapCallback=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(7294),t=n(3935),r=n(2122),o=n(1253),a=n(6156),i=(n(5697),n(6010)),l=n(8786),u=n(3871),s=e.forwardRef((function(t,n){var a=t.classes,l=t.className,s=t.component,c=void 0===s?"div":s,d=t.disableGutters,f=void 0!==d&&d,p=t.fixed,h=void 0!==p&&p,m=t.maxWidth,v=void 0===m?"lg":m,y=(0,o.Z)(t,["classes","className","component","disableGutters","fixed","maxWidth"]);return e.createElement(c,(0,r.Z)({className:(0,i.Z)(a.root,l,h&&a.fixed,f&&a.disableGutters,!1!==v&&a["maxWidth".concat((0,u.Z)(String(v)))]),ref:n},y))}));const c=(0,l.Z)((function(e){return{root:(0,a.Z)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2),display:"block"},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(e.breakpoints.values).reduce((function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t}),{}),maxWidthXs:(0,a.Z)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:(0,a.Z)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:(0,a.Z)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:(0,a.Z)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:(0,a.Z)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(s);var d={WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},f=function(e){return(0,r.Z)({color:e.palette.text.primary},e.typography.body2,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})};const p=(0,l.Z)((function(e){return{"@global":{html:d,"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:(0,r.Z)({margin:0},f(e),{"&::backdrop":{backgroundColor:e.palette.background.default}})}}}),{name:"MuiCssBaseline"})((function(t){var n=t.children,r=void 0===n?null:n;return t.classes,e.createElement(e.Fragment,null,r)}));var h=n(7342),m=n(9402);const v=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,h.Z)(e,(0,r.Z)({defaultTheme:m.Z},t))};var y={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},g=e.forwardRef((function(t,n){var a=t.align,l=void 0===a?"inherit":a,s=t.classes,c=t.className,d=t.color,f=void 0===d?"initial":d,p=t.component,h=t.display,m=void 0===h?"initial":h,v=t.gutterBottom,g=void 0!==v&&v,b=t.noWrap,w=void 0!==b&&b,k=t.paragraph,x=void 0!==k&&k,S=t.variant,E=void 0===S?"body1":S,C=t.variantMapping,P=void 0===C?y:C,R=(0,o.Z)(t,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),N=p||(x?"p":P[E]||y[E])||"span";return e.createElement(N,(0,r.Z)({className:(0,i.Z)(s.root,c,"inherit"!==E&&s[E],"initial"!==f&&s["color".concat((0,u.Z)(f))],w&&s.noWrap,g&&s.gutterBottom,x&&s.paragraph,"inherit"!==l&&s["align".concat((0,u.Z)(l))],"initial"!==m&&s["display".concat((0,u.Z)(m))]),ref:n},R))}));const b=(0,l.Z)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(g);var w=e.forwardRef((function(t,n){var a=t.classes,l=t.className,u=t.component,s=void 0===u?"div":u,c=t.square,d=void 0!==c&&c,f=t.elevation,p=void 0===f?1:f,h=t.variant,m=void 0===h?"elevation":h,v=(0,o.Z)(t,["classes","className","component","square","elevation","variant"]);return e.createElement(s,(0,r.Z)({className:(0,i.Z)(a.root,l,"outlined"===m?a.outlined:a["elevation".concat(p)],!d&&a.rounded),ref:n},v))}));const k=(0,l.Z)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),(0,r.Z)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(w);var x=e.forwardRef((function(t,n){var a=t.classes,l=t.className,u=t.raised,s=void 0!==u&&u,c=(0,o.Z)(t,["classes","className","raised"]);return e.createElement(k,(0,r.Z)({className:(0,i.Z)(a.root,l),elevation:s?8:1,ref:n},c))}));const S=(0,l.Z)({root:{overflow:"hidden"}},{name:"MuiCard"})(x);var E=n(3834),C=n(5192),P=n(4896),R=n(7329),N=n(9756),_=n(3349),O=n(3552);const T=e.createContext(null);function M(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function z(e,t,n){return null!=n[t]?n[t]:e.props[t]}function L(t,n,r){var o=M(t.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,e.isValidElement)(l)){var u=i in n,s=i in o,c=n[i],d=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!d?s||!u||d?s&&u&&(0,e.isValidElement)(c)&&(a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:z(l,"exit",t),enter:z(l,"enter",t)})):a[i]=(0,e.cloneElement)(l,{in:!1}):a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:z(l,"exit",t),enter:z(l,"enter",t)})}})),a}var I=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Z=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind((0,_.Z)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}(0,O.Z)(n,t);var o=n.prototype;return o.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},o.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=t,o=i,M(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:z(t,"appear",r),enter:z(t,"enter",r),exit:z(t,"exit",r)})}))):L(t,a,i),firstRender:!1}},o.handleExited=function(e,t){var n=M(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,r.Z)({},t.children);return delete n[e.key],{children:n}})))},o.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=(0,N.Z)(t,["component","childFactory"]),a=this.state.contextValue,i=I(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(T.Provider,{value:a},i):e.createElement(T.Provider,{value:a},e.createElement(n,o,i))},n}(e.Component);Z.propTypes={},Z.defaultProps={component:"div",childFactory:function(e){return e}};const A=Z;var D="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const j=function(t){var n=t.classes,r=t.pulsate,o=void 0!==r&&r,a=t.rippleX,l=t.rippleY,u=t.rippleSize,s=t.in,c=t.onExited,d=void 0===c?function(){}:c,f=t.timeout,p=e.useState(!1),h=p[0],m=p[1],v=(0,i.Z)(n.ripple,n.rippleVisible,o&&n.ripplePulsate),y={width:u,height:u,top:-u/2+l,left:-u/2+a},g=(0,i.Z)(n.child,h&&n.childLeaving,o&&n.childPulsate),b=(0,C.Z)(d);return D((function(){if(!s){m(!0);var e=setTimeout(b,f);return function(){clearTimeout(e)}}}),[b,s,f]),e.createElement("span",{className:v,style:y},e.createElement("span",{className:g}))};var F=e.forwardRef((function(t,n){var a=t.center,l=void 0!==a&&a,u=t.classes,s=t.className,c=(0,o.Z)(t,["center","classes","className"]),d=e.useState([]),f=d[0],p=d[1],h=e.useRef(0),m=e.useRef(null);e.useEffect((function(){m.current&&(m.current(),m.current=null)}),[f]);var v=e.useRef(!1),y=e.useRef(null),g=e.useRef(null),b=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(y.current)}}),[]);var w=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,a=t.rippleSize,i=t.cb;p((function(t){return[].concat((0,R.Z)(t),[e.createElement(j,{key:h.current,classes:u,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:a})])})),h.current+=1,m.current=i}),[u]),k=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,o=void 0!==r&&r,a=t.center,i=void 0===a?l||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&v.current)v.current=!1;else{"touchstart"===e.type&&(v.current=!0);var c,d,f,p=s?null:b.current,h=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(i||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(h.width/2),d=Math.round(h.height/2);else{var m=e.touches?e.touches[0]:e,k=m.clientX,x=m.clientY;c=Math.round(k-h.left),d=Math.round(x-h.top)}if(i)(f=Math.sqrt((2*Math.pow(h.width,2)+Math.pow(h.height,2))/3))%2==0&&(f+=1);else{var S=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,E=2*Math.max(Math.abs((p?p.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(S,2)+Math.pow(E,2))}e.touches?null===g.current&&(g.current=function(){w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})},y.current=setTimeout((function(){g.current&&(g.current(),g.current=null)}),80)):w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})}}),[l,w]),x=e.useCallback((function(){k({},{pulsate:!0})}),[k]),S=e.useCallback((function(e,t){if(clearTimeout(y.current),"touchend"===e.type&&g.current)return e.persist(),g.current(),g.current=null,void(y.current=setTimeout((function(){S(e,t)})));g.current=null,p((function(e){return e.length>0?e.slice(1):e})),m.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:x,start:k,stop:S}}),[x,k,S]),e.createElement("span",(0,r.Z)({className:(0,i.Z)(u.root,s),ref:b},c),e.createElement(A,{component:null,exit:!0},f))}));const U=(0,l.Z)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(F));var $=e.forwardRef((function(n,a){var l=n.action,u=n.buttonRef,s=n.centerRipple,c=void 0!==s&&s,d=n.children,f=n.classes,p=n.className,h=n.component,m=void 0===h?"button":h,v=n.disabled,y=void 0!==v&&v,g=n.disableRipple,b=void 0!==g&&g,w=n.disableTouchRipple,k=void 0!==w&&w,x=n.focusRipple,S=void 0!==x&&x,R=n.focusVisibleClassName,N=n.onBlur,_=n.onClick,O=n.onFocus,T=n.onFocusVisible,M=n.onKeyDown,z=n.onKeyUp,L=n.onMouseDown,I=n.onMouseLeave,Z=n.onMouseUp,A=n.onTouchEnd,D=n.onTouchMove,j=n.onTouchStart,F=n.onDragLeave,$=n.tabIndex,B=void 0===$?0:$,V=n.TouchRippleProps,W=n.type,H=void 0===W?"button":W,q=(0,o.Z)(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),Q=e.useRef(null),K=e.useRef(null),G=e.useState(!1),Y=G[0],X=G[1];y&&Y&&X(!1);var J=(0,P.Z)(),ee=J.isFocusVisible,te=J.onBlurVisible,ne=J.ref;function re(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;return(0,C.Z)((function(r){return t&&t(r),!n&&K.current&&K.current[e](r),!0}))}e.useImperativeHandle(l,(function(){return{focusVisible:function(){X(!0),Q.current.focus()}}}),[]),e.useEffect((function(){Y&&S&&!b&&K.current.pulsate()}),[b,S,Y]);var oe=re("start",L),ae=re("stop",F),ie=re("stop",Z),le=re("stop",(function(e){Y&&e.preventDefault(),I&&I(e)})),ue=re("start",j),se=re("stop",A),ce=re("stop",D),de=re("stop",(function(e){Y&&(te(e),X(!1)),N&&N(e)}),!1),fe=(0,C.Z)((function(e){Q.current||(Q.current=e.currentTarget),ee(e)&&(X(!0),T&&T(e)),O&&O(e)})),pe=function(){var e=t.findDOMNode(Q.current);return m&&"button"!==m&&!("A"===e.tagName&&e.href)},he=e.useRef(!1),me=(0,C.Z)((function(e){S&&!he.current&&Y&&K.current&&" "===e.key&&(he.current=!0,e.persist(),K.current.stop(e,(function(){K.current.start(e)}))),e.target===e.currentTarget&&pe()&&" "===e.key&&e.preventDefault(),M&&M(e),e.target===e.currentTarget&&pe()&&"Enter"===e.key&&!y&&(e.preventDefault(),_&&_(e))})),ve=(0,C.Z)((function(e){S&&" "===e.key&&K.current&&Y&&!e.defaultPrevented&&(he.current=!1,e.persist(),K.current.stop(e,(function(){K.current.pulsate(e)}))),z&&z(e),_&&e.target===e.currentTarget&&pe()&&" "===e.key&&!e.defaultPrevented&&_(e)})),ye=m;"button"===ye&&q.href&&(ye="a");var ge={};"button"===ye?(ge.type=H,ge.disabled=y):("a"===ye&&q.href||(ge.role="button"),ge["aria-disabled"]=y);var be=(0,E.Z)(u,a),we=(0,E.Z)(ne,Q),ke=(0,E.Z)(be,we),xe=e.useState(!1),Se=xe[0],Ee=xe[1];e.useEffect((function(){Ee(!0)}),[]);var Ce=Se&&!b&&!y;return e.createElement(ye,(0,r.Z)({className:(0,i.Z)(f.root,p,Y&&[f.focusVisible,R],y&&f.disabled),onBlur:de,onClick:_,onFocus:fe,onKeyDown:me,onKeyUp:ve,onMouseDown:oe,onMouseLeave:le,onMouseUp:ie,onDragLeave:ae,onTouchEnd:se,onTouchMove:ce,onTouchStart:ue,ref:ke,tabIndex:y?-1:B},ge,q),d,Ce?e.createElement(U,(0,r.Z)({ref:K,center:c},V)):null)}));const B=(0,l.Z)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})($);var V=e.forwardRef((function(t,n){var a=t.children,l=t.classes,u=t.className,s=t.focusVisibleClassName,c=(0,o.Z)(t,["children","classes","className","focusVisibleClassName"]);return e.createElement(B,(0,r.Z)({className:(0,i.Z)(l.root,u),focusVisibleClassName:(0,i.Z)(s,l.focusVisible),ref:n},c),a,e.createElement("span",{className:l.focusHighlight}))}));const W=(0,l.Z)((function(e){return{root:{display:"block",textAlign:"inherit",width:"100%","&:hover $focusHighlight":{opacity:e.palette.action.hoverOpacity},"&$focusVisible $focusHighlight":{opacity:.12}},focusVisible:{},focusHighlight:{overflow:"hidden",pointerEvents:"none",position:"absolute",top:0,right:0,bottom:0,left:0,borderRadius:"inherit",opacity:0,backgroundColor:"currentcolor",transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}}}),{name:"MuiCardActionArea"})(V);var H=e.forwardRef((function(t,n){var a=t.classes,l=t.className,u=t.component,s=void 0===u?"div":u,c=(0,o.Z)(t,["classes","className","component"]);return e.createElement(s,(0,r.Z)({className:(0,i.Z)(a.root,l),ref:n},c))}));const q=(0,l.Z)({root:{padding:16,"&:last-child":{paddingBottom:24}}},{name:"MuiCardContent"})(H);var Q=n(1216);const K=(e,t,n)=>n.indexOf(e)===t,G=(e,t,n)=>{if(n){const r=6371e3,o=n?.lat*Math.PI/180,a=e*Math.PI/180,i=(e-n?.lat)*Math.PI/180,l=(t-n?.lng)*Math.PI/180,u=Math.sin(i/2)*Math.sin(i/2)+Math.cos(o)*Math.cos(a)*Math.sin(l/2)*Math.sin(l/2);return(r*(2*Math.atan2(Math.sqrt(u),Math.sqrt(1-u)))/1e3).toFixed(1)}return!1},Y=e=>""===e?"unknown":e,X=(e,t,n)=>e.filter((e=>String(e[t]).toLowerCase().indexOf(n.toLowerCase())>-1)),J=v((e=>({root:{},transition:"all 0.8s",card:{marginBottom:e.spacing(2),transition:"all 0.3s"},active:{backgroundColor:e.palette.secondary.main,transition:"all 0.5s"}})));function ee({data:t,onClick:n,currentCityIndex:r}){const o=J();return e.createElement("div",{className:o.root},e.createElement(b,{variant:"body2",color:"textSecondary",component:"p"},t?.length>0?`Results:${t?.length}`:"Result: Not Found :("),t.map(((t,a)=>e.createElement(Q.ZP,{placeholder:"loading...",key:a},e.createElement(S,{className:`${o.card} ${a===r&&o.active}`,onClick:()=>n(a)},e.createElement(W,null,e.createElement(q,null,e.createElement(b,{gutterBottom:!0,variant:"h5",component:"div"},t.city,e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},t.admin_name)),e.createElement(b,{variant:"body2",color:"textSecondary",component:"p"},"Population: ",Y(t.population)),e.createElement(b,{variant:"body2",color:"textSecondary",component:"p"},"Population Proper: ",Y(t.population_proper)))))))))}const te="GET_CITIES",ne="GET_CITIES_FAIL",re="GET_CITIES_SUCCESS",oe="CHANGE_RESULT",ae="CURRENT_CITY_INDEX",ie="GET_CURRENT_LOCATION",le="GET_CURRENT_LOCATION_FAIL",ue="CHANGE_KEYWORD_SEARCH",se={cities:[],loading:!0,resultSearch:[],currentCityIndex:0,error:!1,currentLocation:{lat:0,lng:0},currentLocationError:"",keyword:""},ce=(0,e.createContext)(se),{Provider:de}=ce,fe=({children:t})=>{const[n,r]=(0,e.useReducer)(((e,t)=>{switch(t.type){case te:return{...e,loading:!0};case re:return{...e,cities:t.value,error:!1,loading:!1};case ne:return{...e,cities:[],error:!0,loading:!1};case oe:return{...e,resultSearch:t.value};case ae:return{...e,currentCityIndex:t.value};case ie:return{...e,currentLocation:t.value,currentLocationError:""};case le:return{...e,currentLocationError:t.value};case ue:return{...e,keyword:t.value};default:throw new Error}}),se);return e.createElement(de,{value:{state:n,dispatch:r}},t)};var pe=n(9693),he=e.forwardRef((function(t,n){var a=t.classes,l=t.className,s=t.color,c=void 0===s?"primary":s,d=t.position,f=void 0===d?"fixed":d,p=(0,o.Z)(t,["classes","className","color","position"]);return e.createElement(k,(0,r.Z)({square:!0,component:"header",elevation:4,className:(0,i.Z)(a.root,a["position".concat((0,u.Z)(f))],a["color".concat((0,u.Z)(c))],l,"fixed"===f&&"mui-fixed"),ref:n},p))}));const me=(0,l.Z)((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(he);var ve=e.forwardRef((function(t,n){var a=t.classes,l=t.className,u=t.component,s=void 0===u?"div":u,c=t.disableGutters,d=void 0!==c&&c,f=t.variant,p=void 0===f?"regular":f,h=(0,o.Z)(t,["classes","className","component","disableGutters","variant"]);return e.createElement(s,(0,r.Z)({className:(0,i.Z)(a.root,a[p],l,!d&&a.gutters),ref:n},h))}));const ye=(0,l.Z)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:(0,a.Z)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(ve);var ge=n(288),be=e.createContext();const we=be;var ke=n(9437);function xe(e,t){return parseInt(e[t],10)||0}var Se="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,Ee={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};const Ce=e.forwardRef((function(t,n){var a=t.onChange,i=t.rows,l=t.rowsMax,u=t.rowsMin,s=void 0===u?1:u,c=t.style,d=t.value,f=(0,o.Z)(t,["onChange","rows","rowsMax","rowsMin","style","value"]),p=i||s,h=e.useRef(null!=d).current,m=e.useRef(null),v=(0,E.Z)(n,m),y=e.useRef(null),g=e.useRef(0),b=e.useState({}),w=b[0],k=b[1],x=e.useCallback((function(){var e=m.current,n=window.getComputedStyle(e),r=y.current;r.style.width=n.width,r.value=e.value||t.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=n["box-sizing"],a=xe(n,"padding-bottom")+xe(n,"padding-top"),i=xe(n,"border-bottom-width")+xe(n,"border-top-width"),u=r.scrollHeight-a;r.value="x";var s=r.scrollHeight-a,c=u;p&&(c=Math.max(Number(p)*s,c)),l&&(c=Math.min(Number(l)*s,c));var d=(c=Math.max(c,s))+("border-box"===o?a+i:0),f=Math.abs(c-u)<=1;k((function(e){return g.current<20&&(d>0&&Math.abs((e.outerHeightStyle||0)-d)>1||e.overflow!==f)?(g.current+=1,{overflow:f,outerHeightStyle:d}):e}))}),[l,p,t.placeholder]);return e.useEffect((function(){var e=(0,ke.Z)((function(){g.current=0,x()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[x]),Se((function(){x()})),e.useEffect((function(){g.current=0}),[d]),e.createElement(e.Fragment,null,e.createElement("textarea",(0,r.Z)({value:d,onChange:function(e){g.current=0,h||x(),a&&a(e)},ref:v,rows:p,style:(0,r.Z)({height:w.outerHeightStyle,overflow:w.overflow?"hidden":null},c)},f)),e.createElement("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:y,tabIndex:-1,style:(0,r.Z)({},Ee,c)}))}));function Pe(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}var Re="undefined"==typeof window?e.useEffect:e.useLayoutEffect,Ne=e.forwardRef((function(t,n){var a=t["aria-describedby"],l=t.autoComplete,s=t.autoFocus,c=t.classes,d=t.className,f=(t.color,t.defaultValue),p=t.disabled,h=t.endAdornment,m=(t.error,t.fullWidth),v=void 0!==m&&m,y=t.id,g=t.inputComponent,b=void 0===g?"input":g,w=t.inputProps,k=void 0===w?{}:w,x=t.inputRef,S=(t.margin,t.multiline),C=void 0!==S&&S,P=t.name,R=t.onBlur,N=t.onChange,_=t.onClick,O=t.onFocus,T=t.onKeyDown,M=t.onKeyUp,z=t.placeholder,L=t.readOnly,I=t.renderSuffix,Z=t.rows,A=t.rowsMax,D=t.rowsMin,j=t.startAdornment,F=t.type,U=void 0===F?"text":F,$=t.value,B=(0,o.Z)(t,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","startAdornment","type","value"]),V=null!=k.value?k.value:$,W=e.useRef(null!=V).current,H=e.useRef(),q=e.useCallback((function(e){}),[]),Q=(0,E.Z)(k.ref,q),K=(0,E.Z)(x,Q),G=(0,E.Z)(H,K),Y=e.useState(!1),X=Y[0],J=Y[1],ee=e.useContext(be),te=function(e){var t=e.props,n=e.muiFormControl;return e.states.reduce((function(e,r){return e[r]=t[r],n&&void 0===t[r]&&(e[r]=n[r]),e}),{})}({props:t,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});te.focused=ee?ee.focused:X,e.useEffect((function(){!ee&&p&&X&&(J(!1),R&&R())}),[ee,p,X,R]);var ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=e.useCallback((function(e){!function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(Pe(e.value)&&""!==e.value||t&&Pe(e.defaultValue)&&""!==e.defaultValue)}(e)?re&&re():ne&&ne()}),[ne,re]);Re((function(){W&&oe({value:V})}),[V,oe,W]),e.useEffect((function(){oe(H.current)}),[]);var ae=b,ie=(0,r.Z)({},k,{ref:G});return"string"!=typeof ae?ie=(0,r.Z)({inputRef:G,type:U},ie,{ref:null}):C?!Z||A||D?(ie=(0,r.Z)({rows:Z,rowsMax:A},ie),ae=Ce):ae="textarea":ie=(0,r.Z)({type:U},ie),e.useEffect((function(){ee&&ee.setAdornedStart(Boolean(j))}),[ee,j]),e.createElement("div",(0,r.Z)({className:(0,i.Z)(c.root,c["color".concat((0,u.Z)(te.color||"primary"))],d,te.disabled&&c.disabled,te.error&&c.error,v&&c.fullWidth,te.focused&&c.focused,ee&&c.formControl,C&&c.multiline,j&&c.adornedStart,h&&c.adornedEnd,"dense"===te.margin&&c.marginDense),onClick:function(e){H.current&&e.currentTarget===e.target&&H.current.focus(),_&&_(e)},ref:n},B),j,e.createElement(we.Provider,{value:null},e.createElement(ae,(0,r.Z)({"aria-invalid":te.error,"aria-describedby":a,autoComplete:l,autoFocus:s,defaultValue:f,disabled:te.disabled,id:y,onAnimationStart:function(e){oe("mui-auto-fill-cancel"===e.animationName?H.current:{value:"x"})},name:P,placeholder:z,readOnly:L,required:te.required,rows:Z,value:V,onKeyDown:T,onKeyUp:M},ie,{className:(0,i.Z)(c.input,k.className,te.disabled&&c.disabled,C&&c.inputMultiline,te.hiddenLabel&&c.inputHiddenLabel,j&&c.inputAdornedStart,h&&c.inputAdornedEnd,"search"===U&&c.inputTypeSearch,"dense"===te.margin&&c.inputMarginDense),onBlur:function(e){R&&R(e),k.onBlur&&k.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):J(!1)},onChange:function(e){if(!W){var t=e.target||H.current;if(null==t)throw new Error((0,ge.Z)(1));oe({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];k.onChange&&k.onChange.apply(k,[e].concat(r)),N&&N.apply(void 0,[e].concat(r))},onFocus:function(e){te.disabled?e.stopPropagation():(O&&O(e),k.onFocus&&k.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):J(!0))}}))),h,I?I((0,r.Z)({},te,{startAdornment:j})):null)}));const _e=(0,l.Z)((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},o={opacity:"0 !important"},a={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:(0,r.Z)({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(Ne);var Oe=n(8995);const Te=v((e=>({grow:{flexGrow:1},search:{position:"relative",borderRadius:e.shape.borderRadius,backgroundColor:(0,pe.U1)(e.palette.common.white,.15),"&:hover":{backgroundColor:(0,pe.U1)(e.palette.common.white,.25)},[e.breakpoints.up("sm")]:{width:"auto"}},searchIcon:{padding:e.spacing(0,2),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit"},inputInput:{padding:e.spacing(1,1,1,0),paddingLeft:`calc(1em + ${e.spacing(4)}px)`,transition:e.transitions.create("width"),width:"100%",[e.breakpoints.up("md")]:{width:"20ch"}},sectionDesktop:{display:"none",[e.breakpoints.up("md")]:{display:"flex"}}})));function Me(){const t=Te(),n=(0,e.useContext)(ce),{state:r,dispatch:o}=n;return e.createElement("div",{className:t.grow},e.createElement(me,{position:"static"},e.createElement(c,null,e.createElement(ye,null,e.createElement("div",{className:t.search},e.createElement("div",{className:t.searchIcon},e.createElement(Oe.Z,null)),e.createElement(_e,{placeholder:"Search…",onChange:e=>{const t=e.target.value;o({type:ue,value:t}),o({type:oe,value:X(r.cities,"city",t).concat(X(r.cities,"admin_name",t)).filter(K)})},classes:{root:t.inputRoot,input:t.inputInput},inputProps:{"aria-label":"search"},value:r.keyword})),e.createElement("div",{className:t.grow}),e.createElement("div",{className:t.sectionDesktop}),e.createElement("div",{className:t.sectionMobile})))))}var ze=e.forwardRef((function(t,n){var a=t.disableSpacing,l=void 0!==a&&a,u=t.classes,s=t.className,c=(0,o.Z)(t,["disableSpacing","classes","className"]);return e.createElement("div",(0,r.Z)({className:(0,i.Z)(u.root,s,!l&&u.spacing),ref:n},c))}));const Le=(0,l.Z)({root:{display:"flex",alignItems:"center",padding:8},spacing:{"& > :not(:first-child)":{marginLeft:8}}},{name:"MuiCardActions"})(ze);var Ie=e.forwardRef((function(t,n){var a=t.children,l=t.classes,s=t.className,c=t.color,d=void 0===c?"default":c,f=t.component,p=void 0===f?"button":f,h=t.disabled,m=void 0!==h&&h,v=t.disableElevation,y=void 0!==v&&v,g=t.disableFocusRipple,b=void 0!==g&&g,w=t.endIcon,k=t.focusVisibleClassName,x=t.fullWidth,S=void 0!==x&&x,E=t.size,C=void 0===E?"medium":E,P=t.startIcon,R=t.type,N=void 0===R?"button":R,_=t.variant,O=void 0===_?"text":_,T=(0,o.Z)(t,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),M=P&&e.createElement("span",{className:(0,i.Z)(l.startIcon,l["iconSize".concat((0,u.Z)(C))])},P),z=w&&e.createElement("span",{className:(0,i.Z)(l.endIcon,l["iconSize".concat((0,u.Z)(C))])},w);return e.createElement(B,(0,r.Z)({className:(0,i.Z)(l.root,l[O],s,"inherit"===d?l.colorInherit:"default"!==d&&l["".concat(O).concat((0,u.Z)(d))],"medium"!==C&&[l["".concat(O,"Size").concat((0,u.Z)(C))],l["size".concat((0,u.Z)(C))]],y&&l.disableElevation,m&&l.disabled,S&&l.fullWidth),component:p,disabled:m,focusRipple:!b,focusVisibleClassName:(0,i.Z)(l.focusVisible,k),ref:n,type:N},T),e.createElement("span",{className:l.label},M,a,z))}));const Ze=(0,l.Z)((function(e){return{root:(0,r.Z)({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,pe.U1)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat((0,pe.U1)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:(0,pe.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat((0,pe.U1)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:(0,pe.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Ie);function Ae(){return e.useContext(we)}var De=e.forwardRef((function(t,n){t.checked;var a=t.classes,l=t.className,s=t.control,c=t.disabled,d=(t.inputRef,t.label),f=t.labelPlacement,p=void 0===f?"end":f,h=(t.name,t.onChange,t.value,(0,o.Z)(t,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),m=Ae(),v=c;void 0===v&&void 0!==s.props.disabled&&(v=s.props.disabled),void 0===v&&m&&(v=m.disabled);var y={disabled:v};return["checked","name","onChange","value","inputRef"].forEach((function(e){void 0===s.props[e]&&void 0!==t[e]&&(y[e]=t[e])})),e.createElement("label",(0,r.Z)({className:(0,i.Z)(a.root,l,"end"!==p&&a["labelPlacement".concat((0,u.Z)(p))],v&&a.disabled),ref:n},h),e.cloneElement(s,y),e.createElement(b,{component:"span",className:(0,i.Z)(a.label,v&&a.disabled)},d))}));const je=(0,l.Z)((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(De);var Fe=n(4699),Ue=n(2775),$e=e.forwardRef((function(t,n){var a=t.edge,l=void 0!==a&&a,s=t.children,c=t.classes,d=t.className,f=t.color,p=void 0===f?"default":f,h=t.disabled,m=void 0!==h&&h,v=t.disableFocusRipple,y=void 0!==v&&v,g=t.size,b=void 0===g?"medium":g,w=(0,o.Z)(t,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return e.createElement(B,(0,r.Z)({className:(0,i.Z)(c.root,d,"default"!==p&&c["color".concat((0,u.Z)(p))],m&&c.disabled,"small"===b&&c["size".concat((0,u.Z)(b))],{start:c.edgeStart,end:c.edgeEnd}[l]),centerRipple:!0,focusRipple:!y,disabled:m,ref:n},w),e.createElement("span",{className:c.label},s))}));const Be=(0,l.Z)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:(0,pe.U1)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})($e);var Ve=e.forwardRef((function(t,n){var a=t.autoFocus,l=t.checked,u=t.checkedIcon,s=t.classes,c=t.className,d=t.defaultChecked,f=t.disabled,p=t.icon,h=t.id,m=t.inputProps,v=t.inputRef,y=t.name,g=t.onBlur,b=t.onChange,w=t.onFocus,k=t.readOnly,x=t.required,S=t.tabIndex,E=t.type,C=t.value,P=(0,o.Z)(t,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),R=(0,Ue.Z)({controlled:l,default:Boolean(d),name:"SwitchBase",state:"checked"}),N=(0,Fe.Z)(R,2),_=N[0],O=N[1],T=Ae(),M=f;T&&void 0===M&&(M=T.disabled);var z="checkbox"===E||"radio"===E;return e.createElement(Be,(0,r.Z)({component:"span",className:(0,i.Z)(s.root,c,_&&s.checked,M&&s.disabled),disabled:M,tabIndex:null,role:void 0,onFocus:function(e){w&&w(e),T&&T.onFocus&&T.onFocus(e)},onBlur:function(e){g&&g(e),T&&T.onBlur&&T.onBlur(e)},ref:n},P),e.createElement("input",(0,r.Z)({autoFocus:a,checked:l,defaultChecked:d,className:s.input,disabled:M,id:z&&h,name:y,onChange:function(e){var t=e.target.checked;O(t),b&&b(e,t)},readOnly:k,ref:v,required:x,tabIndex:S,type:E,value:C},m)),_?u:p)}));const We=(0,l.Z)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(Ve);var He=e.forwardRef((function(t,n){var a=t.classes,l=t.className,s=t.color,c=void 0===s?"secondary":s,d=t.edge,f=void 0!==d&&d,p=t.size,h=void 0===p?"medium":p,m=(0,o.Z)(t,["classes","className","color","edge","size"]),v=e.createElement("span",{className:a.thumb});return e.createElement("span",{className:(0,i.Z)(a.root,l,{start:a.edgeStart,end:a.edgeEnd}[f],"small"===h&&a["size".concat((0,u.Z)(h))])},e.createElement(We,(0,r.Z)({type:"checkbox",icon:v,checkedIcon:v,classes:{root:(0,i.Z)(a.switchBase,a["color".concat((0,u.Z)(c))]),input:a.input,checked:a.checked,disabled:a.disabled},ref:n},m)),e.createElement("span",{className:a.track}))}));const qe=(0,l.Z)((function(e){return{root:{display:"inline-flex",width:58,height:38,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle","@media print":{colorAdjust:"exact"}},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:"light"===e.palette.type?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create(["left","transform"],{duration:e.transitions.duration.shortest}),"&$checked":{transform:"translateX(20px)"},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:"light"===e.palette.type?.12:.1}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.primary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,pe.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.secondary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},sizeSmall:{width:40,height:24,padding:7,"& $thumb":{width:16,height:16},"& $switchBase":{padding:4,"&$checked":{transform:"translateX(16px)"}}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:7,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white,opacity:"light"===e.palette.type?.38:.3}}}),{name:"MuiSwitch"})(He),Qe=v((e=>({root:{margin:e.spacing(1,0,1,0)},cardAction:{flexWrap:"wrap",[e.breakpoints.down("xs")]:{minHeight:"100px"}},arrow:{border:"solid #fff",borderWidth:"0 2px 2px 0",display:"inline-block",padding:e.spacing(.3),marginLeft:e.spacing(1)},arrowUp:{transform:"rotate(-135deg)"},arrowDown:{transform:"rotate(45deg)"},title:{fontSize:14},alert:{padding:"10px",backgroundColor:e.palette.secondary.main,color:"white",marginLeft:"15px"}})));function Ke(){const t=Qe(),n=(0,e.useContext)(ce),{state:r,dispatch:o}=n,[a,i]=(0,e.useState)(!0),[l,u]=(0,e.useState)(!0),[s,c]=(0,e.useState)(!1);(0,e.useEffect)((()=>{s?d():o({type:oe,value:X(r.cities,"city",r.keyword).concat(X(r.cities,"admin_name",r.keyword)).filter(K)})}),[s]);const d=()=>{o({type:te});try{const e=f(r.cities),t=f(r.resultSearch).filter((e=>Number(e.distance)<30)).sort(((e,t)=>Number(e.distance)>Number(t.distance)?1:-1));o({type:re,value:e}),o({type:oe,value:t})}catch(e){o({type:ne,value:e})}},f=e=>e.map((e=>({...e,distance:G(e?.lat,e?.lng,r.currentLocation)}))),p=(e,t,n)=>{let r;r="asc"===n?e.sort(((e,n)=>e[t]>n[t]?1:-1)):e.sort(((e,n)=>e[t]<n[t]?1:-1)),o({type:ae,value:0}),o({type:oe,value:r})},h=e=>{o({type:le,value:e}),c(!1)},m=e=>{o({type:ie,value:e})};return e.createElement(S,{className:t.root},e.createElement(Le,{className:t.cardAction},e.createElement(b,null,"Sort By:"),e.createElement(Ze,{size:"small",variant:"contained",color:"primary",onClick:()=>{p(r.resultSearch,"city",a?"asc":"desc"),i(!a),u(!0)}},"City Name"," ",e.createElement("i",{className:`${t.arrow} ${a?t.arrowUp:t.arrowDown}`})),e.createElement(Ze,{size:"small",variant:"contained",color:"primary",onClick:()=>{p(r.resultSearch,"populations",l?"asc":"desc"),u(!l),i(!0)}},"Population"," ",e.createElement("i",{className:`${t.arrow} ${l?t.arrowUp:t.arrowDown}`})),e.createElement(je,{control:e.createElement(qe,{onChange:()=>{var e,t;c(!s),e=m,t=h,navigator.geolocation.getCurrentPosition((t=>{var n;e({lat:(n=t).coords.latitude,lng:n.coords.longitude})}),(e=>function(e,t){switch(e.code){case e.PERMISSION_DENIED:t("User denied the request for Geolocation.");break;case e.POSITION_UNAVAILABLE:t("Location information is unavailable.");break;case e.TIMEOUT:t("The request to get user location timed out.");break;case e.UNKNOWN_ERROR:t("An unknown error occurred.")}}(e,t)))},checked:s}),labelPlacement:"start",label:"Find Near Cities"}),e.createElement(Ze,{size:"small",variant:"contained",onClick:()=>{i(!0),u(!0),c(!1),o({type:ae,value:0}),o({type:ue,value:""}),o({type:le,value:""}),o({type:oe,value:r.cities})}},"Clear Filters"),r.currentLocationError.length>0&&e.createElement("div",{className:t.alert},r.currentLocationError)))}var Ge=44,Ye=e.forwardRef((function(t,n){var a=t.classes,l=t.className,s=t.color,c=void 0===s?"primary":s,d=t.disableShrink,f=void 0!==d&&d,p=t.size,h=void 0===p?40:p,m=t.style,v=t.thickness,y=void 0===v?3.6:v,g=t.value,b=void 0===g?0:g,w=t.variant,k=void 0===w?"indeterminate":w,x=(0,o.Z)(t,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),S={},E={},C={};if("determinate"===k||"static"===k){var P=2*Math.PI*((Ge-y)/2);S.strokeDasharray=P.toFixed(3),C["aria-valuenow"]=Math.round(b),S.strokeDashoffset="".concat(((100-b)/100*P).toFixed(3),"px"),E.transform="rotate(-90deg)"}return e.createElement("div",(0,r.Z)({className:(0,i.Z)(a.root,l,"inherit"!==c&&a["color".concat((0,u.Z)(c))],{determinate:a.determinate,indeterminate:a.indeterminate,static:a.static}[k]),style:(0,r.Z)({width:h,height:h},E,m),ref:n,role:"progressbar"},C,x),e.createElement("svg",{className:a.svg,viewBox:"".concat(22," ").concat(22," ").concat(Ge," ").concat(Ge)},e.createElement("circle",{className:(0,i.Z)(a.circle,f&&a.circleDisableShrink,{determinate:a.circleDeterminate,indeterminate:a.circleIndeterminate,static:a.circleStatic}[k]),style:S,cx:Ge,cy:Ge,r:(Ge-y)/2,fill:"none",strokeWidth:y})))}));const Xe=(0,l.Z)((function(e){return{root:{display:"inline-block"},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"$circular-rotate 1.4s linear infinite"},determinate:{transition:e.transitions.create("transform")},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{display:"block"},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"$circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},circleDeterminate:{transition:e.transitions.create("stroke-dashoffset")},"@keyframes circular-rotate":{"0%":{transformOrigin:"50% 50%"},"100%":{transform:"rotate(360deg)"}},"@keyframes circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}}),{name:"MuiCircularProgress",flip:!1})(Ye),Je=v((e=>({filterBox:{flexGrow:1,backgroundColor:"red"},content:{display:"flex"},sideBar:{[e.breakpoints.down("xs")]:{width:"100%"}},result:{width:"100%",maxHeight:"295px",padding:e.spacing(2.4,1),[e.breakpoints.down("xs")]:{display:"none"}},paper:{width:"100%",height:"100%",padding:e.spacing(2)},loading:{display:"flex",alignItems:"center",justifyContent:"center",height:"40vh"}}))),et=()=>{const t=Je(),n=(0,e.useContext)(ce),{state:r,dispatch:o}=n;(0,e.useEffect)((()=>{a()}),[]);const a=async()=>{o({type:te});try{fetch("/test/db.json").then((e=>e.json())).then((e=>{const t=e?.nl;o({type:re,value:t}),o({type:oe,value:t})}))}catch(e){o({type:ne,value:e})}};return r.loading?e.createElement("div",{className:t.loading},e.createElement(Xe,null)):e.createElement(e.Fragment,null,e.createElement("div",{className:t.filterBox},e.createElement(Ke,null)),e.createElement("div",{className:t.content},e.createElement("div",{className:t.sideBar},e.createElement(ee,{data:r.resultSearch,currentCityIndex:r.currentCityIndex,onClick:e=>{o({type:ae,value:e})}})),e.createElement("div",{className:t.result},r.resultSearch?.length>0&&e.createElement(k,{component:"div",elevation:3,className:t.paper},e.createElement(b,{variant:"h5",component:"div"},r.resultSearch[r.currentCityIndex]?.city),e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},"Provence:",e.createElement(b,{variant:"h6",color:"textPrimary",component:"span"},r.resultSearch[r.currentCityIndex]?.admin_name)),e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},"capital:",e.createElement(b,{variant:"h6",color:"textPrimary",component:"span"},r.resultSearch[r.currentCityIndex]?.capital))," ",e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},"population:",e.createElement(b,{variant:"h6",color:"textPrimary",component:"span"},Y(r.resultSearch[r.currentCityIndex]?.population))),e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},"Lat:",e.createElement(b,{variant:"h6",color:"textPrimary",component:"span"},r.resultSearch[r.currentCityIndex]?.lat)),e.createElement(b,{variant:"body2",color:"textSecondary",component:"div"},"Lng:",e.createElement(b,{variant:"h6",color:"textPrimary",component:"span"},r.resultSearch[r.currentCityIndex]?.lng))))))},tt=()=>e.createElement(e.Fragment,null,e.createElement(p,null),e.createElement(Me,null),e.createElement(c,null,e.createElement(et,null)));t.render(e.createElement(fe,null,e.createElement(tt,null)),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3BpbmsuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS93aXRoU3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZGVwcmVjYXRlZFByb3BUeXBlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdW5zdGFibGVfdXNlSWQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21lcmdlQ2xhc3Nlcy9tZXJnZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGF6eWxvYWQvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGF6eWxvYWQvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGF6eWxvYWQvbGliL3V0aWxzL2V2ZW50LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtbGF6eWxvYWQvbGliL3V0aWxzL3Njcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWxhenlsb2FkL2xpYi91dGlscy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Rlc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Rlc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90ZXN0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Dc3NCYXNlbGluZS9Dc3NCYXNlbGluZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZC9DYXJkLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkQWN0aW9uQXJlYS9DYXJkQWN0aW9uQXJlYS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkQ29udGVudC9DYXJkQ29udGVudC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL3V0aWxzL2hlbHBlci5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2NvbXBvbmVudHMvTGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL3N0b3JlL2NvbnN0YW50LmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvc3RvcmUvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQXBwQmFyL0FwcEJhci5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RleHRhcmVhQXV0b3NpemUvVGV4dGFyZWFBdXRvc2l6ZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZEFjdGlvbnMvQ2FyZEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbExhYmVsL0Zvcm1Db250cm9sTGFiZWwuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovL3Rlc3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL1N3aXRjaEJhc2UuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3dpdGNoL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2NvbXBvbmVudHMvRmlsdGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DaXJjdWxhclByb2dyZXNzL0NpcmN1bGFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9wYWdlcy9ob21lL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsInNvdXJjZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VLZXlzIiwia2V5cyIsIl9zbGljZWRUb0FycmF5IiwiaXNBcnJheSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9zIiwiX2kiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJlcnIiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiZnJvbSIsIl90eXBlb2YiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZXNjIiwic2V0IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvciIsInR5cGUiLCJjaGFyQXQiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbmNhdCIsImNvbG9ycyIsIm1hdGNoIiwibWFwIiwiaW5kZXgiLCJwYXJzZUludCIsInJvdW5kIiwiam9pbiIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwiRXJyb3IiLCJ2YWx1ZXMiLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldENvbnRyYXN0UmF0aW8iLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImx1bUEiLCJnZXRMdW1pbmFuY2UiLCJsdW1CIiwicmdiIiwiaCIsInMiLCJsIiwiYSIsImYiLCJrIiwiaHNsVG9SZ2IiLCJ2YWwiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZmFkZSIsImRhcmtlbiIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwic3RlcCIsIm90aGVyIiwidXAiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwib25seSIsIndpZHRoIiwiY3JlYXRlTWl4aW5zIiwic3BhY2luZyIsIm1peGlucyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidG9vbGJhciIsIm1pbkhlaWdodCIsImJsYWNrIiwid2hpdGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJsaWdodCIsInRleHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJoaW50IiwiZGl2aWRlciIsInBhcGVyIiwiZGVmYXVsdCIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50IiwiZGlyZWN0aW9uIiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJtYWluIiwiY3JlYXRlUGFsZXR0ZSIsInBhbGV0dGUiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJlcnJvciIsIl9wYWxldHRlJHdhcm5pbmciLCJ3YXJuaW5nIiwiX3BhbGV0dGUkaW5mbyIsImluZm8iLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250cmFzdFRleHQiLCJ0eXBlcyIsImRlZXBtZXJnZSIsImNvbW1vbiIsImdyZXkiLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5IiwiX3JlZiIsIl9yZWYkZm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkZm9udFdlaWdodEJvbGQiLCJmb250V2VpZ2h0Qm9sZCIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsInB4VG9SZW0iLCJjb2VmIiwic2l6ZSIsImJ1aWxkVmFyaWFudCIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImJ1dHRvbiIsImNhcHRpb24iLCJvdmVybGluZSIsImNsb25lIiwiY3JlYXRlU2hhZG93IiwiYm9yZGVyUmFkaXVzIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwiYWNjIiwiaXRlbSIsImZuIiwicHJvcGVydGllcyIsIm0iLCJkaXJlY3Rpb25zIiwidCIsInIiLCJiIiwieCIsInkiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsInByb3AiLCJfcHJvcCRzcGxpdCIsIl9wcm9wJHNwbGl0MiIsInByb3BlcnR5IiwiZGlyIiwiYXJnIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0aGVtZSIsInRoZW1lU3BhY2luZyIsImFicyIsInByb3BzIiwidHJhbnNmb3JtZXIiLCJzdHlsZUZyb21Qcm9wVmFsdWUiLCJjc3NQcm9wZXJ0aWVzIiwicHJvcFZhbHVlIiwicmVkdWNlIiwiY3NzUHJvcGVydHkiLCJ0cmFuc2Zvcm1lZCIsImdldFZhbHVlIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsIl90aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImhhbmRsZUJyZWFrcG9pbnRzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsInRyYW5zZm9ybSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFyZ3VtZW50Iiwib3V0cHV0IiwicHJvcFR5cGVzIiwiZmlsdGVyUHJvcHMiLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJkdXJhdGlvbiIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJvcHRpb25zIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJoZWlnaHQiLCJjb25zdGFudCIsIm1vYmlsZVN0ZXBwZXIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIl9vcHRpb25zJGJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsIl9vcHRpb25zJG1peGlucyIsIm1peGluc0lucHV0IiwiX29wdGlvbnMkcGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsIl9vcHRpb25zJHR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJtdWlUaGVtZSIsIm92ZXJyaWRlcyIsInNoYWRvd3MiLCJzaGFwZSIsInRyYW5zaXRpb25zIiwiekluZGV4IiwiZ2V0VGhlbWVQcm9wcyIsInBhcmFtcyIsInByb3BOYW1lIiwiZGVmYXVsdFByb3BzIiwic3R5bGVzT3JDcmVhdG9yIiwiQ29tcG9uZW50IiwiZGVmYXVsdFRoZW1lIiwiX29wdGlvbnMkd2l0aFRoZW1lIiwid2l0aFRoZW1lIiwic3R5bGVzT3B0aW9ucyIsImNsYXNzTmFtZVByZWZpeCIsInVzZVN0eWxlcyIsIm1ha2VTdHlsZXMiLCJkaXNwbGF5TmFtZSIsIldpdGhTdHlsZXMiLCJyZWYiLCJjbGFzc2VzIiwiaW5uZXJSZWYiLCJtb3JlIiwidXNlVGhlbWUiLCJjYXBpdGFsaXplIiwic3RyaW5nIiwidG9VcHBlckNhc2UiLCJkZWJvdW5jZSIsImZ1bmMiLCJ0aW1lb3V0Iiwid2FpdCIsImRlYm91bmNlZCIsInRoYXQiLCJsYXRlciIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhciIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwiX2xlbjIiLCJfa2V5MiIsIlN2Z0ljb24iLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsIl9wcm9wcyRjb2xvciIsIl9wcm9wcyRjb21wb25lbnQiLCJjb21wb25lbnQiLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsInJvb3QiLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsIndpdGhTdHlsZXMiLCJ1c2VyU2VsZWN0IiwiZGlzcGxheSIsImZpbGwiLCJmbGV4U2hyaW5rIiwidHJhbnNpdGlvbiIsImNvbG9yUHJpbWFyeSIsImNvbG9yU2Vjb25kYXJ5IiwiY29sb3JBY3Rpb24iLCJjb2xvckVycm9yIiwiY29sb3JEaXNhYmxlZCIsImZvbnRTaXplSW5oZXJpdCIsImZvbnRTaXplU21hbGwiLCJmb250U2l6ZUxhcmdlIiwiY3JlYXRlU3ZnSWNvbiIsInBhdGgiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJ2YWxpZGF0b3IiLCJyZWFzb24iLCJpc011aUVsZW1lbnQiLCJlbGVtZW50IiwibXVpTmFtZXMiLCJvd25lckRvY3VtZW50Iiwibm9kZSIsImRvY3VtZW50Iiwib3duZXJXaW5kb3ciLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsInJlcXVpcmVQcm9wRmFjdG9yeSIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwidW5zdXBwb3J0ZWRQcm9wIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwidXNlSWQiLCJpZE92ZXJyaWRlIiwiX1JlYWN0JHVzZVN0YXRlIiwiZGVmYXVsdElkIiwic2V0RGVmYXVsdElkIiwiaWQiLCJyYW5kb20iLCJzZXRSZWYiLCJjdXJyZW50IiwidXNlQ29udHJvbGxlZCIsImNvbnRyb2xsZWQiLCJkZWZhdWx0UHJvcCIsImlzQ29udHJvbGxlZCIsInN0YXRlIiwidmFsdWVTdGF0ZSIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsInVzZUV2ZW50Q2FsbGJhY2siLCJ1c2VGb3JrUmVmIiwicmVmQSIsInJlZkIiLCJyZWZWYWx1ZSIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJzZWFyY2giLCJ1cmwiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImhhbmRsZUtleURvd24iLCJldmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiaXNGb2N1c1Zpc2libGUiLCJ0YWdOYW1lIiwibWF0Y2hlcyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwib25CbHVyVmlzaWJsZSIsImluc3RhbmNlIiwiZG9jIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiZCIsIl91dGlscyIsIm5vZGVUeXBlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwbGFpbk9iamVjdENvbnN0cnVyY3RvciIsImNsb25lU3R5bGUiLCJzdHlsZSIsIm5ld1N0eWxlIiwiY3JlYXRlUnVsZSIsImRlY2wiLCJqc3MiLCJkZWNsQ29weSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInJlc3VsdCIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsInN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJmYWxsYmFjayIsIl9wcm9wIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsIkNTUyIsImVzY2FwZSIsInJlcGxhY2UiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJwcm9jZXNzIiwib25DaGFuZ2VWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiYXR0YWNoZWQiLCJTdHlsZVJ1bGUiLCJfQmFzZVN0eWxlUnVsZSIsIl90aGlzIiwic2VsZWN0b3JUZXh0Iiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsIm9wdHMiLCJsaW5rIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsImF0IiwicXVlcnkiLCJydWxlcyIsImF0TWF0Y2giLCJSdWxlTGlzdCIsImFkZCIsIl9wcm90byIsImdldFJ1bGUiLCJydWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlcGxhY2VSZWYiLCJyZWZLZXlmcmFtZSIsIm9uUHJvY2Vzc1N0eWxlIiwiS2V5ZnJhbWVSdWxlIiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwia2V5UmVnRXhwJDIiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwicmF3IiwiY291bnRlciIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwic3BsaWNlIiwidW5yZWdpc3RlciIsImZvckVhY2giLCJ1cGRhdGUiLCJkYXRhIiwidXBkYXRlT25lIiwiX3RoaXMkb3B0aW9uczIiLCJzdHlsZVJ1bGUiLCJvblVwZGF0ZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiY3NzIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwicXVldWUiLCJhdHRhY2giLCJkZXBsb3kiLCJkZXRhY2giLCJpbnNlcnRSdWxlIiwiYWRkUnVsZXMiLCJhZGRlZCIsImRlbGV0ZVJ1bGUiLCJfdGhpcyRydWxlcyIsIlBsdWdpbnNSZWdpc3RyeSIsImludGVybmFsIiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJ1c2UiLCJuZXdQbHVnaW4iLCJwbHVnaW4iLCJTaGVldHNSZWdpc3RyeSIsInJlc2V0IiwiX3RlbXAiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJucyIsIm1vZHVsZUlkIiwiY3JlYXRlR2VuZXJhdGVJZCIsInJ1bGVDb3VudGVyIiwianNzSWQiLCJwcmVmaXgiLCJTdHJpbmciLCJtaW5pZnkiLCJtZW1vaXplIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1J1bGUiLCJhdHRyaWJ1dGVTdHlsZU1hcCIsImRlbGV0ZSIsImdldEhlYWQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Tm9uY2UiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0UnVsZSIsImNvbnRhaW5lciIsImFwcGVuZFJ1bGUiLCJjc3NSdWxlcyIsImdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4IiwibWF4SW5kZXgiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJtZWRpYSIsIm1ldGEiLCJlbCIsInRleHRDb250ZW50IiwiY3JlYXRlU3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJub25jZSIsInBhcmVudE5vZGUiLCJpbnNlcnRpb25Qb2ludCIsIm5leHROb2RlIiwicmVnaXN0cnkkMSIsImZpbmRIaWdoZXJTaGVldCIsImZpbmRIaWdoZXN0U2hlZXQiLCJuZXh0U2libGluZyIsImNvbW1lbnQiLCJoZWFkIiwiY2hpbGROb2RlcyIsIm5vZGVWYWx1ZSIsInRyaW0iLCJmaW5kQ29tbWVudE5vZGUiLCJmaW5kUHJldk5vZGUiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImluc2VydFN0eWxlIiwiQm9vbGVhbiIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0UnVsZXMiLCJuYXRpdmVQYXJlbnQiLCJsYXRlc3ROYXRpdmVQYXJlbnQiLCJfaW5zZXJ0aW9uSW5kZXgiLCJyZWZDc3NSdWxlIiwicnVsZVN0ciIsImluc2VydGlvbkluZGV4IiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwidmVyc2lvbiIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsInJlbW92ZVN0eWxlU2hlZXQiLCJnZXREeW5hbWljU3R5bGVzIiwidG8iLCJleHRyYWN0ZWQiLCJoYXNDU1NUT01TdXBwb3J0IiwibWVyZ2VDbGFzc2VzIiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwibmV4dENsYXNzZXMiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwiTWFwIiwiZm9yIiwicHNldWRvQ2xhc3NlcyIsIm5vdyIsIkRhdGUiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJhdFByZWZpeCIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInNjb3BlIiwicGFydHMiLCJwYXJlbnRSZWdFeHAiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwidG9IeXBoZW5Mb3dlciIsInRvTG93ZXJDYXNlIiwiaE5hbWUiLCJjb252ZXJ0Q2FzZSIsImNvbnZlcnRlZCIsInB4IiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJ1bml0cyIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJib3R0b20iLCJsZWZ0IiwidG9wIiwicmlnaHQiLCJpbnNldCIsIm1vdGlvbiIsIm91dGxpbmUiLCJwZXJzcGVjdGl2ZSIsImdhcCIsImdyaWQiLCJpdGVyYXRlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsImlzTmFOIiwianMiLCJ2ZW5kb3IiLCJicm93c2VyIiwiaXNUb3VjaCIsImRvY3VtZW50RWxlbWVudCIsImpzQ3NzTWFwIiwiTW96IiwiTyIsIldlYmtpdCIsImFwcGVhcmVuY2UiLCJub1ByZWZpbGwiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsImNvbG9yQWRqdXN0IiwidG9VcHBlciIsImMiLCJjYW1lbGl6ZSIsInBhc2NhbGl6ZSIsIm1hc2siLCJsb25naGFuZCIsInRleHRPcmllbnRhdGlvbiIsIndyaXRpbmdNb2RlIiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwib3JkZXIiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsImZsZXgiLCJwcm9wS2V5cyIsInByZWZpeENzcyIsIm11bHRpcGxlIiwicHJvcGVydHlEZXRlY3RvcnMiLCJmaWx0ZXIiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJrZXkkMSIsImVsJDEiLCJjYWNoZSQxIiwidHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0cmFuc1Byb3BzUmVnRXhwIiwicHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrIiwicDEiLCJwMiIsInN1cHBvcnRlZFZhbHVlIiwicHJlZml4ZWRWYWx1ZSIsImNhY2hlS2V5Iiwic29ydCIsImZuVmFsdWVzIiwiZm5SdWxlIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsImdldFJlcGxhY2VSZWYiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwiaiIsIm5lc3RlZCIsImdldE9wdGlvbnMiLCJwcmV2T3B0aW9ucyIsIm5lc3RpbmdMZXZlbCIsImlzTmVzdGVkIiwiaXNOZXN0ZWRDb25kaXRpb25hbCIsImh5cGhlbmF0ZWRQcm9wIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJwcmVmaXhTdHlsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQxIiwiYXRSdWxlIiwic3VwcG9ydGVkS2V5ZnJhbWVzIiwicHJvcDAiLCJwcm9wMSIsImRlZmF1bHRPcHRpb25zIiwiZGlzYWJsZUdlbmVyYXRpb24iLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIl9vcHRpb25zJGRpc2FibGVHbG9iYSIsImRpc2FibGVHbG9iYWwiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzZWVkUHJlZml4IiwiZ2V0TmV4dENvdW50ZXJJZCIsInN0eWxlU2hlZXQiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsImluY3JlbWVudCIsImdldFN0eWxlc0NyZWF0b3IiLCJ0aGVtaW5nRW5hYmxlZCIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJnZXRDbGFzc2VzIiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJfcmVmMiIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJyZWZzIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZHluYW1pY1NoZWV0IiwiX3JlZjMiLCJfcmVmNCIsInVzZVN5bmNocm9ub3VzRWZmZWN0IiwiY3VycmVudEtleSIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwic2hvdWxkVXBkYXRlIiwiaXNQbGFpbk9iamVjdCIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b1ZhbCIsIm1peCIsInRtcCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZSIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsIm9iamVjdCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIkQiLCJvYSIsInBhIiwicWEiLCJtYSIsIm5hIiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUWEiLCJ0YWciLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZWIiLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwic2libGluZyIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIkYiLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJjbHozMiIsImJkIiwiY2QiLCJsb2ciLCJMTjIiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJiaW5kIiwidWMiLCJqZCIsImtkIiwibGQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsInJhbmdlIiwibWUiLCJuZSIsIm9lIiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJvZmZzZXQiLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwibGlzdGVuZXIiLCJHIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJ3IiwieiIsInUiLCJxIiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQSIsIkMiLCJEZyIsIkVnIiwiRmciLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJtZXNzYWdlIiwiTmkiLCJjb25zb2xlIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJ0aGVuIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9wcm9wVHlwZXMyIiwiX2V2ZW50IiwiX3Njcm9sbFBhcmVudDIiLCJfZGVib3VuY2UyIiwiX3Rocm90dGxlMiIsIkxJU1RFTl9GTEFHIiwicGFzc2l2ZUV2ZW50U3VwcG9ydGVkIiwicGFzc2l2ZUV2ZW50IiwiY2hlY2tWaXNpYmxlIiwiSFRNTEVsZW1lbnQiLCJvdmVyZmxvdyIsInBhcmVudFRvcCIsInBhcmVudExlZnQiLCJwYXJlbnRIZWlnaHQiLCJwYXJlbnRXaWR0aCIsIl9wYXJlbnQkZ2V0Qm91bmRpbmdDbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpbmRvd0lubmVySGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ3aW5kb3dJbm5lcldpZHRoIiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwiaW50ZXJzZWN0aW9uVG9wIiwiaW50ZXJzZWN0aW9uTGVmdCIsImludGVyc2VjdGlvbkhlaWdodCIsImludGVyc2VjdGlvbldpZHRoIiwiX25vZGUkZ2V0Qm91bmRpbmdDbGllIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIm9mZnNldHMiLCJjaGVja092ZXJmbG93VmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q2xpZW50UmVjdHMiLCJlbGVtZW50SGVpZ2h0IiwiX25vZGUkZ2V0Qm91bmRpbmdDbGllMiIsImNoZWNrTm9ybWFsVmlzaWJsZSIsInZpc2libGUiLCJvbmNlIiwiZm9yY2VVcGRhdGUiLCJ1bm1vdW50SWZJbnZpc2libGUiLCJsYXp5TG9hZEhhbmRsZXIiLCJkZWxheVR5cGUiLCJmaW5hbExhenlMb2FkSGFuZGxlciIsIkxhenlMb2FkIiwiX0NvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2luaGVyaXRzIiwic2Nyb2xscG9ydCIsInNjcm9sbENvbnRhaW5lciIsIm5lZWRSZXNldEZpbmFsTGF6eUxvYWRIYW5kbGVyIiwib2ZmIiwidGhyb3R0bGUiLCJsaXN0ZW5lckNvdW50IiwiX3Byb3BzIiwic2Nyb2xsIiwicmVzaXplIiwib24iLCJfcHJvcHMyIiwicGxhY2Vob2xkZXIiLCJpbW1lZGlhdGUiLCJ0aW1lc3RhbXAiLCJjYWxsTm93IiwiZXZlbnROYW1lIiwiZXhjbHVkZVN0YXRpY1BhcmVudCIsInBvc2l0aW9uIiwib3ZlcmZsb3dSZWdleCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInRocmVzaGhvbGQiLCJkZWZlclRpbWVyIiwic2V0U3RhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjb3VudCIsInRvQXJyYXkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwidG9TdHJpbmdUYWciLCJDb250YWluZXIiLCJfcHJvcHMkZGlzYWJsZUd1dHRlcnMiLCJkaXNhYmxlR3V0dGVycyIsIl9wcm9wcyRmaXhlZCIsImZpeGVkIiwiX3Byb3BzJG1heFdpZHRoIiwibWF4V2lkdGgiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nIiwibWFyZ2luUmlnaHQiLCJtYXhXaWR0aFhzIiwibWF4V2lkdGhTbSIsIm1heFdpZHRoTWQiLCJtYXhXaWR0aExnIiwibWF4V2lkdGhYbCIsImh0bWwiLCJXZWJraXRGb250U21vb3RoaW5nIiwiTW96T3N4Rm9udFNtb290aGluZyIsImJhY2tncm91bmRDb2xvciIsIl9wcm9wcyRjaGlsZHJlbiIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsIlR5cG9ncmFwaHkiLCJfcHJvcHMkYWxpZ24iLCJhbGlnbiIsIl9wcm9wcyRkaXNwbGF5IiwiX3Byb3BzJGd1dHRlckJvdHRvbSIsImd1dHRlckJvdHRvbSIsIl9wcm9wcyRub1dyYXAiLCJub1dyYXAiLCJfcHJvcHMkcGFyYWdyYXBoIiwicGFyYWdyYXBoIiwiX3Byb3BzJHZhcmlhbnQiLCJ2YXJpYW50IiwiX3Byb3BzJHZhcmlhbnRNYXBwaW5nIiwidmFyaWFudE1hcHBpbmciLCJzck9ubHkiLCJhbGlnbkxlZnQiLCJ0ZXh0QWxpZ24iLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwibWFyZ2luQm90dG9tIiwiY29sb3JJbmhlcml0IiwiY29sb3JUZXh0UHJpbWFyeSIsImNvbG9yVGV4dFNlY29uZGFyeSIsImRpc3BsYXlJbmxpbmUiLCJkaXNwbGF5QmxvY2siLCJQYXBlciIsIl9wcm9wcyRzcXVhcmUiLCJzcXVhcmUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwib3V0bGluZWQiLCJyb3VuZGVkIiwiZWxldmF0aW9ucyIsInNoYWRvdyIsImJveFNoYWRvdyIsIkNhcmQiLCJfcHJvcHMkcmFpc2VkIiwicmFpc2VkIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsIm5leHRQcm9wcyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImluIiwiZXhpdCIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiX1JlYWN0JENvbXBvbmVudCIsImhhbmRsZUV4aXRlZCIsImNvbnRleHRWYWx1ZSIsImlzTW91bnRpbmciLCJmaXJzdFJlbmRlciIsIm1vdW50ZWQiLCJhcHBlYXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiX3RoaXMkcHJvcHMiLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiX3Byb3BzJHB1bHNhdGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwiX3Byb3BzJG9uRXhpdGVkIiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiVG91Y2hSaXBwbGUiLCJfcHJvcHMkY2VudGVyIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiX29wdGlvbnMkcHVsc2F0ZSIsIl9vcHRpb25zJGNlbnRlciIsIl9vcHRpb25zJGZha2VFbGVtZW50IiwiZmFrZUVsZW1lbnQiLCJyZWN0Iiwic3FydCIsInNpemVYIiwic2l6ZVkiLCJzdG9wIiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdMZWF2ZSIsIl9wcm9wcyR0YWJJbmRleCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsIl9wcm9wcyR0eXBlIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiQ2FyZEFjdGlvbkFyZWEiLCJmb2N1c0hpZ2hsaWdodCIsIkNhcmRDb250ZW50IiwicGFkZGluZ0JvdHRvbSIsIm9ubHlVbmlxdWVBcnJheSIsImNhbGNEaXN0YW5jZUJ5TGF0TG5nIiwibGF0IiwibG5nIiwiY3VycmVudExvY2F0aW9uIiwiz4YxIiwiUEkiLCLPhjIiLCLOlM+GIiwizpTOuyIsInNpbiIsImNvcyIsImF0YW4yIiwic2hvd0VtcHR5U3RyaW5nIiwic2VhcmNoQXJyYXlXaXRoS2V5QW5kS2V5d29yZCIsImtleXdvcmQiLCJjYXJkIiwiTGlzdCIsImN1cnJlbnRDaXR5SW5kZXgiLCJjaXR5IiwiYWRtaW5fbmFtZSIsInBvcHVsYXRpb24iLCJwb3B1bGF0aW9uX3Byb3BlciIsIkdFVF9DSVRJRVMiLCJHRVRfQ0lUSUVTX0ZBSUwiLCJHRVRfQ0lUSUVTX1NVQ0NFU1MiLCJDSEFOR0VfUkVTVUxUIiwiQ1VSUkVOVF9DSVRZX0lOREVYIiwiR0VUX0NVUlJFTlRfTE9DQVRJT04iLCJHRVRfQ1VSUkVOVF9MT0NBVElPTl9GQUlMIiwiQ0hBTkdFX0tFWVdPUkRfU0VBUkNIIiwiaW5pdGlhbFN0YXRlIiwiY2l0aWVzIiwibG9hZGluZyIsInJlc3VsdFNlYXJjaCIsImN1cnJlbnRMb2NhdGlvbkVycm9yIiwic3RvcmUiLCJTdGF0ZVByb3ZpZGVyIiwiQXBwQmFyIiwiX3Byb3BzJHBvc2l0aW9uIiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsImZsZXhEaXJlY3Rpb24iLCJwb3NpdGlvbkZpeGVkIiwicG9zaXRpb25BYnNvbHV0ZSIsInBvc2l0aW9uU3RpY2t5IiwicG9zaXRpb25TdGF0aWMiLCJwb3NpdGlvblJlbGF0aXZlIiwiY29sb3JEZWZhdWx0IiwiY29sb3JUcmFuc3BhcmVudCIsIlRvb2xiYXIiLCJyZWd1bGFyIiwiZGVuc2UiLCJGb3JtQ29udHJvbENvbnRleHQiLCJnZXRTdHlsZVZhbHVlIiwiY29tcHV0ZWRTdHlsZSIsInZpc2liaWxpdHkiLCJvbkNoYW5nZSIsInJvd3MiLCJyb3dzTWF4IiwiX3Byb3BzJHJvd3NNaW4iLCJyb3dzTWluIiwicm93c01pblByb3AiLCJpbnB1dFJlZiIsInNoYWRvd1JlZiIsInJlbmRlcnMiLCJzeW5jSGVpZ2h0IiwiaW5wdXRTaGFsbG93Iiwic2Nyb2xsSGVpZ2h0Iiwic2luZ2xlUm93SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJvdXRlckhlaWdodFN0eWxlIiwicHJldlN0YXRlIiwiaGFuZGxlUmVzaXplIiwiaGFzVmFsdWUiLCJJbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJlbmRBZG9ybm1lbnQiLCJfcHJvcHMkZnVsbFdpZHRoIiwiZnVsbFdpZHRoIiwiX3Byb3BzJGlucHV0Q29tcG9uZW50IiwiaW5wdXRDb21wb25lbnQiLCJfcHJvcHMkaW5wdXRQcm9wcyIsImlucHV0UHJvcHMiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsIl9wcm9wcyRtdWx0aWxpbmUiLCJtdWx0aWxpbmUiLCJyZW5kZXJTdWZmaXgiLCJzdGFydEFkb3JubWVudCIsInZhbHVlUHJvcCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsIm11aUZvcm1Db250cm9sIiwiZmNzIiwic3RhdGVzIiwiZm9ybUNvbnRyb2xTdGF0ZSIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJTU1IiLCJpc0ZpbGxlZCIsIklucHV0Q29tcG9uZW50Iiwic2V0QWRvcm5lZFN0YXJ0IiwiZm9ybUNvbnRyb2wiLCJhZG9ybmVkU3RhcnQiLCJhZG9ybmVkRW5kIiwibWFyZ2luRGVuc2UiLCJvbkFuaW1hdGlvblN0YXJ0IiwicmVxdWlyZWQiLCJpbnB1dE11bHRpbGluZSIsImhpZGRlbkxhYmVsIiwiaW5wdXRIaWRkZW5MYWJlbCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRUeXBlU2VhcmNoIiwiaW5wdXRNYXJnaW5EZW5zZSIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwicGFkZGluZ1RvcCIsImZvbnQiLCJtaW5XaWR0aCIsImdyb3ciLCJzZWFyY2hJY29uIiwiaW5wdXRSb290IiwiaW5wdXRJbnB1dCIsInNlY3Rpb25EZXNrdG9wIiwiSGVhZGVyIiwiZ2xvYmFsU3RhdGUiLCJTZWFyY2giLCJzZWN0aW9uTW9iaWxlIiwiQ2FyZEFjdGlvbnMiLCJfcHJvcHMkZGlzYWJsZVNwYWNpbmciLCJkaXNhYmxlU3BhY2luZyIsIkJ1dHRvbiIsIl9wcm9wcyRkaXNhYmxlRWxldmF0aSIsImRpc2FibGVFbGV2YXRpb24iLCJfcHJvcHMkZGlzYWJsZUZvY3VzUmkiLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJlbmRJY29uUHJvcCIsImVuZEljb24iLCJfcHJvcHMkc2l6ZSIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJsYWJlbCIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwiY29udGFpbmVkIiwiY29udGFpbmVkUHJpbWFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsImJvcmRlckNvbG9yIiwidGV4dFNpemVTbWFsbCIsInRleHRTaXplTGFyZ2UiLCJvdXRsaW5lZFNpemVTbWFsbCIsIm91dGxpbmVkU2l6ZUxhcmdlIiwiY29udGFpbmVkU2l6ZVNtYWxsIiwiY29udGFpbmVkU2l6ZUxhcmdlIiwic2l6ZVNtYWxsIiwic2l6ZUxhcmdlIiwiaWNvblNpemVTbWFsbCIsImljb25TaXplTWVkaXVtIiwiaWNvblNpemVMYXJnZSIsIkZvcm1Db250cm9sTGFiZWwiLCJjb250cm9sIiwiZGlzYWJsZWRQcm9wIiwiX3Byb3BzJGxhYmVsUGxhY2VtZW50IiwibGFiZWxQbGFjZW1lbnQiLCJjb250cm9sUHJvcHMiLCJsYWJlbFBsYWNlbWVudFN0YXJ0IiwibGFiZWxQbGFjZW1lbnRUb3AiLCJsYWJlbFBsYWNlbWVudEJvdHRvbSIsIkljb25CdXR0b24iLCJfcHJvcHMkZWRnZSIsImVkZ2UiLCJlZGdlU3RhcnQiLCJlZGdlRW5kIiwiU3dpdGNoQmFzZSIsImNoZWNrZWRQcm9wIiwiY2hlY2tlZEljb24iLCJfdXNlQ29udHJvbGxlZCIsIl91c2VDb250cm9sbGVkMiIsInNldENoZWNrZWRTdGF0ZSIsImhhc0xhYmVsRm9yIiwibmV3Q2hlY2tlZCIsIlN3aXRjaCIsInRodW1iIiwic3dpdGNoQmFzZSIsImNhcmRBY3Rpb24iLCJmbGV4V3JhcCIsImFycm93IiwiYm9yZGVyV2lkdGgiLCJhcnJvd1VwIiwiYXJyb3dEb3duIiwidGl0bGUiLCJhbGVydCIsIkZpbHRlcnMiLCJ0eXBlU29ydENpdHkiLCJzZXRUeXBlU29ydENpdHkiLCJ0eXBlU29ydFBvcHVsYXRpb24iLCJzZXRUeXBlU29ydFBvcHVsYXRpb24iLCJmaW5kTmVhckNpdGllcyIsInNldEZpbmROZWFyQ2l0aWVzIiwiZ2V0RmluZE5lYXJDaXRpZXMiLCJhZGREaXN0YW5jZVRvUmVzdWx0IiwiZGlzdGFuY2UiLCJoYW5kbGVTb3J0IiwibGlzdCIsImZpZWxkIiwibmV3TGlzdCIsImhhbmRsZUVycm9yR2V0TG9jYXRpb24iLCJoYW5kbGVTdWNjZXNzR2V0TG9jYXRpb24iLCJzdWNjZXNzQ2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIlBFUk1JU1NJT05fREVOSUVEIiwiUE9TSVRJT05fVU5BVkFJTEFCTEUiLCJUSU1FT1VUIiwiVU5LTk9XTl9FUlJPUiIsImVycm9yR2V0TG9jYXRpb24iLCJTSVpFIiwiQ2lyY3VsYXJQcm9ncmVzcyIsIl9wcm9wcyRkaXNhYmxlU2hyaW5rIiwiZGlzYWJsZVNocmluayIsIl9wcm9wcyR0aGlja25lc3MiLCJ0aGlja25lc3MiLCJfcHJvcHMkdmFsdWUiLCJjaXJjbGVTdHlsZSIsInJvb3RTdHlsZSIsInJvb3RQcm9wcyIsImNpcmN1bWZlcmVuY2UiLCJkZXRlcm1pbmF0ZSIsImluZGV0ZXJtaW5hdGUiLCJzdGF0aWMiLCJzdmciLCJjaXJjbGUiLCJjaXJjbGVEaXNhYmxlU2hyaW5rIiwiY2lyY2xlRGV0ZXJtaW5hdGUiLCJjaXJjbGVJbmRldGVybWluYXRlIiwiY2lyY2xlU3RhdGljIiwiY3giLCJjeSIsInN0cm9rZSIsInRyYW5zZm9ybU9yaWdpbiIsImZpbHRlckJveCIsImNvbnRlbnQiLCJzaWRlQmFyIiwibWF4SGVpZ2h0IiwiZmV0Y2hDaXR5IiwiYXN5bmMiLCJmZXRjaCIsInJlcyIsIm5sIiwiY2FwaXRhbCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiI7d0NBQWUsU0FBU0EsRUFBa0JDLEVBQUtDLElBQ2xDLE1BQVBBLEdBQWVBLEVBQU1ELEVBQUlFLFVBQVFELEVBQU1ELEVBQUlFLFFBRS9DLElBQUssSUFBSUMsRUFBSSxFQUFHQyxFQUFPLElBQUlDLE1BQU1KLEdBQU1FLEVBQUlGLEVBQUtFLElBQzlDQyxFQUFLRCxHQUFLSCxFQUFJRyxHQUdoQixPQUFPQyxFLDhDQ1BNLFNBQVNFLEVBQXVCQyxHQUM3QyxRQUFhLElBQVRBLEVBQ0YsTUFBTSxJQUFJQyxlQUFlLDZEQUczQixPQUFPRCxFLDhDQ0xNLFNBQVNFLEVBQWdCQyxFQUFLQyxFQUFLQyxHQVloRCxPQVhJRCxLQUFPRCxFQUNURyxPQUFPQyxlQUFlSixFQUFLQyxFQUFLLENBQzlCQyxNQUFPQSxFQUNQRyxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsVUFBVSxJQUdaUCxFQUFJQyxHQUFPQyxFQUdORixFLDhDQ1pNLFNBQVNRLElBZXRCLE9BZEFBLEVBQVdMLE9BQU9NLFFBQVUsU0FBVUMsR0FDcEMsSUFBSyxJQUFJakIsRUFBSSxFQUFHQSxFQUFJa0IsVUFBVW5CLE9BQVFDLElBQUssQ0FDekMsSUFBSW1CLEVBQVNELFVBQVVsQixHQUV2QixJQUFLLElBQUlRLEtBQU9XLEVBQ1ZULE9BQU9VLFVBQVVDLGVBQWVDLEtBQUtILEVBQVFYLEtBQy9DUyxFQUFPVCxHQUFPVyxFQUFPWCxJQUszQixPQUFPUyxJQUdPTSxNQUFNQyxLQUFNTixXLDhDQ2ZmLFNBQVNPLEVBQWdCQyxFQUFHQyxHQU16QyxPQUxBRixFQUFrQmYsT0FBT2tCLGdCQUFrQixTQUF5QkYsRUFBR0MsR0FFckUsT0FEQUQsRUFBRUcsVUFBWUYsRUFDUEQsSUFHY0EsRUFBR0MsR0NMYixTQUFTRyxFQUFlQyxFQUFVQyxHQUMvQ0QsRUFBU1gsVUFBWVYsT0FBT3VCLE9BQU9ELEVBQVdaLFdBQzlDVyxFQUFTWCxVQUFVYyxZQUFjSCxFQUNqQyxFQUFlQSxFQUFVQyxHLDZFQ0haLFNBQVNHLEVBQXlCaEIsRUFBUWlCLEdBQ3ZELEdBQWMsTUFBVmpCLEVBQWdCLE1BQU8sR0FDM0IsSUFDSVgsRUFBS1IsRUFETGlCLEdBQVMsT0FBNkJFLEVBQVFpQixHQUdsRCxHQUFJMUIsT0FBTzJCLHNCQUF1QixDQUNoQyxJQUFJQyxFQUFtQjVCLE9BQU8yQixzQkFBc0JsQixHQUVwRCxJQUFLbkIsRUFBSSxFQUFHQSxFQUFJc0MsRUFBaUJ2QyxPQUFRQyxJQUN2Q1EsRUFBTThCLEVBQWlCdEMsR0FDbkJvQyxFQUFTRyxRQUFRL0IsSUFBUSxHQUN4QkUsT0FBT1UsVUFBVW9CLHFCQUFxQmxCLEtBQUtILEVBQVFYLEtBQ3hEUyxFQUFPVCxHQUFPVyxFQUFPWCxJQUl6QixPQUFPUyxJLDRCQ2pCTSxTQUFTd0IsRUFBOEJ0QixFQUFRaUIsR0FDNUQsR0FBYyxNQUFWakIsRUFBZ0IsTUFBTyxHQUMzQixJQUVJWCxFQUFLUixFQUZMaUIsRUFBUyxHQUNUeUIsRUFBYWhDLE9BQU9pQyxLQUFLeEIsR0FHN0IsSUFBS25CLEVBQUksRUFBR0EsRUFBSTBDLEVBQVczQyxPQUFRQyxJQUNqQ1EsRUFBTWtDLEVBQVcxQyxHQUNib0MsRUFBU0csUUFBUS9CLElBQVEsSUFDN0JTLEVBQU9ULEdBQU9XLEVBQU9YLElBR3ZCLE9BQU9TLEUsNkVDUk0sU0FBUzJCLEVBQWUvQyxFQUFLRyxHQUMxQyxPQ0xhLFNBQXlCSCxHQUN0QyxHQUFJSyxNQUFNMkMsUUFBUWhELEdBQU0sT0FBT0EsRURJeEIsQ0FBZUEsSUVMVCxTQUErQkEsRUFBS0csR0FDakQsR0FBc0Isb0JBQVg4QyxRQUE0QkEsT0FBT0MsWUFBWXJDLE9BQU9iLEdBQWpFLENBQ0EsSUFBSW1ELEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLE9BQUtDLEVBRVQsSUFDRSxJQUFLLElBQWlDQyxFQUE3QkMsRUFBS3pELEVBQUlpRCxPQUFPQyxjQUFtQkUsR0FBTUksRUFBS0MsRUFBR0MsUUFBUUMsUUFDaEVSLEVBQUtTLEtBQUtKLEVBQUc1QyxRQUVUVCxHQUFLZ0QsRUFBS2pELFNBQVdDLEdBSDhDaUQsR0FBSyxJQUs5RSxNQUFPUyxHQUNQUixHQUFLLEVBQ0xDLEVBQUtPLEVBQ0wsUUFDQSxJQUNPVCxHQUFzQixNQUFoQkssRUFBVyxRQUFXQSxFQUFXLFNBQzVDLFFBQ0EsR0FBSUosRUFBSSxNQUFNQyxHQUlsQixPQUFPSCxHRm5CdUIsQ0FBcUJuRCxFQUFLRyxLQUFNLEVBQUEyRCxFQUFBLEdBQTJCOUQsRUFBS0csSUdMakYsV0FDYixNQUFNLElBQUk0RCxVQUFVLDZJSElnRixLLG9FSUR2RixTQUFTQyxFQUFtQmhFLEdBQ3pDLE9DSmEsU0FBNEJBLEdBQ3pDLEdBQUlLLE1BQU0yQyxRQUFRaEQsR0FBTSxPQUFPLEVBQUFpRSxFQUFBLEdBQWlCakUsR0RHekMsQ0FBa0JBLElFTFosU0FBMEJrRSxHQUN2QyxHQUFzQixvQkFBWGpCLFFBQTBCQSxPQUFPQyxZQUFZckMsT0FBT3FELEdBQU8sT0FBTzdELE1BQU04RCxLQUFLRCxHRkl2RCxDQUFnQmxFLEtBQVEsRUFBQThELEVBQUEsR0FBMkI5RCxJR0x2RSxXQUNiLE1BQU0sSUFBSStELFVBQVUsd0lISXdFLEssMkJJTC9FLFNBQVNLLEVBQVExRCxHQWE5QixPQVRFMEQsRUFEb0IsbUJBQVhuQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQ3RDLFNBQWlCeEMsR0FDekIsY0FBY0EsR0FHTixTQUFpQkEsR0FDekIsT0FBT0EsR0FBeUIsbUJBQVh1QyxRQUF5QnZDLEVBQUkyQixjQUFnQlksUUFBVXZDLElBQVF1QyxPQUFPMUIsVUFBWSxnQkFBa0JiLElBSTlHQSxHLDRFQ1pGLFNBQVMyRCxFQUE0QnhDLEVBQUd5QyxHQUNyRCxHQUFLekMsRUFBTCxDQUNBLEdBQWlCLGlCQUFOQSxFQUFnQixPQUFPLE9BQWlCQSxFQUFHeUMsR0FDdEQsSUFBSUMsRUFBSTFELE9BQU9VLFVBQVVpRCxTQUFTL0MsS0FBS0ksR0FBRzRDLE1BQU0sR0FBSSxHQUVwRCxNQURVLFdBQU5GLEdBQWtCMUMsRUFBRVEsY0FBYWtDLEVBQUkxQyxFQUFFUSxZQUFZcUMsTUFDN0MsUUFBTkgsR0FBcUIsUUFBTkEsRUFBb0JsRSxNQUFNOEQsS0FBS3RDLEdBQ3hDLGNBQU4wQyxHQUFxQiwyQ0FBMkNJLEtBQUtKLElBQVcsT0FBaUIxQyxFQUFHeUMsUUFBeEcsSyxTQ0RGTSxFQUFPQyxRQU5QLFNBQWdDbkUsR0FDOUIsT0FBT0EsR0FBT0EsRUFBSW9FLFdBQWFwRSxFQUFNLENBQ25DLFFBQVdBLEssY0NGZixJQUFJMEQsRUFBVSxFQUFRLEdBRXRCLFNBQVNXLElBQ1AsR0FBdUIsbUJBQVpDLFFBQXdCLE9BQU8sS0FDMUMsSUFBSUMsRUFBUSxJQUFJRCxRQU1oQixPQUpBRCxFQUEyQixXQUN6QixPQUFPRSxHQUdGQSxFQTRDVEwsRUFBT0MsUUF6Q1AsU0FBaUNuRSxHQUMvQixHQUFJQSxHQUFPQSxFQUFJb0UsV0FDYixPQUFPcEUsRUFHVCxHQUFZLE9BQVJBLEdBQWlDLFdBQWpCMEQsRUFBUTFELElBQW9DLG1CQUFSQSxFQUN0RCxNQUFPLENBQ0wsUUFBV0EsR0FJZixJQUFJdUUsRUFBUUYsSUFFWixHQUFJRSxHQUFTQSxFQUFNQyxJQUFJeEUsR0FDckIsT0FBT3VFLEVBQU1FLElBQUl6RSxHQUduQixJQUFJMEUsRUFBUyxHQUNUQyxFQUF3QnhFLE9BQU9DLGdCQUFrQkQsT0FBT3lFLHlCQUU1RCxJQUFLLElBQUkzRSxLQUFPRCxFQUNkLEdBQUlHLE9BQU9VLFVBQVVDLGVBQWVDLEtBQUtmLEVBQUtDLEdBQU0sQ0FDbEQsSUFBSTRFLEVBQU9GLEVBQXdCeEUsT0FBT3lFLHlCQUF5QjVFLEVBQUtDLEdBQU8sS0FFM0U0RSxJQUFTQSxFQUFLSixLQUFPSSxFQUFLQyxLQUM1QjNFLE9BQU9DLGVBQWVzRSxFQUFRekUsRUFBSzRFLEdBRW5DSCxFQUFPekUsR0FBT0QsRUFBSUMsR0FXeEIsT0FOQXlFLEVBQWdCLFFBQUkxRSxFQUVoQnVFLEdBQ0ZBLEVBQU1PLElBQUk5RSxFQUFLMEUsR0FHVkEsSSxNQ25EVCxTQUFTaEIsRUFBUTFELEdBYWYsTUFWc0IsbUJBQVh1QyxRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQ2hEMEIsRUFBT0MsUUFBVVQsRUFBVSxTQUFpQjFELEdBQzFDLGNBQWNBLEdBR2hCa0UsRUFBT0MsUUFBVVQsRUFBVSxTQUFpQjFELEdBQzFDLE9BQU9BLEdBQXlCLG1CQUFYdUMsUUFBeUJ2QyxFQUFJMkIsY0FBZ0JZLFFBQVV2QyxJQUFRdUMsT0FBTzFCLFVBQVksZ0JBQWtCYixHQUl0SDBELEVBQVExRCxHQUdqQmtFLEVBQU9DLFFBQVVULEcsc0ZDSmpCLFNBQVNxQixFQUFNN0UsR0FDYixJQUFJOEUsRUFBTXJFLFVBQVVuQixPQUFTLFFBQXNCcUQsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDMUVzRSxFQUFNdEUsVUFBVW5CLE9BQVMsUUFBc0JxRCxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQVE5RSxPQUFPdUUsS0FBS0YsSUFBSUUsS0FBS0QsSUFBSUQsRUFBSzlFLEdBQVErRSxHQThGakMsU0FBU0UsRUFBZUMsR0FFN0IsR0FBSUEsRUFBTUMsS0FDUixPQUFPRCxFQUdULEdBQXdCLE1BQXBCQSxFQUFNRSxPQUFPLEdBQ2YsT0FBT0gsRUEzRkosU0FBa0JDLEdBQ3ZCQSxFQUFRQSxFQUFNRyxPQUFPLEdBQ3JCLElBQUlDLEVBQUssSUFBSUMsT0FBTyxPQUFPQyxPQUFPTixFQUFNNUYsUUFBVSxFQUFJLEVBQUksRUFBRyxLQUFNLEtBQy9EbUcsRUFBU1AsRUFBTVEsTUFBTUosR0FRekIsT0FOSUcsR0FBK0IsSUFBckJBLEVBQU8sR0FBR25HLFNBQ3RCbUcsRUFBU0EsRUFBT0UsS0FBSSxTQUFVaEMsR0FDNUIsT0FBT0EsRUFBSUEsTUFJUjhCLEVBQVMsTUFBTUQsT0FBeUIsSUFBbEJDLEVBQU9uRyxPQUFlLElBQU0sR0FBSSxLQUFLa0csT0FBT0MsRUFBT0UsS0FBSSxTQUFVaEMsRUFBR2lDLEdBQy9GLE9BQU9BLEVBQVEsRUFBSUMsU0FBU2xDLEVBQUcsSUFBTXFCLEtBQUtjLE1BQU1ELFNBQVNsQyxFQUFHLElBQU0sSUFBTSxLQUFRLE9BQy9Fb0MsS0FBSyxNQUFPLEtBQU8sR0E4RUVDLENBQVNkLElBR2pDLElBQUllLEVBQVNmLEVBQU1wRCxRQUFRLEtBQ3ZCcUQsRUFBT0QsRUFBTWdCLFVBQVUsRUFBR0QsR0FFOUIsSUFBc0QsSUFBbEQsQ0FBQyxNQUFPLE9BQVEsTUFBTyxRQUFRbkUsUUFBUXFELEdBQ3pDLE1BQU0sSUFBSWdCLE9BQXVMLE9BQXVCLEVBQUdqQixJQUc3TixJQUFJa0IsRUFBU2xCLEVBQU1nQixVQUFVRCxFQUFTLEVBQUdmLEVBQU01RixPQUFTLEdBQUcrRyxNQUFNLEtBSWpFLE1BQU8sQ0FDTGxCLEtBQU1BLEVBQ05pQixPQUxGQSxFQUFTQSxFQUFPVCxLQUFJLFNBQVUzRixHQUM1QixPQUFPc0csV0FBV3RHLE9BZ0JmLFNBQVN1RyxFQUFlckIsR0FDN0IsSUFBSUMsRUFBT0QsRUFBTUMsS0FDYmlCLEVBQVNsQixFQUFNa0IsT0FZbkIsT0FWNkIsSUFBekJqQixFQUFLckQsUUFBUSxPQUVmc0UsRUFBU0EsRUFBT1QsS0FBSSxTQUFVaEMsRUFBR3BFLEdBQy9CLE9BQU9BLEVBQUksRUFBSXNHLFNBQVNsQyxFQUFHLElBQU1BLE1BRUQsSUFBekJ3QixFQUFLckQsUUFBUSxTQUN0QnNFLEVBQU8sR0FBSyxHQUFHWixPQUFPWSxFQUFPLEdBQUksS0FDakNBLEVBQU8sR0FBSyxHQUFHWixPQUFPWSxFQUFPLEdBQUksTUFHNUIsR0FBR1osT0FBT0wsRUFBTSxLQUFLSyxPQUFPWSxFQUFPTCxLQUFLLE1BQU8sS0FZakQsU0FBU1MsRUFBaUJDLEVBQVlDLEdBQzNDLElBQUlDLEVBQU9DLEVBQWFILEdBQ3BCSSxFQUFPRCxFQUFhRixHQUN4QixPQUFRMUIsS0FBS0QsSUFBSTRCLEVBQU1FLEdBQVEsTUFBUzdCLEtBQUtGLElBQUk2QixFQUFNRSxHQUFRLEtBWTFELFNBQVNELEVBQWExQixHQUUzQixJQUFJNEIsRUFBcUIsU0FEekI1QixFQUFRRCxFQUFlQyxJQUNQQyxLQUFpQkYsRUFsSDVCLFNBQWtCQyxHQUV2QixJQUNJa0IsR0FGSmxCLEVBQVFELEVBQWVDLElBRUhrQixPQUNoQlcsRUFBSVgsRUFBTyxHQUNYWSxFQUFJWixFQUFPLEdBQUssSUFDaEJhLEVBQUliLEVBQU8sR0FBSyxJQUNoQmMsRUFBSUYsRUFBSWhDLEtBQUtGLElBQUltQyxFQUFHLEVBQUlBLEdBRXhCRSxFQUFJLFNBQVd4RCxHQUNqQixJQUFJeUQsRUFBSTNHLFVBQVVuQixPQUFTLFFBQXNCcUQsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLElBQU1rRCxFQUFJb0QsRUFBSSxJQUFNLEdBQzNGLE9BQU9FLEVBQUlDLEVBQUlsQyxLQUFLRCxJQUFJQyxLQUFLRixJQUFJc0MsRUFBSSxFQUFHLEVBQUlBLEVBQUcsSUFBSyxJQUdsRGpDLEVBQU8sTUFDUDJCLEVBQU0sQ0FBQzlCLEtBQUtjLE1BQWEsSUFBUHFCLEVBQUUsSUFBV25DLEtBQUtjLE1BQWEsSUFBUHFCLEVBQUUsSUFBV25DLEtBQUtjLE1BQWEsSUFBUHFCLEVBQUUsS0FPeEUsTUFMbUIsU0FBZmpDLEVBQU1DLE9BQ1JBLEdBQVEsSUFDUjJCLEVBQUk5RCxLQUFLb0QsRUFBTyxLQUdYRyxFQUFlLENBQ3BCcEIsS0FBTUEsRUFDTmlCLE9BQVFVLElBMEZzQ08sQ0FBU25DLElBQVFrQixPQUFTbEIsRUFBTWtCLE9BT2hGLE9BTkFVLEVBQU1BLEVBQUluQixLQUFJLFNBQVUyQixHQUd0QixPQUZBQSxHQUFPLE1BRU8sT0FBVUEsRUFBTSxNQUFRdEMsS0FBS3VDLEtBQUtELEVBQU0sTUFBUyxNQUFPLFFBR2pFRSxRQUFRLE1BQVNWLEVBQUksR0FBSyxNQUFTQSxFQUFJLEdBQUssTUFBU0EsRUFBSSxJQUFJVyxRQUFRLElBd0J2RSxTQUFTQyxFQUFLeEMsRUFBT2xGLEdBUzFCLE9BUkFrRixFQUFRRCxFQUFlQyxHQUN2QmxGLEVBQVE2RSxFQUFNN0UsR0FFSyxRQUFma0YsRUFBTUMsTUFBaUMsUUFBZkQsRUFBTUMsT0FDaENELEVBQU1DLE1BQVEsS0FHaEJELEVBQU1rQixPQUFPLEdBQUtwRyxFQUNYdUcsRUFBZXJCLEdBVWpCLFNBQVN5QyxFQUFPekMsRUFBTzBDLEdBSTVCLEdBSEExQyxFQUFRRCxFQUFlQyxHQUN2QjBDLEVBQWMvQyxFQUFNK0MsSUFFZSxJQUEvQjFDLEVBQU1DLEtBQUtyRCxRQUFRLE9BQ3JCb0QsRUFBTWtCLE9BQU8sSUFBTSxFQUFJd0IsT0FDbEIsSUFBbUMsSUFBL0IxQyxFQUFNQyxLQUFLckQsUUFBUSxPQUM1QixJQUFLLElBQUl2QyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsR0FBSyxFQUMxQjJGLEVBQU1rQixPQUFPN0csSUFBTSxFQUFJcUksRUFJM0IsT0FBT3JCLEVBQWVyQixHQVVqQixTQUFTMkMsRUFBUTNDLEVBQU8wQyxHQUk3QixHQUhBMUMsRUFBUUQsRUFBZUMsR0FDdkIwQyxFQUFjL0MsRUFBTStDLElBRWUsSUFBL0IxQyxFQUFNQyxLQUFLckQsUUFBUSxPQUNyQm9ELEVBQU1rQixPQUFPLEtBQU8sSUFBTWxCLEVBQU1rQixPQUFPLElBQU13QixPQUN4QyxJQUFtQyxJQUEvQjFDLEVBQU1DLEtBQUtyRCxRQUFRLE9BQzVCLElBQUssSUFBSXZDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxHQUFLLEVBQzFCMkYsRUFBTWtCLE9BQU83RyxLQUFPLElBQU0yRixFQUFNa0IsT0FBTzdHLElBQU1xSSxFQUlqRCxPQUFPckIsRUFBZXJCLEssZ0ZDbFJiaEQsRUFBTyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFFNUIsU0FBUzRGLEVBQWtCQyxHQUN4QyxJQUFJQyxFQUFzQkQsRUFBWTNCLE9BQ2xDQSxPQUFpQyxJQUF4QjRCLEVBQWlDLENBQzVDQyxHQUFJLEVBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxHQUFJLEtBQ0pDLEdBQUksTUFDRkwsRUFDQU0sRUFBb0JQLEVBQVlRLEtBQ2hDQSxPQUE2QixJQUF0QkQsRUFBK0IsS0FBT0EsRUFDN0NFLEVBQW9CVCxFQUFZVSxLQUNoQ0EsT0FBNkIsSUFBdEJELEVBQStCLEVBQUlBLEVBQzFDRSxHQUFRLE9BQXlCWCxFQUFhLENBQUMsU0FBVSxPQUFRLFNBRXJFLFNBQVNZLEVBQUc1SSxHQUNWLElBQUlDLEVBQStCLGlCQUFoQm9HLEVBQU9yRyxHQUFvQnFHLEVBQU9yRyxHQUFPQSxFQUM1RCxNQUFPLHFCQUFxQnlGLE9BQU94RixHQUFPd0YsT0FBTytDLEVBQU0sS0FnQnpELFNBQVNLLEVBQVFDLEVBQU9DLEdBQ3RCLElBQUlDLEVBQVc3RyxFQUFLSixRQUFRZ0gsR0FFNUIsT0FBSUMsSUFBYTdHLEVBQUs1QyxPQUFTLEVBQ3RCcUosRUFBR0UsR0FHTCxxQkFBcUJyRCxPQUFnQyxpQkFBbEJZLEVBQU95QyxHQUFzQnpDLEVBQU95QyxHQUFTQSxHQUFPckQsT0FBTytDLEVBQU0sVUFBWSxjQUFjL0MsU0FBc0IsSUFBZHVELEdBQXlELGlCQUEvQjNDLEVBQU9sRSxFQUFLNkcsRUFBVyxJQUFtQjNDLEVBQU9sRSxFQUFLNkcsRUFBVyxJQUFNRCxHQUFPTCxFQUFPLEtBQUtqRCxPQUFPK0MsRUFBTSxLQVdoUixPQUFPLE9BQVMsQ0FDZHJHLEtBQU1BLEVBQ05rRSxPQUFRQSxFQUNSdUMsR0FBSUEsRUFDSkssS0FuQ0YsU0FBY2pKLEdBQ1osSUFBSWdKLEVBQVc3RyxFQUFLSixRQUFRL0IsR0FBTyxFQUMvQmtKLEVBQWE3QyxFQUFPbEUsRUFBSzZHLElBRTdCLE9BQUlBLElBQWE3RyxFQUFLNUMsT0FFYnFKLEVBQUcsTUFJTCxxQkFBcUJuRCxRQURNLGlCQUFmeUQsR0FBMkJGLEVBQVcsRUFBSUUsRUFBYWxKLEdBQy9CMEksRUFBTyxLQUFLakQsT0FBTytDLEVBQU0sTUEwQnBFSyxRQUFTQSxFQUNUTSxLQWRGLFNBQWNuSixHQUNaLE9BQU82SSxFQUFRN0ksRUFBS0EsSUFjcEJvSixNQVhGLFNBQWVwSixHQUNiLE9BQU9xRyxFQUFPckcsS0FXYjJJLEcsY0MvRFUsU0FBU1UsRUFBYXJCLEVBQWFzQixFQUFTQyxHQUN6RCxJQUFJQyxFQUVKLE9BQU8sT0FBUyxDQUNkQyxRQUFTLFdBQ1AsSUFBSUMsRUFBU2hKLFVBQVVuQixPQUFTLFFBQXNCcUQsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FpQmpGLE9BQU8sT0FBUyxDQUNkaUosWUFBYUwsRUFBUSxHQUNyQk0sYUFBY04sRUFBUSxJQUNyQkksR0FBUSxPQUFnQixHQUFJMUIsRUFBWVksR0FBRyxPQUFPLE9BQVMsQ0FDNURlLFlBQWFMLEVBQVEsR0FDckJNLGFBQWNOLEVBQVEsSUFDckJJLEVBQU8xQixFQUFZWSxHQUFHLFdBRTNCaUIsU0FBVUwsRUFBVyxDQUNuQk0sVUFBVyxLQUNWLE9BQWdCTixFQUFVLEdBQUcvRCxPQUFPdUMsRUFBWVksR0FBRyxNQUFPLGlDQUFrQyxDQUM3RmtCLFVBQVcsTUFDVCxPQUFnQk4sRUFBVXhCLEVBQVlZLEdBQUcsTUFBTyxDQUNsRGtCLFVBQVcsS0FDVE4sSUFDSEQsRyxhQ25DTCxRQUphLENBQ1hRLE1BQU8sT0FDUEMsTUFBTyxRQ2NULEVBaEJXLENBQ1RDLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VSLEVBWk8sVUFZUCxFQVZPLFVBVVAsRUFSTyxVQ1FQLEVBSlEsVUFJUixFQUhRLFVBR1IsRUFGUSxVQ0VSLEVBWk8sVUFZUCxFQVZPLFVBVVAsRUFSTyxVQ1FQLEVBWk8sVUFZUCxFQVZPLFVBVVAsRUFSTyxVQ1FQLEVBWk8sVUFZUCxFQVZPLFVBVVAsRUFSTyxVQ1FQLEVBWk8sVUFZUCxFQVZPLFVBVVAsRUFSTyxVLGNDS0lDLEVBQVEsQ0FFakJDLEtBQU0sQ0FFSkMsUUFBUyxzQkFFVEMsVUFBVyxzQkFFWEMsU0FBVSxzQkFFVkMsS0FBTSx1QkFHUkMsUUFBUyxzQkFHVDFFLFdBQVksQ0FDVjJFLE1BQU8sUUFDUEMsUUFBUyxPQUdYQyxPQUFRLENBRU5DLE9BQVEsc0JBRVJDLE1BQU8sc0JBQ1BDLGFBQWMsSUFFZEMsU0FBVSxzQkFDVkMsZ0JBQWlCLElBRWpCVixTQUFVLHNCQUVWVyxtQkFBb0Isc0JBQ3BCQyxnQkFBaUIsSUFDakJDLE1BQU8sc0JBQ1BDLGFBQWMsSUFDZEMsaUJBQWtCLE1BR1hDLEVBQU8sQ0FDaEJuQixLQUFNLENBQ0pDLFFBQVMsUUFDVEMsVUFBVywyQkFDWEMsU0FBVSwyQkFDVkMsS0FBTSwyQkFDTmdCLEtBQU0sNEJBRVJmLFFBQVMsNEJBQ1QxRSxXQUFZLENBQ1YyRSxNQUFPLE9BQ1BDLFFBQVMsV0FFWEMsT0FBUSxDQUNOQyxPQUFRLFFBQ1JDLE1BQU8sNEJBQ1BDLGFBQWMsSUFDZEMsU0FBVSw0QkFDVkMsZ0JBQWlCLElBQ2pCVixTQUFVLDJCQUNWVyxtQkFBb0IsNEJBQ3BCQyxnQkFBaUIsSUFDakJDLE1BQU8sNEJBQ1BDLGFBQWMsSUFDZEMsaUJBQWtCLE1BSXRCLFNBQVNHLEVBQWVDLEVBQVFDLEVBQVdDLEVBQU9DLEdBQ2hELElBQUlDLEVBQW1CRCxFQUFZMUIsT0FBUzBCLEVBQ3hDRSxFQUFrQkYsRUFBWU4sTUFBc0IsSUFBZE0sRUFFckNILEVBQU9DLEtBQ05ELEVBQU96TCxlQUFlMkwsR0FDeEJGLEVBQU9DLEdBQWFELEVBQU9FLEdBQ0osVUFBZEQsRUFDVEQsRUFBT3ZCLE9BQVEsUUFBUXVCLEVBQU9NLEtBQU1GLEdBQ2IsU0FBZEgsSUFDVEQsRUFBT0gsTUFBTyxRQUFPRyxFQUFPTSxLQUFNRCxLQUt6QixTQUFTRSxFQUFjQyxHQUNwQyxJQUFJQyxFQUFtQkQsRUFBUTdCLFFBQzNCQSxPQUErQixJQUFyQjhCLEVBQThCLENBQzFDaEMsTUFBTyxFQUNQNkIsS0FBTSxFQUNOVCxLQUFNLEdBQ0pZLEVBQ0FDLEVBQXFCRixFQUFRNUIsVUFDN0JBLE9BQW1DLElBQXZCOEIsRUFBZ0MsQ0FDOUNqQyxNQUFPLEVBQ1A2QixLQUFNLEVBQ05ULEtBQU0sR0FDSmEsRUFDQUMsRUFBaUJILEVBQVFJLE1BQ3pCQSxPQUEyQixJQUFuQkQsRUFBNEIsQ0FDdENsQyxNQUFPLEVBQ1A2QixLQUFNLEVBQ05ULEtBQU0sR0FDSmMsRUFDQUUsRUFBbUJMLEVBQVFNLFFBQzNCQSxPQUErQixJQUFyQkQsRUFBOEIsQ0FDMUNwQyxNQUFPLEVBQ1A2QixLQUFNLEVBQ05ULEtBQU0sR0FDSmdCLEVBQ0FFLEVBQWdCUCxFQUFRUSxLQUN4QkEsT0FBeUIsSUFBbEJELEVBQTJCLENBQ3BDdEMsTUFBTyxFQUNQNkIsS0FBTSxFQUNOVCxLQUFNLEdBQ0prQixFQUNBRSxFQUFtQlQsRUFBUVUsUUFDM0JBLE9BQStCLElBQXJCRCxFQUE4QixDQUMxQ3hDLE1BQU8sRUFDUDZCLEtBQU0sRUFDTlQsS0FBTSxHQUNKb0IsRUFDQUUsRUFBZ0JYLEVBQVExSCxLQUN4QkEsT0FBeUIsSUFBbEJxSSxFQUEyQixRQUFVQSxFQUM1Q0MsRUFBd0JaLEVBQVFhLGtCQUNoQ0EsT0FBOEMsSUFBMUJELEVBQW1DLEVBQUlBLEVBQzNERSxFQUF1QmQsRUFBUUwsWUFDL0JBLE9BQXVDLElBQXpCbUIsRUFBa0MsR0FBTUEsRUFDdERqRixHQUFRLE9BQXlCbUUsRUFBUyxDQUFDLFVBQVcsWUFBYSxRQUFTLFVBQVcsT0FBUSxVQUFXLE9BQVEsb0JBQXFCLGdCQUszSSxTQUFTZSxFQUFnQmxILEdBV3ZCLE9BVm1CLFFBQWlCQSxFQUFZd0YsRUFBS25CLEtBQUtDLFVBQVkwQyxFQUFvQnhCLEVBQUtuQixLQUFLQyxRQUFVRixFQUFNQyxLQUFLQyxRQWEzSCxJQUFJNkMsRUFBZSxTQUFzQjNJLEdBQ3ZDLElBQUk0SSxFQUFZck4sVUFBVW5CLE9BQVMsUUFBc0JxRCxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUNoRnNOLEVBQWF0TixVQUFVbkIsT0FBUyxRQUFzQnFELElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLElBQ2pGdU4sRUFBWXZOLFVBQVVuQixPQUFTLFFBQXNCcUQsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssSUFPcEYsS0FOQXlFLEdBQVEsT0FBUyxHQUFJQSxJQUVWeUgsTUFBUXpILEVBQU00SSxLQUN2QjVJLEVBQU15SCxLQUFPekgsRUFBTTRJLEtBR2hCNUksRUFBTXlILEtBQ1QsTUFBTSxJQUFJeEcsT0FBK00sT0FBdUIsRUFBRzJILElBR3JQLEdBQTBCLGlCQUFmNUksRUFBTXlILEtBQ2YsTUFBTSxJQUFJeEcsT0FBOGUsT0FBdUIsRUFBRzhILEtBQUtDLFVBQVVoSixFQUFNeUgsUUFVemlCLE9BUEFQLEVBQWVsSCxFQUFPLFFBQVM2SSxFQUFZdkIsR0FDM0NKLEVBQWVsSCxFQUFPLE9BQVE4SSxFQUFXeEIsR0FFcEN0SCxFQUFNaUosZUFDVGpKLEVBQU1pSixhQUFlUCxFQUFnQjFJLEVBQU15SCxPQUd0Q3pILEdBR0xrSixFQUFRLENBQ1ZsQyxLQUFNQSxFQUNOcEIsTUFBT0EsR0F3Q1QsT0EvQm9CLEVBQUF1RCxFQUFBLElBQVUsT0FBUyxDQUVyQ0MsT0FBUSxFQUVSbkosS0FBTUEsRUFFTjZGLFFBQVM2QyxFQUFhN0MsR0FFdEJDLFVBQVc0QyxFQUFhNUMsRUFBVyxPQUFRLE9BQVEsUUFFbkRnQyxNQUFPWSxFQUFhWixHQUVwQkUsUUFBU1UsRUFBYVYsR0FFdEJFLEtBQU1RLEVBQWFSLEdBRW5CRSxRQUFTTSxFQUFhTixHQUV0QmdCLEtBQU0sRUFHTmIsa0JBQW1CQSxFQUVuQkUsZ0JBQWlCQSxFQUVqQkMsYUFBY0EsRUFJZHJCLFlBQWFBLEdBQ1o0QixFQUFNakosSUFBUXVELEdDL05uQixTQUFTNUMsRUFBTTlGLEdBQ2IsT0FBT2dGLEtBQUtjLE1BQWMsSUFBUjlGLEdBQWUsSUFHbkMsSUFBSXdPLEVBQWMsQ0FDaEJDLGNBQWUsYUFFYkMsRUFBb0IsNkNBTVQsU0FBU0MsRUFBaUI5QixFQUFTK0IsR0FDaEQsSUFBSUMsRUFBNkIsbUJBQWZELEVBQTRCQSxFQUFXL0IsR0FBVytCLEVBQ2hFRSxFQUFrQkQsRUFBS0UsV0FDdkJBLE9BQWlDLElBQXBCRCxFQUE2QkosRUFBb0JJLEVBQzlERSxFQUFnQkgsRUFBS0ksU0FDckJBLE9BQTZCLElBQWxCRCxFQUEyQixHQUFLQSxFQUMzQ0UsRUFBdUJMLEVBQUtNLGdCQUM1QkEsT0FBMkMsSUFBekJELEVBQWtDLElBQU1BLEVBQzFERSxFQUF3QlAsRUFBS1Esa0JBQzdCQSxPQUE4QyxJQUExQkQsRUFBbUMsSUFBTUEsRUFDN0RFLEVBQXdCVCxFQUFLVSxpQkFDN0JBLE9BQTZDLElBQTFCRCxFQUFtQyxJQUFNQSxFQUM1REUsRUFBc0JYLEVBQUtZLGVBQzNCQSxPQUF5QyxJQUF4QkQsRUFBaUMsSUFBTUEsRUFDeERFLEVBQW9CYixFQUFLYyxhQUN6QkEsT0FBcUMsSUFBdEJELEVBQStCLEdBQUtBLEVBQ25ERSxFQUFjZixFQUFLZSxZQUNuQkMsRUFBV2hCLEVBQUtpQixRQUNoQnBILEdBQVEsT0FBeUJtRyxFQUFNLENBQUMsYUFBYyxXQUFZLGtCQUFtQixvQkFBcUIsbUJBQW9CLGlCQUFrQixlQUFnQixjQUFlLFlBWS9La0IsRUFBT2QsRUFBVyxHQUVsQmEsRUFBVUQsR0FBWSxTQUFVRyxHQUNsQyxNQUFPLEdBQUd4SyxPQUFPd0ssRUFBT0wsRUFBZUksRUFBTSxRQUczQ0UsRUFBZSxTQUFzQkMsRUFBWUYsRUFBTUcsRUFBWUMsRUFBZUMsR0FDcEYsT0FBTyxPQUFTLENBQ2R0QixXQUFZQSxFQUNabUIsV0FBWUEsRUFDWmpCLFNBQVVhLEVBQVFFLEdBRWxCRyxXQUFZQSxHQUNYcEIsSUFBZUwsRUFBb0IsQ0FDcEMwQixjQUFlLEdBQUc1SyxPQUFPTSxFQUFNc0ssRUFBZ0JKLEdBQU8sT0FDcEQsR0FBSUssRUFBUVQsSUFHZFUsRUFBVyxDQUNiQyxHQUFJTixFQUFhZCxFQUFpQixHQUFJLE9BQVEsS0FDOUNxQixHQUFJUCxFQUFhZCxFQUFpQixHQUFJLEtBQU0sSUFDNUNzQixHQUFJUixFQUFhWixFQUFtQixHQUFJLE1BQU8sR0FDL0NxQixHQUFJVCxFQUFhWixFQUFtQixHQUFJLE1BQU8sS0FDL0NzQixHQUFJVixFQUFhWixFQUFtQixHQUFJLE1BQU8sR0FDL0N1QixHQUFJWCxFQUFhVixFQUFrQixHQUFJLElBQUssS0FDNUNzQixVQUFXWixFQUFhWixFQUFtQixHQUFJLEtBQU0sS0FDckR5QixVQUFXYixFQUFhVixFQUFrQixHQUFJLEtBQU0sSUFDcER3QixNQUFPZCxFQUFhWixFQUFtQixHQUFJLElBQUssS0FDaEQyQixNQUFPZixFQUFhWixFQUFtQixHQUFJLEtBQU0sS0FDakQ0QixPQUFRaEIsRUFBYVYsRUFBa0IsR0FBSSxLQUFNLEdBQUtmLEdBQ3REMEMsUUFBU2pCLEVBQWFaLEVBQW1CLEdBQUksS0FBTSxJQUNuRDhCLFNBQVVsQixFQUFhWixFQUFtQixHQUFJLEtBQU0sRUFBR2IsSUFFekQsT0FBTyxFQUFBSCxFQUFBLElBQVUsT0FBUyxDQUN4QnNCLGFBQWNBLEVBQ2RHLFFBQVNBLEVBQ1RoSyxNQUFPQSxFQUVQaUosV0FBWUEsRUFDWkUsU0FBVUEsRUFDVkUsZ0JBQWlCQSxFQUNqQkUsa0JBQW1CQSxFQUNuQkUsaUJBQWtCQSxFQUNsQkUsZUFBZ0JBLEdBQ2ZhLEdBQVc1SCxFQUFPLENBQ25CMEksT0FBTyxJQ3hGWCxTQUFTQyxJQUNQLE1BQU8sQ0FBQyxHQUFHN0wsT0FBTy9FLFVBQVVuQixRQUFVLE9BQUlxRCxFQUFZbEMsVUFBVSxHQUFJLE9BQU8rRSxPQUFPL0UsVUFBVW5CLFFBQVUsT0FBSXFELEVBQVlsQyxVQUFVLEdBQUksT0FBTytFLE9BQU8vRSxVQUFVbkIsUUFBVSxPQUFJcUQsRUFBWWxDLFVBQVUsR0FBSSxPQUFPK0UsT0FBTy9FLFVBQVVuQixRQUFVLE9BQUlxRCxFQUFZbEMsVUFBVSxHQUFJLGtCQUFrQitFLE9BTDVQLEdBSzBSLEtBQU0sR0FBR0EsT0FBTy9FLFVBQVVuQixRQUFVLE9BQUlxRCxFQUFZbEMsVUFBVSxHQUFJLE9BQU8rRSxPQUFPL0UsVUFBVW5CLFFBQVUsT0FBSXFELEVBQVlsQyxVQUFVLEdBQUksT0FBTytFLE9BQU8vRSxVQUFVbkIsUUFBVSxPQUFJcUQsRUFBWWxDLFVBQVUsR0FBSSxPQUFPK0UsT0FBTy9FLFVBQVVuQixRQUFVLE9BQUlxRCxFQUFZbEMsVUFBVSxHQUFJLGtCQUFrQitFLE9BSjNpQixJQUk0a0IsS0FBTSxHQUFHQSxPQUFPL0UsVUFBVW5CLFFBQVUsT0FBSXFELEVBQVlsQyxVQUFVLEdBQUksT0FBTytFLE9BQU8vRSxVQUFVbkIsUUFBVSxPQUFJcUQsRUFBWWxDLFVBQVUsR0FBSSxPQUFPK0UsT0FBTy9FLFVBQVVuQixRQUFVLFFBQUtxRCxFQUFZbEMsVUFBVSxJQUFLLE9BQU8rRSxPQUFPL0UsVUFBVW5CLFFBQVUsUUFBS3FELEVBQVlsQyxVQUFVLElBQUssa0JBQWtCK0UsT0FIbDJCLElBR3E0QixNQUFNTyxLQUFLLEtBS2o3QixRQURjLENBQUMsT0FBUXNMLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdB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TW81RCxhQUFhcDVELEVBQU1vNEQsbUJBQW1CaEIsTUFHakQsZ0JBQUMsRUFBRCxDQUFZcEwsUUFBUSxRQUFRN2tFLE1BQU0sZ0JBQWdCb1YsVUFBVSxPQUE1RCxPQUVFLGdCQUFDLEVBQUQsQ0FBWXl2RCxRQUFRLEtBQUs3a0UsTUFBTSxjQUFjb1YsVUFBVSxRQUNwRHlELEVBQU1vNUQsYUFBYXA1RCxFQUFNbzRELG1CQUFtQmYsV0N0R3ZELEdBWlksSUFFUixnQ0FDRSxnQkFBQyxFQUFELE1BQ0EsZ0JBQUNnSSxHQUFELE1BQ0EsZ0JBQUMsRUFBRCxLQUNFLGdCQUFDLEdBQUQsUUNWUnFJLFNBQ0UsZ0JBQUNuTyxHQUFELEtBQ0UsZ0JBQUMsR0FBRCxPQUVGOTZELFNBQVNrcEUsZUFBZSxVIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZlwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICByZXR1cm4gY2FjaGU7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB7XG4gICAgICBcImRlZmF1bHRcIjogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpO1xuXG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuXG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG5cbiAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajtcblxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDEsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2JcIi5jb25jYXQoY29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnLCBcIihcIikuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cXG5XZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDMsIGNvbG9yKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IHZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0KS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KChlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dIDogZW5kKSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICB2YXIgX3Rvb2xiYXI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IFRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMiksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygyKVxuICAgICAgfSwgc3R5bGVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBcIlwiLmNvbmNhdChicmVha3BvaW50cy51cCgneHMnKSwgXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSwge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIGJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgfSksIF90b29sYmFyKVxuICB9LCBtaXhpbnMpO1xufSIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5kaWdvOyIsInZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG5leHBvcnQgZGVmYXVsdCBwaW5rOyIsInZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJ2YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwidmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwidmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IGluZGlnbyBmcm9tICcuLi9jb2xvcnMvaW5kaWdvJztcbmltcG9ydCBwaW5rIGZyb20gJy4uL2NvbG9ycy9waW5rJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICcuL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogZ3JleVs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IHZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBncmV5WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIHZhciB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIHZhciB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuXG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9IGRhcmtlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXREYXJrKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIHZhciBfcGFsZXR0ZSRwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5LFxuICAgICAgcHJpbWFyeSA9IF9wYWxldHRlJHByaW1hcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogaW5kaWdvWzMwMF0sXG4gICAgbWFpbjogaW5kaWdvWzUwMF0sXG4gICAgZGFyazogaW5kaWdvWzcwMF1cbiAgfSA6IF9wYWxldHRlJHByaW1hcnksXG4gICAgICBfcGFsZXR0ZSRzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeSA9IF9wYWxldHRlJHNlY29uZGFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBwaW5rLkEyMDAsXG4gICAgbWFpbjogcGluay5BNDAwLFxuICAgIGRhcms6IHBpbmsuQTcwMFxuICB9IDogX3BhbGV0dGUkc2Vjb25kYXJ5LFxuICAgICAgX3BhbGV0dGUkZXJyb3IgPSBwYWxldHRlLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcGFsZXR0ZSRlcnJvciA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICBtYWluOiByZWRbNTAwXSxcbiAgICBkYXJrOiByZWRbNzAwXVxuICB9IDogX3BhbGV0dGUkZXJyb3IsXG4gICAgICBfcGFsZXR0ZSR3YXJuaW5nID0gcGFsZXR0ZS53YXJuaW5nLFxuICAgICAgd2FybmluZyA9IF9wYWxldHRlJHdhcm5pbmcgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgbWFpbjogb3JhbmdlWzUwMF0sXG4gICAgZGFyazogb3JhbmdlWzcwMF1cbiAgfSA6IF9wYWxldHRlJHdhcm5pbmcsXG4gICAgICBfcGFsZXR0ZSRpbmZvID0gcGFsZXR0ZS5pbmZvLFxuICAgICAgaW5mbyA9IF9wYWxldHRlJGluZm8gPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogYmx1ZVszMDBdLFxuICAgIG1haW46IGJsdWVbNTAwXSxcbiAgICBkYXJrOiBibHVlWzcwMF1cbiAgfSA6IF9wYWxldHRlJGluZm8sXG4gICAgICBfcGFsZXR0ZSRzdWNjZXNzID0gcGFsZXR0ZS5zdWNjZXNzLFxuICAgICAgc3VjY2VzcyA9IF9wYWxldHRlJHN1Y2Nlc3MgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogZ3JlZW5bMzAwXSxcbiAgICBtYWluOiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzcwMF1cbiAgfSA6IF9wYWxldHRlJHN1Y2Nlc3MsXG4gICAgICBfcGFsZXR0ZSR0eXBlID0gcGFsZXR0ZS50eXBlLFxuICAgICAgdHlwZSA9IF9wYWxldHRlJHR5cGUgPT09IHZvaWQgMCA/ICdsaWdodCcgOiBfcGFsZXR0ZSR0eXBlLFxuICAgICAgX3BhbGV0dGUkY29udHJhc3RUaHJlID0gcGFsZXR0ZS5jb250cmFzdFRocmVzaG9sZCxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gX3BhbGV0dGUkY29udHJhc3RUaHJlID09PSB2b2lkIDAgPyAzIDogX3BhbGV0dGUkY29udHJhc3RUaHJlLFxuICAgICAgX3BhbGV0dGUkdG9uYWxPZmZzZXQgPSBwYWxldHRlLnRvbmFsT2Zmc2V0LFxuICAgICAgdG9uYWxPZmZzZXQgPSBfcGFsZXR0ZSR0b25hbE9mZnNldCA9PT0gdm9pZCAwID8gMC4yIDogX3BhbGV0dGUkdG9uYWxPZmZzZXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ3YXJuaW5nXCIsIFwiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgdmFyIGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuXG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgdmFyIGF1Z21lbnRDb2xvciA9IGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG5cbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuXG4gICAgaWYgKCFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNCwgbWFpblNoYWRlKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXFxuYGNvbG9yLm1haW5gIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IGBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbiksIFwiYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cXG5cXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cXG5cXG5pbXBvcnQge1xceEEwZ3JlZW4gfSBmcm9tIFxcXCJAbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnNcXFwiO1xcblxcbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogZ3JlZW4sXFxufSB9KTtcXG5cXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxcbn0gfSk7XCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg1LCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cblxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG5cbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcblxuICB2YXIgdHlwZXMgPSB7XG4gICAgZGFyazogZGFyayxcbiAgICBsaWdodDogbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHdhcm5pbmcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3IoaW5mbyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHN1Y2Nlc3MpLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cblxudmFyIGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbnZhciBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIHZhciBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmJGZvbnRGYW1pbHkgPT09IHZvaWQgMCA/IGRlZmF1bHRGb250RmFtaWx5IDogX3JlZiRmb250RmFtaWx5LFxuICAgICAgX3JlZiRmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9yZWYkZm9udFNpemUgPT09IHZvaWQgMCA/IDE0IDogX3JlZiRmb250U2l6ZSxcbiAgICAgIF9yZWYkZm9udFdlaWdodExpZ2h0ID0gX3JlZi5mb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSBfcmVmJGZvbnRXZWlnaHRMaWdodCA9PT0gdm9pZCAwID8gMzAwIDogX3JlZiRmb250V2VpZ2h0TGlnaHQsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPSBfcmVmLmZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPT09IHZvaWQgMCA/IDQwMCA6IF9yZWYkZm9udFdlaWdodFJlZ3VsYSxcbiAgICAgIF9yZWYkZm9udFdlaWdodE1lZGl1bSA9IF9yZWYuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPT09IHZvaWQgMCA/IDUwMCA6IF9yZWYkZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIF9yZWYkZm9udFdlaWdodEJvbGQgPSBfcmVmLmZvbnRXZWlnaHRCb2xkLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSBfcmVmJGZvbnRXZWlnaHRCb2xkID09PSB2b2lkIDAgPyA3MDAgOiBfcmVmJGZvbnRXZWlnaHRCb2xkLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgYWxsVmFyaWFudHMgPSBfcmVmLmFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTIgPSBfcmVmLnB4VG9SZW0sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGh0bWxGb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIHZhciBweFRvUmVtID0gcHhUb1JlbTIgfHwgZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWYsIFwicmVtXCIpO1xuICB9O1xuXG4gIHZhciBidWlsZFZhcmlhbnQgPSBmdW5jdGlvbiBidWlsZFZhcmlhbnQoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnOyAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cblxudmFyIHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIHNtOiA2MDAsXG4gIG1kOiA5NjAsXG4gIGxnOiAxMjgwLFxuICB4bDogMTkyMFxufTtcbnZhciBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleV0sIFwicHgpXCIpO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMudGhlbWUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKHByb3BWYWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF90aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIGFjY1tfdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgdmFyIGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xudmFyIGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG52YXIgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG52YXIgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm9wJHNwbGl0ID0gcHJvcC5zcGxpdCgnJyksXG4gICAgICBfcHJvcCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfcHJvcCRzcGxpdCwgMiksXG4gICAgICBhID0gX3Byb3Akc3BsaXQyWzBdLFxuICAgICAgYiA9IF9wcm9wJHNwbGl0MlsxXTtcblxuICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZnVuY3Rpb24gKGRpcikge1xuICAgIHJldHVybiBwcm9wZXJ0eSArIGRpcjtcbiAgfSkgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG52YXIgc3BhY2luZ0tleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcgfHwgODtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGFicywgXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhYnMgPiB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAoXCIuY29uY2F0KGFicywgXCIpIG92ZXJmbG93cy5cIiksIFwiVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKSwgXCIuXCIpLCBcIlwiLmNvbmNhdChhYnMsIFwiID4gXCIpLmNvbmNhdCh0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSwgXCIsIHlvdSBuZWVkIHRvIGFkZCB0aGUgbWlzc2luZyB2YWx1ZXMuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgdGhlbWUuc3BhY2luZ2AgdmFsdWUgKFwiLmNvbmNhdCh0aGVtZVNwYWNpbmcsIFwiKSBpcyBpbnZhbGlkLlwiKSwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIHZhciBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICB2YXIgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBcIi1cIi5jb25jYXQodHJhbnNmb3JtZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wVmFsdWUpIHtcbiAgICByZXR1cm4gY3NzUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3NzUHJvcGVydHkpIHtcbiAgICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gICAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgICBpZiAoc3BhY2luZ0tleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH0pLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkIGFwcGxpZWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zIGFuZCB0eXBlLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIHZhciB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcblxuICB2YXIgc3BhY2luZyA9IGZ1bmN0aW9uIHNwYWNpbmcoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzLmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGFyZ3MubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKDEpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShhcmdzWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5tYXAoZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQob3V0cHV0LCBcInB4XCIpIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTsgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdG8gcmVtb3ZlIGluIHY1LlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNwYWNpbmcsICd1bml0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCF3YXJuT25jZSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGVtZS5zcGFjaW5nLnVuaXQgdXNhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZC4nLCAnSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LicsICdZb3UgY2FuIHJlcGxhY2UgYHRoZW1lLnNwYWNpbmcudW5pdCAqIHlgIHdpdGggYHRoZW1lLnNwYWNpbmcoeSlgLicsICcnLCAnWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5PbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgICB9XG4gIH0pO1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCB2YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBBcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXS5cIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgY3JlYXRlTXVpVGhlbWUgZnJvbSAnLi9jcmVhdGVNdWlUaGVtZSc7XG52YXIgZGVmYXVsdFRoZW1lID0gY3JlYXRlTXVpVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgdHJhbnNpdGlvbnMgZnJvbSAnLi90cmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcblxuZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc3BhY2luZ0lucHV0ID0gb3B0aW9ucy5zcGFjaW5nLFxuICAgICAgX29wdGlvbnMkdHlwb2dyYXBoeSA9IG9wdGlvbnMudHlwb2dyYXBoeSxcbiAgICAgIHR5cG9ncmFwaHlJbnB1dCA9IF9vcHRpb25zJHR5cG9ncmFwaHkgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkdHlwb2dyYXBoeSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJ0eXBvZ3JhcGh5XCJdKTtcblxuICB2YXIgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICB2YXIgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIG1peGluczogY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnNJbnB1dCksXG4gICAgb3ZlcnJpZGVzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHN0eWxlc1xuICAgIHBhbGV0dGU6IHBhbGV0dGUsXG4gICAgcHJvcHM6IHt9LFxuICAgIC8vIFByb3ZpZGUgZGVmYXVsdCBwcm9wc1xuICAgIHNoYWRvd3M6IHNoYWRvd3MsXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgc2hhcGU6IHNoYXBlLFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9LCBvdGhlcik7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhcmd1bWVudCkge1xuICAgIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCk7XG4gIH0sIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCImJFwiLmNvbmNhdChrZXkpLCBjaGlsZClcbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvcHNldWRvLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIHZhciB0aGVtZSA9IHBhcmFtcy50aGVtZSxcbiAgICAgIG5hbWUgPSBwYXJhbXMubmFtZSxcbiAgICAgIHByb3BzID0gcGFyYW1zLnByb3BzO1xuXG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLnByb3BzIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyBhcyB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgb3B0aW9ucykge1xuICByZXR1cm4gd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTsgLy8gVGhlIHdyYXBwZXIgcmVjZWl2ZXMgb25seSB1c2VyIHN1cHBsaWVkIHByb3BzLCB3aGljaCBjb3VsZCBiZSBhIHN1YnNldCBvZlxuICAgICAgLy8gdGhlIGFjdHVhbCBwcm9wcyBDb21wb25lbnQgbWlnaHQgcmVjZWl2ZSBkdWUgdG8gbWVyZ2luZyB3aXRoIGRlZmF1bHRQcm9wcy5cbiAgICAgIC8vIFNvIGNvcHlpbmcgaXQgaGVyZSB3b3VsZCBnaXZlIHVzIHRoZSBzYW1lIHJlc3VsdCBpbiB0aGUgd3JhcHBlciBhcyB3ZWxsLlxuXG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKF9leHRlbmRzKHt9LCBDb21wb25lbnQuZGVmYXVsdFByb3BzLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGEgdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogY2FwaXRhbGl6ZShzdHJpbmcpIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuXCIgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYykge1xuICB2YXIgd2FpdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTY2O1xuICB2YXIgdGltZW91dDtcblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIGZ1bmMuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cblxuICBkZWJvdW5jZWQuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnVuYykge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCBmdW5jdGlvbiAoKSB7fSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2ZpbGwnLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiYWN0aW9uXCJgLiAqL1xuICAgIGNvbG9yQWN0aW9uOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImRpc2FibGVkXCJgLiAqL1xuICAgIGNvbG9yRGlzYWJsZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImluaGVyaXRcImAuICovXG4gICAgZm9udFNpemVJbmhlcml0OiB7XG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwic21hbGxcImAuICovXG4gICAgZm9udFNpemVTbWFsbDoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBmb250U2l6ZUxhcmdlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDM1KVxuICAgIH1cbiAgfTtcbn07XG52YXIgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdzdmcnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcHJvcHMkZm9udFNpemUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIGh0bWxDb2xvciA9IHByb3BzLmh0bWxDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICBfcHJvcHMkdmlld0JveCA9IHByb3BzLnZpZXdCb3gsXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJHZpZXdCb3ggPT09IHZvaWQgMCA/ICcwIDAgMjQgMjQnIDogX3Byb3BzJHZpZXdCb3gsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShmb250U2l6ZSkpXSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiB0cnVlLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYGh0bWxDb2xvcmAgcHJvcCB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ2xhcmdlJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHJlZGVmaW5lIHdoYXQgdGhlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdW5pdHMgbWVhbiBpbnNpZGUgYW4gU1ZHIGVsZW1lbnQuXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgU1ZHIGVsZW1lbnQgaXMgNTAwICh3aWR0aCkgYnkgMjAwIChoZWlnaHQpLFxuICAgKiBhbmQgeW91IHBhc3Mgdmlld0JveD1cIjAgMCA1MCAyMFwiLFxuICAgKiB0aGlzIG1lYW5zIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGluc2lkZSB0aGUgU1ZHIHdpbGwgZ28gZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyICgwLDApXG4gICAqIHRvIGJvdHRvbSByaWdodCAoNTAsMjApIGFuZCBlYWNoIHVuaXQgd2lsbCBiZSB3b3J0aCAxMHB4LlxuICAgKi9cbiAgdmlld0JveDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcblN2Z0ljb24ubXVpTmFtZSA9ICdTdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJ1xufSkoU3ZnSWNvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vU3ZnSWNvbic7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbWF0ZXJpYWwtdWkveCBwYWNrYWdlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBDb21wb25lbnQgPSBmdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdmdJY29uLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSwgcGF0aCk7XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBOZWVkIHRvIHNldCBgZGlzcGxheU5hbWVgIG9uIHRoZSBpbm5lciBjb21wb25lbnQgZm9yIFJlYWN0Lm1lbW8uXG4gICAgLy8gUmVhY3QgcHJpb3IgdG8gMTYuMTQgaWdub3JlcyBgZGlzcGxheU5hbWVgIG9uIHRoZSB3cmFwcGVyLlxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiXCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIkljb25cIik7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXByZWNhdGVkUHJvcFR5cGUodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgXCIuY29uY2F0KGxvY2F0aW9uLCBcIiBgXCIpLmNvbmNhdChwcm9wRnVsbE5hbWVTYWZlLCBcImAgb2YgXCIpICsgXCJgXCIuY29uY2F0KGNvbXBvbmVudE5hbWVTYWZlLCBcImAgaXMgZGVwcmVjYXRlZC4gXCIpLmNvbmNhdChyZWFzb24pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSAmJiBtdWlOYW1lcy5pbmRleE9mKGVsZW1lbnQudHlwZS5tdWlOYW1lKSAhPT0gLTE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVxdWlyZVByb3AgPSBmdW5jdGlvbiByZXF1aXJlUHJvcChyZXF1aXJlZFByb3ApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJyAmJiAhcHJvcHNbcmVxdWlyZWRQcm9wXSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIHByb3AgYFwiLmNvbmNhdChwcm9wRnVsbE5hbWVTYWZlLCBcImAgb2YgXCIpICsgXCJgXCIuY29uY2F0KGNvbXBvbmVudE5hbWVJbkVycm9yLCBcImAgbXVzdCBiZSB1c2VkIG9uIGBcIikuY29uY2F0KHJlcXVpcmVkUHJvcCwgXCJgLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc3VwcG9ydGVkUHJvcChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgcHJvcCBgXCIuY29uY2F0KHByb3BGdWxsTmFtZVNhZmUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIGl0LlwiKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbWF0ZXJpYWwtdWkveCBwYWNrYWdlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKSxcbiAgICAgIGRlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldERlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSByYW5kb20gdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgc2V0RGVmYXVsdElkKFwibXVpLVwiLmNvbmNhdChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTUpKSk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn0iLCIvLyBUT0RPIHY1OiBjb25zaWRlciB0byBtYWtlIGl0IHByaXZhdGVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZChfcmVmKSB7XG4gIHZhciBjb250cm9sbGVkID0gX3JlZi5jb250cm9sbGVkLFxuICAgICAgZGVmYXVsdFByb3AgPSBfcmVmLmRlZmF1bHQsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgX3JlZiRzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBzdGF0ZSA9IF9yZWYkc3RhdGUgPT09IHZvaWQgMCA/ICd2YWx1ZScgOiBfcmVmJHN0YXRlO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKSxcbiAgICAgIHZhbHVlU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRWYWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgXCIuY29uY2F0KGlzQ29udHJvbGxlZCA/ICcnIDogJ3VuJywgXCJjb250cm9sbGVkIFwiKS5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIFwiKS5jb25jYXQobmFtZSwgXCIgdG8gYmUgXCIpLmNvbmNhdChpc0NvbnRyb2xsZWQgPyAndW4nIDogJycsIFwiY29udHJvbGxlZC5cIiksICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBcIkRlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiIFwiKSArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIsIGl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtjb250cm9sbGVkXSk7XG5cbiAgICB2YXIgX1JlYWN0JHVzZVJlZjIgPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfUmVhY3QkdXNlUmVmMi5jdXJyZW50O1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNDb250cm9sbGVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gZGVmYXVsdFByb3ApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgXCIuY29uY2F0KHN0YXRlLCBcIiBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgXCIpLmNvbmNhdChuYW1lLCBcIiBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gXCIpICsgXCJUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuXG4gIHZhciBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoMCwgcmVmLmN1cnJlbnQpLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSwgW10pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZihyZWZBLCByZWZCKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWYgcHJvcHMgY2hhbmdlIGFuZCBhcmUgZGVmaW5lZC5cbiAgICogVGhpcyBtZWFucyByZWFjdCB3aWxsIGNhbGwgdGhlIG9sZCBmb3JrUmVmIHdpdGggYG51bGxgIGFuZCB0aGUgbmV3IGZvcmtSZWZcbiAgICogd2l0aCB0aGUgcmVmLiBDbGVhbnVwIG5hdHVyYWxseSBlbWVyZ2VzIGZyb20gdGhpcyBiZWhhdmlvclxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZlZhbHVlKSB7XG4gICAgICBzZXRSZWYocmVmQSwgcmVmVmFsdWUpO1xuICAgICAgc2V0UmVmKHJlZkIsIHJlZlZhbHVlKTtcbiAgICB9O1xuICB9LCBbcmVmQSwgcmVmQl0pO1xufSIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG52YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xudmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KG5vZGUpIHtcbiAgdmFyIHR5cGUgPSBub2RlLnR5cGUsXG4gICAgICB0YWdOYW1lID0gbm9kZS50YWdOYW1lO1xuXG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuLyoqXG4gKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmICh0aGlzLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIGJyb3dzZXJzIG5vdCBpbXBsZW1lbnRpbmcgOmZvY3VzLXZpc2libGUgd2lsbCB0aHJvdyBhIFN5bnRheEVycm9yXG4gIC8vIHdlIHVzZSBvdXIgb3duIGhldXJpc3RpYyBmb3IgdGhvc2UgYnJvd3NlcnNcbiAgLy8gcmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIC8vIG5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIHRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5XG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZCBvbiBhIGZvY3VzLXZpc2libGUgZWxlbWVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlQmx1clZpc2libGUoKSB7XG4gIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICB9LCAxMDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuXG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZShpc0ZvY3VzVmlzaWJsZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlOiBpc0ZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXJWaXNpYmxlOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWY6IHJlZlxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0elwiXG59KSwgJ1NlYXJjaCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3V0aWxzLmNyZWF0ZVN2Z0ljb247XG4gIH1cbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS9jb3JlL3V0aWxzXCIpOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xudmFyIHRvQ3NzVmFsdWUgPSBmdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufTtcblxuLyoqXG4gKiBJbmRlbnQgYSBzdHJpbmcuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9hcnJheS1qb2luLXZzLWZvclxuICovXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG4gIGlmIChzZWxlY3RvcikgaW5kZW50Kys7IC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cblxuICBpZiAoZmFsbGJhY2tzKSB7XG4gICAgLy8gQXJyYXkgc3ludGF4IHtmYWxsYmFja3M6IFt7cHJvcDogdmFsdWV9XX1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmYWxsYmFja3MpKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBmYWxsYmFja3NbaW5kZXhdO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihwcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZSh2YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0IHN5bnRheCB7ZmFsbGJhY2tzOiB7cHJvcDogdmFsdWV9fVxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZmFsbGJhY2tzKSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBmYWxsYmFja3NbX3Byb3BdO1xuXG4gICAgICAgIGlmIChfdmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3Byb3AyIGluIHN0eWxlKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBzdHlsZVtfcHJvcDJdO1xuXG4gICAgaWYgKF92YWx1ZTIgIT0gbnVsbCAmJiBfcHJvcDIgIT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcDIgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZTIpICsgXCI7XCIsIGluZGVudCk7XG4gICAgfVxuICB9IC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG5cblxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0OyAvLyBXaGVuIHJ1bGUgaXMgYmVpbmcgc3RyaW5naWZpZWQgYmVmb3JlIHNlbGVjdG9yIHdhcyBkZWZpbmVkLlxuXG4gIGlmICghc2VsZWN0b3IpIHJldHVybiByZXN1bHQ7XG4gIGluZGVudC0tO1xuICBpZiAocmVzdWx0KSByZXN1bHQgPSBcIlxcblwiICsgcmVzdWx0ICsgXCJcXG5cIjtcbiAgcmV0dXJuIGluZGVudFN0cihzZWxlY3RvciArIFwiIHtcIiArIHJlc3VsdCwgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG59XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcbnZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBuYXRpdmVFc2NhcGUgPyBuYXRpdmVFc2NhcGUoc3RyKSA6IHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG59KTtcblxudmFyIEJhc2VTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNoZWV0KSB0aGlzLnJlbmRlcmVyID0gc2hlZXQucmVuZGVyZXI7ZWxzZSBpZiAoUmVuZGVyZXIpIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBCYXNlU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJvcCA9IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cblxuICAgIHZhciBmb3JjZSA9IG9wdGlvbnMgPyBvcHRpb25zLmZvcmNlIDogZmFsc2U7XG4gICAgaWYgKCFmb3JjZSAmJiB0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5wcm9jZXNzICE9PSBmYWxzZSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGlzRW1wdHkgPSBuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZTtcbiAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlOyAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuXG4gICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCAmJiAhZm9yY2UpIHJldHVybiB0aGlzOyAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG5cbiAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG4gICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gbmV3VmFsdWU7IC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cblxuICAgIGlmICh0aGlzLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIFJ1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VTdHlsZVJ1bGU7XG59KCk7XG52YXIgU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShTdHlsZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbCh0aGlzLCBrZXksIHN0eWxlLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHZvaWQgMDtcbiAgICBfdGhpcy5pZCA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IsXG4gICAgICAgIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSBpZiAoc2NvcGVkICE9PSBmYWxzZSkge1xuICAgICAgX3RoaXMuaWQgPSBnZW5lcmF0ZUlkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBzaGVldCk7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBcIi5cIiArIGVzY2FwZShfdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgKiBBdHRlbnRpb246IHVzZSB0aGlzIHdpdGggY2F1dGlvbi4gTW9zdCBicm93c2VycyBkaWRuJ3QgaW1wbGVtZW50XG4gICAqIHNlbGVjdG9yVGV4dCBzZXR0ZXIsIHNvIHRoaXMgbWF5IHJlc3VsdCBpbiByZXJlbmRlcmluZyBvZiBlbnRpcmUgU3R5bGUgU2hlZXQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgKi9cbiAgX3Byb3RvMi5hcHBseVRvID0gZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgcmVuZGVyZXIuc2V0UHJvcGVydHkocmVuZGVyYWJsZSwgcHJvcCwganNvbltwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVsZS5cbiAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKiBVc2VmdWwgZm9yIGlubGluZSBzdHlsZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIGpzb24gPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSBqc29uW3Byb3BdID0gdmFsdWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIGpzb25bcHJvcF0gPSB0b0Nzc1ZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuc2VsZWN0b3JUZXh0LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogXCJzZWxlY3RvclwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IHRoaXMuc2VsZWN0b3JUZXh0KSByZXR1cm47XG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJhYmxlO1xuICAgICAgaWYgKCFyZW5kZXJhYmxlIHx8ICFyZW5kZXJlcikgcmV0dXJuO1xuICAgICAgdmFyIGhhc0NoYW5nZWQgPSByZW5kZXJlci5zZXRTZWxlY3RvcihyZW5kZXJhYmxlLCBzZWxlY3Rvcik7IC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuXG4gICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmVuZGVyZXIucmVwbGFjZVJ1bGUocmVuZGVyYWJsZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBzZWxlY3RvciBzdHJpbmcuXG4gICAgICovXG4gICAgLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JUZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpblN0eWxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnIHx8IG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIGF0UmVnRXhwID0gL0AoW1xcdy1dKykvO1xuLyoqXG4gKiBDb25kaXRpb25hbCBydWxlIGZvciBAbWVkaWEsIEBzdXBwb3J0c1xuICovXG5cbnZhciBDb25kaXRpb25hbFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnY29uZGl0aW9uYWwnO1xuICAgIHRoaXMuYXQgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWVyeSA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWUgfHwgXCJAXCIgKyB0aGlzLmF0O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcblxuICAgIGlmICghcnVsZSB8fCAvLyBTdHlsZSBzaGVldCB3YXMgY3JlYXRlZCB3aXRob3V0IGxpbms6IHRydWUgYW5kIGF0dGFjaGVkLCBpbiB0aGlzIGNhc2Ugd2VcbiAgICAvLyB3b24ndCBiZSBhYmxlIHRvIHJlbW92ZSB0aGUgQ1NTIHJ1bGUgZnJvbSB0aGUgRE9NLlxuICAgIHRoaXMuYXR0YWNoZWQgJiYgIXJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgc2luZ2xlIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5ydWxlcy51cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB7XG4gICAgICBpbnRlcm5hbDogW10sXG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0cnkgPSB2b2lkIDA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgcmVnaXN0cnkgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsVGhpcyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpc1tuc10gPT0gbnVsbCkgZ2xvYmFsVGhpc1tuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbFRoaXNbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG52YXIgZ2V0UHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbnZhciBzZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn07XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkkMSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeSQxLmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5JDEsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCA9IGZ1bmN0aW9uIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KGNvbnRhaW5lciwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXR1cm4gbWF4SW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIC8vIFdpbGwgYmUgZW1wdHkgaWYgbGluazogdHJ1ZSBvcHRpb24gaXMgbm90IHNldCwgYmVjYXVzZVxuICAvLyBpdCBpcyBvbmx5IGZvciB1c2UgdG9nZXRoZXIgd2l0aCBpbnNlcnRSdWxlIEFQSS5cbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIHRoaXMuY3NzUnVsZXMgPSBbXTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHJlZ2lzdHJ5LmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXNbaW5kZXhdID0gY3NzUnVsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjUuMVwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSByZWdpc3RyeS5pbmRleCA9PT0gMCA/IDAgOiByZWdpc3RyeS5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgcmVnaXN0cnkucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGpzcyA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBqc3M7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgcmVnaXN0cnkgYXMgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCJ2YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCBuZXN0ZWQgZnJvbSAnLi4vVGhlbWVQcm92aWRlci9uZXN0ZWQnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBsaXN0IG9mIHRoZSBzdHlsZSBydWxlIG5hbWUgd2UgdXNlIGFzIGRyb3AgaW4gcmVwbGFjZW1lbnQgZm9yIHRoZSBidWlsdC1pblxuICogcHNldWRvIGNsYXNzZXMgKDpjaGVja2VkLCA6ZGlzYWJsZWQsIDpmb2N1c2VkLCBldGMuKS5cbiAqXG4gKiBXaHkgZG8gdGhleSBleGlzdCBpbiB0aGUgZmlyc3QgcGxhY2U/XG4gKiBUaGVzZSBjbGFzc2VzIGFyZSB1c2VkIGF0IGEgc3BlY2lmaWNpdHkgb2YgMi5cbiAqIEl0IGFsbG93cyB0aGVtIHRvIG92ZXJyaWRlIHByZXZpb3VzbHkgZGVmaW5pZWQgc3R5bGVzIGFzIHdlbGwgYXNcbiAqIGJlaW5nIHVudG91Y2hlZCBieSBzaW1wbGUgdXNlciBvdmVycmlkZXMuXG4gKi9cblxudmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTsgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkZGlzYWJsZUdsb2JhID0gb3B0aW9ucy5kaXNhYmxlR2xvYmFsLFxuICAgICAgZGlzYWJsZUdsb2JhbCA9IF9vcHRpb25zJGRpc2FibGVHbG9iYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkaXNhYmxlR2xvYmEsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcixcbiAgICAgIF9vcHRpb25zJHNlZWQgPSBvcHRpb25zLnNlZWQsXG4gICAgICBzZWVkID0gX29wdGlvbnMkc2VlZCA9PT0gdm9pZCAwID8gJycgOiBfb3B0aW9ucyRzZWVkO1xuICB2YXIgc2VlZFByZWZpeCA9IHNlZWQgPT09ICcnID8gJycgOiBcIlwiLmNvbmNhdChzZWVkLCBcIi1cIik7XG4gIHZhciBydWxlQ291bnRlciA9IDA7XG5cbiAgdmFyIGdldE5leHRDb3VudGVySWQgPSBmdW5jdGlvbiBnZXROZXh0Q291bnRlcklkKCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJ1bGVDb3VudGVyID49IDFlMTApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBydWxlQ291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydWxlQ291bnRlcjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgbmFtZSA9IHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lOyAvLyBJcyBhIGdsb2JhbCBzdGF0aWMgTVVJIHN0eWxlP1xuXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiAhc3R5bGVTaGVldC5vcHRpb25zLmxpbmsgJiYgIWRpc2FibGVHbG9iYWwpIHtcbiAgICAgIC8vIFdlIGNhbiB1c2UgYSBzaG9ydGhhbmQgY2xhc3MgbmFtZSwgd2UgbmV2ZXIgdXNlIHRoZSBrZXlzIHRvIHN0eWxlIHRoZSBjb21wb25lbnRzLlxuICAgICAgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihydWxlLmtleSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIk11aS1cIi5jb25jYXQocnVsZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4ID0gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQub3B0aW9ucy50aGVtZVtuZXN0ZWRdIHx8IHNlZWQgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICB2YXIgc3VmZml4ID0gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTsgLy8gSGVscCB3aXRoIGRlYnVnZ2FiaWxpdHkuXG5cbiAgICBpZiAoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LCBcIi1cIikuY29uY2F0KHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdWZmaXgpO1xuICB9O1xufSIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIG5vdyA9IERhdGUubm93KCk7XG52YXIgZm5WYWx1ZXNOcyA9IFwiZm5WYWx1ZXNcIiArIG5vdztcbnZhciBmblJ1bGVOcyA9IFwiZm5TdHlsZVwiICsgKytub3c7XG5cbnZhciBmdW5jdGlvblBsdWdpbiA9IGZ1bmN0aW9uIGZ1bmN0aW9uUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICAvLyBFbXB0eSBvYmplY3Qgd2lsbCByZW1vdmUgYWxsIGN1cnJlbnRseSBkZWZpbmVkIHByb3BzXG4gICAgICAgIC8vIGluIGNhc2UgZnVuY3Rpb24gcnVsZSByZXR1cm5zIGEgZmFsc3kgdmFsdWUuXG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKSB8fCB7fTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVJ1bGUuc3R5bGVbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25QbHVnaW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBSdWxlTGlzdCB9IGZyb20gJ2pzcyc7XG5cbnZhciBhdCA9ICdAZ2xvYmFsJztcbnZhciBhdFByZWZpeCA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKHJ1bGUpIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm47XG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NHbG9iYWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaW4gXFxcIlwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgcHJldk9wdGlvbnMpIHtcbiAgICAvLyBPcHRpb25zIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCwgbm93IHdlIG9ubHkgaW5jcmVhc2UgaW5kZXguXG4gICAgaWYgKHByZXZPcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZPcHRpb25zLCB7XG4gICAgICBpbmRleDogcHJldk9wdGlvbnMuaW5kZXggKyAxIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgfSk7XG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHJ1bGUub3B0aW9ucywge1xuICAgICAgbmVzdGluZ0xldmVsOiBuZXN0aW5nTGV2ZWwsXG4gICAgICBpbmRleDogY29udGFpbmVyLmluZGV4T2YocnVsZSkgKyAxIC8vIFdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCBuYW1lIHRvIGJlIHNldCBvcHRpb25zIGZvciBjaGxpZC5cblxuICAgIH0pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpIC8vIEZsb3cgZXhwZWN0cyBtb3JlIG9wdGlvbnMgYnV0IHRoZXkgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgIC8vIEFuZCBmbG93IGRvZXNuJ3Qga25vdyB0aGlzIHdpbGwgYWx3YXlzIGJlIGEgU3R5bGVSdWxlIHdoaWNoIGhhcyB0aGUgYWRkUnVsZSBtZXRob2RcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzTmVzdGVkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICdoeXBoZW5hdGUtc3R5bGUtbmFtZSc7XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIHZhciBrZXkgPSBwcm9wLmluZGV4T2YoJy0tJykgPT09IDAgPyBwcm9wIDogaHlwaGVuYXRlKHByb3ApO1xuICAgIGNvbnZlcnRlZFtrZXldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wLmluZGV4T2YoJy0tJykgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSBoeXBoZW5hdGUocHJvcCk7IC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG5cbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTsgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgeyBoYXNDU1NUT01TdXBwb3J0IH0gZnJvbSAnanNzJztcblxudmFyIHB4ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MubXMgOiAnbXMnO1xudmFyIHBlcmNlbnQgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5wZXJjZW50IDogJyUnO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLXBsdWdpbi1kZWZhdWx0LXVuaXQgQ1NTIHByb3BlcnR5IHVuaXRzXG4gKlxuICogQHR5cGUgb2JqZWN0XG4gKi9cblxudmFyIGRlZmF1bHRVbml0cyA9IHtcbiAgLy8gQW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgJ2FuaW1hdGlvbi1kZWxheSc6IG1zLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEJhY2tncm91bmQgcHJvcGVydGllc1xuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiBweCxcbiAgJ2JhY2tncm91bmQtc2l6ZSc6IHB4LFxuICAvLyBCb3JkZXIgUHJvcGVydGllc1xuICBib3JkZXI6IHB4LFxuICAnYm9yZGVyLWJvdHRvbSc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiBweCxcbiAgJ2JvcmRlci1sZWZ0JzogcHgsXG4gICdib3JkZXItbGVmdC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0JzogcHgsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci10b3AnOiBweCxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXdpZHRoJzogcHgsXG4gICdib3JkZXItd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jayc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZSc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0JzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXdpZHRoJzogcHgsXG4gICdib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItc3RhcnQtZW5kLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtZW5kLXJhZGl1cyc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrJzogcHgsXG4gICdtYXJnaW4tYmxvY2stZW5kJzogcHgsXG4gICdtYXJnaW4tYmxvY2stc3RhcnQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtZW5kJzogcHgsXG4gICdtYXJnaW4taW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLWVuZCc6IHB4LFxuICAncGFkZGluZy1ibG9jay1zdGFydCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLWVuZCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gTWFzayBwcm9wZXJ0aWVzXG4gICdtYXNrLXBvc2l0aW9uLXgnOiBweCxcbiAgJ21hc2stcG9zaXRpb24teSc6IHB4LFxuICAnbWFzay1zaXplJzogcHgsXG4gIC8vIFdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICBoZWlnaHQ6IHB4LFxuICB3aWR0aDogcHgsXG4gICdtaW4taGVpZ2h0JzogcHgsXG4gICdtYXgtaGVpZ2h0JzogcHgsXG4gICdtaW4td2lkdGgnOiBweCxcbiAgJ21heC13aWR0aCc6IHB4LFxuICAvLyBQb3NpdGlvbiBwcm9wZXJ0aWVzXG4gIGJvdHRvbTogcHgsXG4gIGxlZnQ6IHB4LFxuICB0b3A6IHB4LFxuICByaWdodDogcHgsXG4gIGluc2V0OiBweCxcbiAgJ2luc2V0LWJsb2NrJzogcHgsXG4gICdpbnNldC1ibG9jay1lbmQnOiBweCxcbiAgJ2luc2V0LWJsb2NrLXN0YXJ0JzogcHgsXG4gICdpbnNldC1pbmxpbmUnOiBweCxcbiAgJ2luc2V0LWlubGluZS1lbmQnOiBweCxcbiAgJ2luc2V0LWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIGdhcDogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdyb3ctZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07IC8vIEFkZCB0aGUgdW5pdCBpZiBhdmFpbGFibGUsIGV4Y2VwdCBmb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiAwcHguXG5cbiAgICBpZiAodW5pdCAmJiAhKHZhbHVlID09PSAwICYmIHVuaXQgPT09IHB4KSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCJpbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcblxuLy8gRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG52YXIganMgPSAnJztcbnZhciBjc3MgPSAnJztcbnZhciB2ZW5kb3IgPSAnJztcbnZhciBicm93c2VyID0gJyc7XG52YXIgaXNUb3VjaCA9IGlzSW5Ccm93c2VyICYmICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgLy8gT3JkZXIgbWF0dGVycy4gV2UgbmVlZCB0byBjaGVjayBXZWJraXQgdGhlIGxhc3Qgb25lIGJlY2F1c2VcbiAgLy8gb3RoZXIgdmVuZG9ycyB1c2UgdG8gYWRkIFdlYmtpdCBwcmVmaXhlcyB0byBzb21lIHByb3BlcnRpZXNcbiAgdmFyIGpzQ3NzTWFwID0ge1xuICAgIE1vejogJy1tb3otJyxcbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuXG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcblxuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcblxuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGpzID0ga2V5O1xuICAgICAgY3NzID0ganNDc3NNYXBba2V5XTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBFZGdlIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICdtc0h5cGhlbnMnIGluIHN0eWxlKSB7XG4gICAganMgPSAnbXMnO1xuICAgIGNzcyA9IGpzQ3NzTWFwLm1zO1xuICAgIGJyb3dzZXIgPSAnZWRnZSc7XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgU2FmYXJpIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICctYXBwbGUtdHJhaWxpbmctd29yZCcgaW4gc3R5bGUpIHtcbiAgICB2ZW5kb3IgPSAnYXBwbGUnO1xuICB9XG59XG4vKipcbiAqIFZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEB0eXBlIHt7anM6IFN0cmluZywgY3NzOiBTdHJpbmcsIHZlbmRvcjogU3RyaW5nLCBicm93c2VyOiBTdHJpbmd9fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbnZhciBwcmVmaXggPSB7XG4gIGpzOiBqcyxcbiAgY3NzOiBjc3MsXG4gIHZlbmRvcjogdmVuZG9yLFxuICBicm93c2VyOiBicm93c2VyLFxuICBpc1RvdWNoOiBpc1RvdWNoXG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYSBrZXlmcmFtZSBhdC1ydWxlIHNob3VsZCBiZSBwcmVmaXhlZCBvciBub3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZEtleWZyYW1lcyhrZXkpIHtcbiAgLy8gS2V5ZnJhbWVzIGlzIGFscmVhZHkgcHJlZml4ZWQuIGUuZy4ga2V5ID0gJ0Atd2Via2l0LWtleWZyYW1lcyBhJ1xuICBpZiAoa2V5WzFdID09PSAnLScpIHJldHVybiBrZXk7IC8vIE5vIG5lZWQgdG8gcHJlZml4IElFL0VkZ2UuIE9sZGVyIGJyb3dzZXJzIHdpbGwgaWdub3JlIHVuc3VwcG9ydGVkIHJ1bGVzLlxuICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9a2V5ZnJhbWVzXG5cbiAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIGtleTtcbiAgcmV0dXJuIFwiQFwiICsgcHJlZml4LmNzcyArIFwia2V5ZnJhbWVzXCIgKyBrZXkuc3Vic3RyKDEwKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWFwcGVhcmFuY2VcblxudmFyIGFwcGVhcmVuY2UgPSB7XG4gIG5vUHJlZmlsbDogWydhcHBlYXJhbmNlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdhcHBlYXJhbmNlJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNvbG9yLWFkanVzdFxuXG52YXIgY29sb3JBZGp1c3QgPSB7XG4gIG5vUHJlZmlsbDogWydjb2xvci1hZGp1c3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2NvbG9yLWFkanVzdCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JykgcmV0dXJuIHByZWZpeC5jc3MgKyBcInByaW50LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuLyoqXG4gKiBSZXBsYWNlcyB0aGUgbGV0dGVyIHdpdGggdGhlIGNhcGl0YWwgbGV0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gY1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwtY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIHBhc2NhbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXNjYWxpemUoc3RyKSB7XG4gIHJldHVybiBjYW1lbGl6ZShcIi1cIiArIHN0cik7XG59XG5cbi8vIGJ1dCB3ZSBjYW4gdXNlIGEgbG9uZ2hhbmQgcHJvcGVydHkgaW5zdGVhZC5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tYXNrXG5cbnZhciBtYXNrID0ge1xuICBub1ByZWZpbGw6IFsnbWFzayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9ebWFzay8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBsb25naGFuZCA9ICdtYXNrLWltYWdlJztcblxuICAgICAgaWYgKGNhbWVsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dGV4dC1vcmllbnRhdGlvblxuXG52YXIgdGV4dE9yaWVudGF0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndGV4dC1vcmllbnRhdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndGV4dC1vcmllbnRhdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnICYmICFwcmVmaXguaXNUb3VjaCkge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNmb3JtXG5cbnZhciB0cmFuc2Zvcm0gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2Zvcm0nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2Zvcm0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2l0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNpdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXdyaXRpbmctbW9kZVxuXG52YXIgd3JpdGluZ01vZGUgPSB7XG4gIG5vUHJlZmlsbDogWyd3cml0aW5nLW1vZGUnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3dyaXRpbmctbW9kZScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ21zJyAmJiBwcmVmaXguYnJvd3NlciAhPT0gJ2VkZ2UnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD11c2VyLXNlbGVjdFxuXG52YXIgdXNlclNlbGVjdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ3VzZXItc2VsZWN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd1c2VyLXNlbGVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onIHx8IHByZWZpeC5qcyA9PT0gJ21zJyB8fCBwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApOyAvLyBSZXR1cm4gY3VzdG9tIENTUyB2YXJpYWJsZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScpIHJldHVybiBwcm9wOyAvLyBSZXR1cm4gYWxyZWFkeSBwcmVmaXhlZCB2YWx1ZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScgJiYgcHJvcFsxXSA9PT0gJy0nKSByZXR1cm4gcHJvcDtcbiAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wOyAvLyBUcnkgd2Via2l0IGZhbGxiYWNrLlxuXG4gICAgaWYgKHByZWZpeC5qcyAhPT0gJ1dlYmtpdCcgJiYgXCJXZWJraXRcIiArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNjcm9sbC1zbmFwXG5cbnZhciBzY3JvbGxTbmFwID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wLnN1YnN0cmluZygwLCAxMSkgIT09ICdzY3JvbGwtc25hcCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBcIlwiICsgcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1vdmVyc2Nyb2xsLWJlaGF2aW9yXG5cbnZhciBvdmVyc2Nyb2xsQmVoYXZpb3IgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdvdmVyc2Nyb2xsLWJlaGF2aW9yJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBcInNjcm9sbC1jaGFpbmluZ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCA9IHtcbiAgJ2ZsZXgtZ3Jvdyc6ICdmbGV4LXBvc2l0aXZlJyxcbiAgJ2ZsZXgtc2hyaW5rJzogJ2ZsZXgtbmVnYXRpdmUnLFxuICAnZmxleC1iYXNpcyc6ICdmbGV4LXByZWZlcnJlZC1zaXplJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdmbGV4LXBhY2snLFxuICBvcmRlcjogJ2ZsZXgtb3JkZXInLFxuICAnYWxpZ24taXRlbXMnOiAnZmxleC1hbGlnbicsXG4gICdhbGlnbi1jb250ZW50JzogJ2ZsZXgtbGluZS1wYWNrJyAvLyAnYWxpZ24tc2VsZicgaXMgaGFuZGxlZCBieSAnYWxpZ24tc2VsZicgcGx1Z2luLlxuXG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDEyLlxuXG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcFtwcm9wXTtcbiAgICBpZiAoIW5ld1Byb3ApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByb3BNYXAkMSA9IHtcbiAgZmxleDogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZ3Jvdyc6ICdib3gtZmxleCcsXG4gICdmbGV4LWRpcmVjdGlvbic6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gIG9yZGVyOiAnYm94LW9yZGluYWwtZ3JvdXAnLFxuICAnYWxpZ24taXRlbXMnOiAnYm94LWFsaWduJyxcbiAgJ2ZsZXgtZmxvdyc6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnYm94LXBhY2snXG59O1xudmFyIHByb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcE1hcCQxKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgdXNlclNlbGVjdCwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICd2YXInKSByZXR1cm4gJ3Zhcic7XG4gIGlmIChwMSA9PT0gJ2FsbCcpIHJldHVybiAnYWxsJztcbiAgaWYgKHAyID09PSAnYWxsJykgcmV0dXJuICcsIGFsbCc7XG4gIHZhciBwcmVmaXhlZFZhbHVlID0gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG4gIGlmICghcHJlZml4ZWRWYWx1ZSkgcmV0dXJuIHAxIHx8IHAyO1xuICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbn1cblxuaWYgKGlzSW5Ccm93c2VyKSBlbCQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIGlmIG5lZWRlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgdmFyIHByZWZpeGVkVmFsdWUgPSB2YWx1ZTtcbiAgaWYgKCFlbCQxIHx8IHByb3BlcnR5ID09PSAnY29udGVudCcpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnO1xuaW1wb3J0IGpzc1ByZXNldCBmcm9tICcuLi9qc3NQcmVzZXQnOyAvLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cblxudmFyIGpzcyA9IGNyZWF0ZShqc3NQcmVzZXQoKSk7IC8vIFVzZSBhIHNpbmdsZXRvbiBvciB0aGUgcHJvdmlkZWQgb25lIGJ5IHRoZSBjb250ZXh0LlxuLy9cbi8vIFRoZSBjb3VudGVyLWJhc2VkIGFwcHJvYWNoIGRvZXNuJ3QgdG9sZXJhdGUgYW55IG1pc3Rha2UuXG4vLyBJdCdzIG11Y2ggc2FmZXIgdG8gdXNlIHRoZSBzYW1lIGNvdW50ZXIgZXZlcnl3aGVyZS5cblxudmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTsgLy8gRXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXNcblxuZXhwb3J0IHZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAganNzOiBqc3MsXG4gIHNoZWV0c0NhY2hlOiBudWxsLFxuICBzaGVldHNNYW5hZ2VyOiBzaGVldHNNYW5hZ2VyLFxuICBzaGVldHNSZWdpc3RyeTogbnVsbFxufTtcbmV4cG9ydCB2YXIgU3R5bGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdE9wdGlvbnMpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBTdHlsZXNDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1N0eWxlc0NvbnRleHQnO1xufVxuXG52YXIgaW5qZWN0Rmlyc3ROb2RlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3R5bGVzUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkaW5qZWN0Rmlyc3QgPSBwcm9wcy5pbmplY3RGaXJzdCxcbiAgICAgIGluamVjdEZpcnN0ID0gX3Byb3BzJGluamVjdEZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbmplY3RGaXJzdCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9IHByb3BzLmRpc2FibGVHZW5lcmF0aW9uLFxuICAgICAgZGlzYWJsZUdlbmVyYXRpb24gPSBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHZW5lcmF0LFxuICAgICAgbG9jYWxPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluamVjdEZpcnN0XCIsIFwiZGlzYWJsZUdlbmVyYXRpb25cIl0pO1xuXG4gIHZhciBvdXRlck9wdGlvbnMgPSBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpO1xuXG4gIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIG91dGVyT3B0aW9ucywge1xuICAgIGRpc2FibGVHZW5lcmF0aW9uOiBkaXNhYmxlR2VuZXJhdGlvblxuICB9LCBsb2NhbE9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmICFjb250ZXh0LnNoZWV0c01hbmFnZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIFNlcnZlclN0eWxlU2hlZXRzIEFQSSB3aGVuIHJlbmRlcmluZyBvbiB0aGUgc2VydmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSBhIGN1c3RvbSBpbnNlcnRpb25Qb2ludCBhbmQgPFN0eWxlc0NvbnRleHQgaW5qZWN0Rmlyc3Q+IGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW5qZWN0Rmlyc3QgJiYgbG9jYWxPcHRpb25zLmpzcykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIHRoZSBqc3MgYW5kIGluamVjdEZpcnN0IHByb3BzIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0ICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCFpbmplY3RGaXJzdE5vZGUpIHtcbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgIGluamVjdEZpcnN0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ211aS1pbmplY3QtZmlyc3QnKTtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGluamVjdEZpcnN0Tm9kZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmpzcyA9IGNyZWF0ZSh7XG4gICAgICBwbHVnaW5zOiBqc3NQcmVzZXQoKS5wbHVnaW5zLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IGluamVjdEZpcnN0Tm9kZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZGlzYWJsZSB0aGUgZ2VuZXJhdGlvbiBvZiB0aGUgc3R5bGVzIHdpdGggdGhpcyBvcHRpb24uXG4gICAqIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiB0cmF2ZXJzaW5nIHRoZSBSZWFjdCB0cmVlIG91dHNpZGUgb2YgdGhlIEhUTUxcbiAgICogcmVuZGVyaW5nIHN0ZXAgb24gdGhlIHNlcnZlci5cbiAgICogTGV0J3Mgc2F5IHlvdSBhcmUgdXNpbmcgcmVhY3QtYXBvbGxvIHRvIGV4dHJhY3QgYWxsXG4gICAqIHRoZSBxdWVyaWVzIG1hZGUgYnkgdGhlIGludGVyZmFjZSBzZXJ2ZXItc2lkZSAtIHlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wLlxuICAgKi9cbiAgZGlzYWJsZUdlbmVyYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBjbGFzcyBuYW1lIGdlbmVyYXRvci5cbiAgICovXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTWF0ZXJpYWwtVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGluc3RhbmNlLlxuICAgKi9cbiAganNzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQmV0YSBmZWF0dXJlLlxuICAgKlxuICAgKiBDYWNoZSBmb3IgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBDb2xsZWN0IHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNSZWdpc3RyeTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59IiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJ2pzcy1wbHVnaW4tbmVzdGVkJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgdmVuZG9yUHJlZml4ZXIgZnJvbSAnanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXInO1xuaW1wb3J0IHByb3BzU29ydCBmcm9tICdqc3MtcGx1Z2luLXByb3BzLXNvcnQnOyAvLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGpzc1ByZXNldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIGdsb2JhbCgpLCBuZXN0ZWQoKSwgY2FtZWxDYXNlKCksIGRlZmF1bHRVbml0KCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdmVuZG9yUHJlZml4ZXIoKSwgcHJvcHNTb3J0KCldXG4gIH07XG59IiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRWYWx1ZSwgc3VwcG9ydGVkUHJvcGVydHkgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSBzdXBwb3J0ZWRLZXlmcmFtZXMoYXRSdWxlLmF0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmaXhTdHlsZShzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcF0gPSB2YWx1ZS5tYXAocHJlZml4U3R5bGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZVByb3AgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcbiAgICAgIHZhciBjaGFuZ2VWYWx1ZSA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFZhbHVlJDEgPSBzdXBwb3J0ZWRWYWx1ZShzdXBwb3J0ZWRQcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSk7XG4gICAgICBpZiAoc3VwcG9ydGVkVmFsdWUkMSAmJiBzdXBwb3J0ZWRWYWx1ZSQxICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUkMSB8fCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICByZXR1cm4gcHJlZml4U3R5bGUoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWRWYWx1ZShwcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSkgfHwgdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUsXG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzVmVuZG9yUHJlZml4ZXI7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG5cbiAgcmV0dXJuIHVzZVN0eWxlcztcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAmJiBfdHlwZW9mKGl0ZW0pID09PSAnb2JqZWN0JyAmJiBpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICBjbG9uZTogdHJ1ZVxuICB9O1xuICB2YXIgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuXG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbWF0ZXJpYWwtdWkvdXRpbHMvbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZmYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIHZhciB1cmwgPSAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTWF0ZXJpYWwtVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZm9yY2VWaXNpYmxlID0gZXhwb3J0cy5mb3JjZUNoZWNrID0gZXhwb3J0cy5sYXp5bG9hZCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ldmVudCA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKTtcblxudmFyIF9zY3JvbGxQYXJlbnQgPSByZXF1aXJlKCcuL3V0aWxzL3Njcm9sbFBhcmVudCcpO1xuXG52YXIgX3Njcm9sbFBhcmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY3JvbGxQYXJlbnQpO1xuXG52YXIgX2RlYm91bmNlID0gcmVxdWlyZSgnLi91dGlscy9kZWJvdW5jZScpO1xuXG52YXIgX2RlYm91bmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYm91bmNlKTtcblxudmFyIF90aHJvdHRsZSA9IHJlcXVpcmUoJy4vdXRpbHMvdGhyb3R0bGUnKTtcblxudmFyIF90aHJvdHRsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90aHJvdHRsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiByZWFjdC1sYXp5bG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cblxudmFyIGRlZmF1bHRCb3VuZGluZ0NsaWVudFJlY3QgPSB7XG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6IDAsXG4gIGhlaWdodDogMFxufTtcbnZhciBMSVNURU5fRkxBRyA9ICdkYXRhLWxhenlsb2FkLWxpc3RlbmVkJztcbnZhciBsaXN0ZW5lcnMgPSBbXTtcbnZhciBwZW5kaW5nID0gW107XG5cbi8vIHRyeSB0byBoYW5kbGUgcGFzc2l2ZSBldmVudHNcbnZhciBwYXNzaXZlRXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcbnRyeSB7XG4gIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHBhc3NpdmVFdmVudFN1cHBvcnRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTtcbn0gY2F0Y2ggKGUpIHt9XG4vLyBpZiB0aGV5IGFyZSBzdXBwb3J0ZWQsIHNldHVwIHRoZSBvcHRpb25hbCBwYXJhbXNcbi8vIElNUE9SVEFOVDogRkFMU0UgZG91YmxlcyBhcyB0aGUgZGVmYXVsdCBDQVBUVVJFIHZhbHVlIVxudmFyIHBhc3NpdmVFdmVudCA9IHBhc3NpdmVFdmVudFN1cHBvcnRlZCA/IHsgY2FwdHVyZTogZmFsc2UsIHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuXG4vKipcbiAqIENoZWNrIGlmIGBjb21wb25lbnRgIGlzIHZpc2libGUgaW4gb3ZlcmZsb3cgY29udGFpbmVyIGBwYXJlbnRgXG4gKiBAcGFyYW0gIHtub2RlfSBjb21wb25lbnQgUmVhY3QgY29tcG9uZW50XG4gKiBAcGFyYW0gIHtub2RlfSBwYXJlbnQgICAgY29tcG9uZW50J3Mgc2Nyb2xsIHBhcmVudFxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xudmFyIGNoZWNrT3ZlcmZsb3dWaXNpYmxlID0gZnVuY3Rpb24gY2hlY2tPdmVyZmxvd1Zpc2libGUoY29tcG9uZW50LCBwYXJlbnQpIHtcbiAgdmFyIG5vZGUgPSBjb21wb25lbnQucmVmO1xuXG4gIHZhciBwYXJlbnRUb3AgPSB2b2lkIDA7XG4gIHZhciBwYXJlbnRMZWZ0ID0gdm9pZCAwO1xuICB2YXIgcGFyZW50SGVpZ2h0ID0gdm9pZCAwO1xuICB2YXIgcGFyZW50V2lkdGggPSB2b2lkIDA7XG5cbiAgdHJ5IHtcbiAgICB2YXIgX3BhcmVudCRnZXRCb3VuZGluZ0NsID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgcGFyZW50VG9wID0gX3BhcmVudCRnZXRCb3VuZGluZ0NsLnRvcDtcbiAgICBwYXJlbnRMZWZ0ID0gX3BhcmVudCRnZXRCb3VuZGluZ0NsLmxlZnQ7XG4gICAgcGFyZW50SGVpZ2h0ID0gX3BhcmVudCRnZXRCb3VuZGluZ0NsLmhlaWdodDtcbiAgICBwYXJlbnRXaWR0aCA9IF9wYXJlbnQkZ2V0Qm91bmRpbmdDbC53aWR0aDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHBhcmVudFRvcCA9IGRlZmF1bHRCb3VuZGluZ0NsaWVudFJlY3QudG9wO1xuICAgIHBhcmVudExlZnQgPSBkZWZhdWx0Qm91bmRpbmdDbGllbnRSZWN0LmxlZnQ7XG4gICAgcGFyZW50SGVpZ2h0ID0gZGVmYXVsdEJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG4gICAgcGFyZW50V2lkdGggPSBkZWZhdWx0Qm91bmRpbmdDbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgdmFyIHdpbmRvd0lubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHZhciB3aW5kb3dJbm5lcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuXG4gIC8vIGNhbGN1bGF0ZSB0b3AgYW5kIGhlaWdodCBvZiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBlbGVtZW50J3Mgc2Nyb2xsUGFyZW50IGFuZCB2aWV3cG9ydFxuICB2YXIgaW50ZXJzZWN0aW9uVG9wID0gTWF0aC5tYXgocGFyZW50VG9wLCAwKTsgLy8gaW50ZXJzZWN0aW9uJ3MgdG9wIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG4gIHZhciBpbnRlcnNlY3Rpb25MZWZ0ID0gTWF0aC5tYXgocGFyZW50TGVmdCwgMCk7IC8vIGludGVyc2VjdGlvbidzIGxlZnQgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAgdmFyIGludGVyc2VjdGlvbkhlaWdodCA9IE1hdGgubWluKHdpbmRvd0lubmVySGVpZ2h0LCBwYXJlbnRUb3AgKyBwYXJlbnRIZWlnaHQpIC0gaW50ZXJzZWN0aW9uVG9wOyAvLyBoZWlnaHRcbiAgdmFyIGludGVyc2VjdGlvbldpZHRoID0gTWF0aC5taW4od2luZG93SW5uZXJXaWR0aCwgcGFyZW50TGVmdCArIHBhcmVudFdpZHRoKSAtIGludGVyc2VjdGlvbkxlZnQ7IC8vIHdpZHRoXG5cbiAgLy8gY2hlY2sgd2hldGhlciB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIHRoZSBpbnRlcnNlY3Rpb25cbiAgdmFyIHRvcCA9IHZvaWQgMDtcbiAgdmFyIGxlZnQgPSB2b2lkIDA7XG4gIHZhciBoZWlnaHQgPSB2b2lkIDA7XG4gIHZhciB3aWR0aCA9IHZvaWQgMDtcblxuICB0cnkge1xuICAgIHZhciBfbm9kZSRnZXRCb3VuZGluZ0NsaWUgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgdG9wID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllLnRvcDtcbiAgICBsZWZ0ID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllLmxlZnQ7XG4gICAgaGVpZ2h0ID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllLmhlaWdodDtcbiAgICB3aWR0aCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS53aWR0aDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRvcCA9IGRlZmF1bHRCb3VuZGluZ0NsaWVudFJlY3QudG9wO1xuICAgIGxlZnQgPSBkZWZhdWx0Qm91bmRpbmdDbGllbnRSZWN0LmxlZnQ7XG4gICAgaGVpZ2h0ID0gZGVmYXVsdEJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBkZWZhdWx0Qm91bmRpbmdDbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgdmFyIG9mZnNldFRvcCA9IHRvcCAtIGludGVyc2VjdGlvblRvcDsgLy8gZWxlbWVudCdzIHRvcCByZWxhdGl2ZSB0byBpbnRlcnNlY3Rpb25cbiAgdmFyIG9mZnNldExlZnQgPSBsZWZ0IC0gaW50ZXJzZWN0aW9uTGVmdDsgLy8gZWxlbWVudCdzIGxlZnQgcmVsYXRpdmUgdG8gaW50ZXJzZWN0aW9uXG5cbiAgdmFyIG9mZnNldHMgPSBBcnJheS5pc0FycmF5KGNvbXBvbmVudC5wcm9wcy5vZmZzZXQpID8gY29tcG9uZW50LnByb3BzLm9mZnNldCA6IFtjb21wb25lbnQucHJvcHMub2Zmc2V0LCBjb21wb25lbnQucHJvcHMub2Zmc2V0XTsgLy8gQmUgY29tcGF0aWJsZSB3aXRoIHByZXZpb3VzIEFQSVxuXG4gIHJldHVybiBvZmZzZXRUb3AgLSBvZmZzZXRzWzBdIDw9IGludGVyc2VjdGlvbkhlaWdodCAmJiBvZmZzZXRUb3AgKyBoZWlnaHQgKyBvZmZzZXRzWzFdID49IDAgJiYgb2Zmc2V0TGVmdCAtIG9mZnNldHNbMF0gPD0gaW50ZXJzZWN0aW9uV2lkdGggJiYgb2Zmc2V0TGVmdCArIHdpZHRoICsgb2Zmc2V0c1sxXSA+PSAwO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgY29tcG9uZW50YCBpcyB2aXNpYmxlIGluIGRvY3VtZW50XG4gKiBAcGFyYW0gIHtub2RlfSBjb21wb25lbnQgUmVhY3QgY29tcG9uZW50XG4gKiBAcmV0dXJuIHtib29sfVxuICovXG52YXIgY2hlY2tOb3JtYWxWaXNpYmxlID0gZnVuY3Rpb24gY2hlY2tOb3JtYWxWaXNpYmxlKGNvbXBvbmVudCkge1xuICB2YXIgbm9kZSA9IGNvbXBvbmVudC5yZWY7XG5cbiAgLy8gSWYgdGhpcyBlbGVtZW50IGlzIGhpZGRlbiBieSBjc3MgcnVsZXMgc29tZWhvdywgaXQncyBkZWZpbml0ZWx5IGludmlzaWJsZVxuICBpZiAoIShub2RlLm9mZnNldFdpZHRoIHx8IG5vZGUub2Zmc2V0SGVpZ2h0IHx8IG5vZGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHRvcCA9IHZvaWQgMDtcbiAgdmFyIGVsZW1lbnRIZWlnaHQgPSB2b2lkIDA7XG5cbiAgdHJ5IHtcbiAgICB2YXIgX25vZGUkZ2V0Qm91bmRpbmdDbGllMiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB0b3AgPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUyLnRvcDtcbiAgICBlbGVtZW50SGVpZ2h0ID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllMi5oZWlnaHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0b3AgPSBkZWZhdWx0Qm91bmRpbmdDbGllbnRSZWN0LnRvcDtcbiAgICBlbGVtZW50SGVpZ2h0ID0gZGVmYXVsdEJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICB2YXIgd2luZG93SW5uZXJIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICB2YXIgb2Zmc2V0cyA9IEFycmF5LmlzQXJyYXkoY29tcG9uZW50LnByb3BzLm9mZnNldCkgPyBjb21wb25lbnQucHJvcHMub2Zmc2V0IDogW2NvbXBvbmVudC5wcm9wcy5vZmZzZXQsIGNvbXBvbmVudC5wcm9wcy5vZmZzZXRdOyAvLyBCZSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXMgQVBJXG5cbiAgcmV0dXJuIHRvcCAtIG9mZnNldHNbMF0gPD0gd2luZG93SW5uZXJIZWlnaHQgJiYgdG9wICsgZWxlbWVudEhlaWdodCArIG9mZnNldHNbMV0gPj0gMDtcbn07XG5cbi8qKlxuICogRGV0ZWN0IGlmIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiB2aWV3cG9ydCwgaWYgc28sIHNldCBgdmlzaWJsZWAgc3RhdGUgdG8gdHJ1ZS5cbiAqIElmIGBvbmNlYCBwcm9wIGlzIHByb3ZpZGVkIHRydWUsIHJlbW92ZSBjb21wb25lbnQgYXMgbGlzdGVuZXIgYWZ0ZXIgY2hlY2tWaXNpYmxlXG4gKlxuICogQHBhcmFtICB7UmVhY3R9IGNvbXBvbmVudCAgIFJlYWN0IGNvbXBvbmVudCB0aGF0IHJlc3BvbmQgdG8gc2Nyb2xsIGFuZCByZXNpemVcbiAqL1xudmFyIGNoZWNrVmlzaWJsZSA9IGZ1bmN0aW9uIGNoZWNrVmlzaWJsZShjb21wb25lbnQpIHtcbiAgdmFyIG5vZGUgPSBjb21wb25lbnQucmVmO1xuICBpZiAoIShub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhcmVudCA9ICgwLCBfc2Nyb2xsUGFyZW50Mi5kZWZhdWx0KShub2RlKTtcbiAgdmFyIGlzT3ZlcmZsb3cgPSBjb21wb25lbnQucHJvcHMub3ZlcmZsb3cgJiYgcGFyZW50ICE9PSBub2RlLm93bmVyRG9jdW1lbnQgJiYgcGFyZW50ICE9PSBkb2N1bWVudCAmJiBwYXJlbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHZpc2libGUgPSBpc092ZXJmbG93ID8gY2hlY2tPdmVyZmxvd1Zpc2libGUoY29tcG9uZW50LCBwYXJlbnQpIDogY2hlY2tOb3JtYWxWaXNpYmxlKGNvbXBvbmVudCk7XG4gIGlmICh2aXNpYmxlKSB7XG4gICAgLy8gQXZvaWQgZXh0cmEgcmVuZGVyIGlmIHByZXZpb3VzbHkgaXMgdmlzaWJsZVxuICAgIGlmICghY29tcG9uZW50LnZpc2libGUpIHtcbiAgICAgIGlmIChjb21wb25lbnQucHJvcHMub25jZSkge1xuICAgICAgICBwZW5kaW5nLnB1c2goY29tcG9uZW50KTtcbiAgICAgIH1cblxuICAgICAgY29tcG9uZW50LnZpc2libGUgPSB0cnVlO1xuICAgICAgY29tcG9uZW50LmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCEoY29tcG9uZW50LnByb3BzLm9uY2UgJiYgY29tcG9uZW50LnZpc2libGUpKSB7XG4gICAgY29tcG9uZW50LnZpc2libGUgPSBmYWxzZTtcbiAgICBpZiAoY29tcG9uZW50LnByb3BzLnVubW91bnRJZkludmlzaWJsZSkge1xuICAgICAgY29tcG9uZW50LmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcHVyZ2VQZW5kaW5nID0gZnVuY3Rpb24gcHVyZ2VQZW5kaW5nKCkge1xuICBwZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNvbXBvbmVudCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9KTtcblxuICBwZW5kaW5nID0gW107XG59O1xuXG52YXIgbGF6eUxvYWRIYW5kbGVyID0gZnVuY3Rpb24gbGF6eUxvYWRIYW5kbGVyKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICBjaGVja1Zpc2libGUobGlzdGVuZXIpO1xuICB9XG4gIC8vIFJlbW92ZSBgb25jZWAgY29tcG9uZW50IGluIGxpc3RlbmVyc1xuICBwdXJnZVBlbmRpbmcoKTtcbn07XG5cbi8qKlxuICogRm9yY2VzIHRoZSBjb21wb25lbnQgdG8gZGlzcGxheSByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiB0aGUgdmlld3BvcnQuXG4gKi9cbnZhciBmb3JjZVZpc2libGUgPSBmdW5jdGlvbiBmb3JjZVZpc2libGUoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgIGxpc3RlbmVyLnZpc2libGUgPSB0cnVlO1xuICAgIGxpc3RlbmVyLmZvcmNlVXBkYXRlKCk7XG4gIH1cbiAgLy8gUmVtb3ZlIGBvbmNlYCBjb21wb25lbnQgaW4gbGlzdGVuZXJzXG4gIHB1cmdlUGVuZGluZygpO1xufTtcblxuLy8gRGVwZW5kaW5nIG9uIGNvbXBvbmVudCdzIHByb3BzXG52YXIgZGVsYXlUeXBlID0gdm9pZCAwO1xudmFyIGZpbmFsTGF6eUxvYWRIYW5kbGVyID0gbnVsbDtcblxudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcoc3RyaW5nKSB7XG4gIHJldHVybiB0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJztcbn07XG5cbnZhciBMYXp5TG9hZCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMYXp5TG9hZCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGF6eUxvYWQocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGF6eUxvYWQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExhenlMb2FkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGF6eUxvYWQpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgX3RoaXMuc2V0UmVmID0gX3RoaXMuc2V0UmVmLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMYXp5TG9hZCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgLy8gSXQncyB1bmxpa2VseSB0byBjaGFuZ2UgZGVsYXkgdHlwZSBvbiB0aGUgZmx5LCB0aGlzIGlzIG1haW5seVxuICAgICAgLy8gZGVzaWduZWQgZm9yIHRlc3RzXG4gICAgICB2YXIgc2Nyb2xscG9ydCA9IHdpbmRvdztcbiAgICAgIHZhciBzY3JvbGxDb250YWluZXIgPSB0aGlzLnByb3BzLnNjcm9sbENvbnRhaW5lcjtcblxuICAgICAgaWYgKHNjcm9sbENvbnRhaW5lcikge1xuICAgICAgICBpZiAoaXNTdHJpbmcoc2Nyb2xsQ29udGFpbmVyKSkge1xuICAgICAgICAgIHNjcm9sbHBvcnQgPSBzY3JvbGxwb3J0LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG5lZWRSZXNldEZpbmFsTGF6eUxvYWRIYW5kbGVyID0gdGhpcy5wcm9wcy5kZWJvdW5jZSAhPT0gdW5kZWZpbmVkICYmIGRlbGF5VHlwZSA9PT0gJ3Rocm90dGxlJyB8fCBkZWxheVR5cGUgPT09ICdkZWJvdW5jZScgJiYgdGhpcy5wcm9wcy5kZWJvdW5jZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAobmVlZFJlc2V0RmluYWxMYXp5TG9hZEhhbmRsZXIpIHtcbiAgICAgICAgKDAsIF9ldmVudC5vZmYpKHNjcm9sbHBvcnQsICdzY3JvbGwnLCBmaW5hbExhenlMb2FkSGFuZGxlciwgcGFzc2l2ZUV2ZW50KTtcbiAgICAgICAgKDAsIF9ldmVudC5vZmYpKHdpbmRvdywgJ3Jlc2l6ZScsIGZpbmFsTGF6eUxvYWRIYW5kbGVyLCBwYXNzaXZlRXZlbnQpO1xuICAgICAgICBmaW5hbExhenlMb2FkSGFuZGxlciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghZmluYWxMYXp5TG9hZEhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGVib3VuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZpbmFsTGF6eUxvYWRIYW5kbGVyID0gKDAsIF9kZWJvdW5jZTIuZGVmYXVsdCkobGF6eUxvYWRIYW5kbGVyLCB0eXBlb2YgdGhpcy5wcm9wcy5kZWJvdW5jZSA9PT0gJ251bWJlcicgPyB0aGlzLnByb3BzLmRlYm91bmNlIDogMzAwKTtcbiAgICAgICAgICBkZWxheVR5cGUgPSAnZGVib3VuY2UnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudGhyb3R0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZpbmFsTGF6eUxvYWRIYW5kbGVyID0gKDAsIF90aHJvdHRsZTIuZGVmYXVsdCkobGF6eUxvYWRIYW5kbGVyLCB0eXBlb2YgdGhpcy5wcm9wcy50aHJvdHRsZSA9PT0gJ251bWJlcicgPyB0aGlzLnByb3BzLnRocm90dGxlIDogMzAwKTtcbiAgICAgICAgICBkZWxheVR5cGUgPSAndGhyb3R0bGUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbmFsTGF6eUxvYWRIYW5kbGVyID0gbGF6eUxvYWRIYW5kbGVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm92ZXJmbG93KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSAoMCwgX3Njcm9sbFBhcmVudDIuZGVmYXVsdCkodGhpcy5yZWYpO1xuICAgICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBwYXJlbnQuZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGxpc3RlbmVyQ291bnQgPSAxICsgK3BhcmVudC5nZXRBdHRyaWJ1dGUoTElTVEVOX0ZMQUcpO1xuICAgICAgICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZmluYWxMYXp5TG9hZEhhbmRsZXIsIHBhc3NpdmVFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5zZXRBdHRyaWJ1dGUoTElTVEVOX0ZMQUcsIGxpc3RlbmVyQ291bnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDAgfHwgbmVlZFJlc2V0RmluYWxMYXp5TG9hZEhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzY3JvbGwgPSBfcHJvcHMuc2Nyb2xsLFxuICAgICAgICAgICAgcmVzaXplID0gX3Byb3BzLnJlc2l6ZTtcblxuXG4gICAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgICAoMCwgX2V2ZW50Lm9uKShzY3JvbGxwb3J0LCAnc2Nyb2xsJywgZmluYWxMYXp5TG9hZEhhbmRsZXIsIHBhc3NpdmVFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzaXplKSB7XG4gICAgICAgICAgKDAsIF9ldmVudC5vbikod2luZG93LCAncmVzaXplJywgZmluYWxMYXp5TG9hZEhhbmRsZXIsIHBhc3NpdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzLnB1c2godGhpcyk7XG4gICAgICBjaGVja1Zpc2libGUodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub3ZlcmZsb3cpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9ICgwLCBfc2Nyb2xsUGFyZW50Mi5kZWZhdWx0KSh0aGlzLnJlZik7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgdHlwZW9mIHBhcmVudC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJDb3VudCA9ICtwYXJlbnQuZ2V0QXR0cmlidXRlKExJU1RFTl9GTEFHKSAtIDE7XG4gICAgICAgICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmaW5hbExhenlMb2FkSGFuZGxlciwgcGFzc2l2ZUV2ZW50KTtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVBdHRyaWJ1dGUoTElTVEVOX0ZMQUcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnQuc2V0QXR0cmlidXRlKExJU1RFTl9GTEFHLCBsaXN0ZW5lckNvdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCA9PT0gMCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAoMCwgX2V2ZW50Lm9mZikod2luZG93LCAncmVzaXplJywgZmluYWxMYXp5TG9hZEhhbmRsZXIsIHBhc3NpdmVFdmVudCk7XG4gICAgICAgICgwLCBfZXZlbnQub2ZmKSh3aW5kb3csICdzY3JvbGwnLCBmaW5hbExhenlMb2FkSGFuZGxlciwgcGFzc2l2ZUV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRSZWYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZWYoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5yZWYgPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBoZWlnaHQgPSBfcHJvcHMyLmhlaWdodCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfcHJvcHMyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIGNsYXNzTmFtZVByZWZpeCA9IF9wcm9wczIuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzMi5zdHlsZTtcblxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lUHJlZml4ICsgJy13cmFwcGVyJywgcmVmOiB0aGlzLnNldFJlZiwgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgIHRoaXMudmlzaWJsZSA/IGNoaWxkcmVuIDogcGxhY2Vob2xkZXIgPyBwbGFjZWhvbGRlciA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgc3R5bGU6IHsgaGVpZ2h0OiBoZWlnaHQgfSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByZWZpeCArICctcGxhY2Vob2xkZXInXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYXp5TG9hZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkxhenlMb2FkLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lUHJlZml4OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb25jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmddKSxcbiAgb2Zmc2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcildKSxcbiAgb3ZlcmZsb3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcmVzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNjcm9sbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICB0aHJvdHRsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xdKSxcbiAgZGVib3VuY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXSksXG4gIHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIHNjcm9sbENvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLFxuICB1bm1vdW50SWZJbnZpc2libGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5MYXp5TG9hZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZVByZWZpeDogJ2xhenlsb2FkJyxcbiAgb25jZTogZmFsc2UsXG4gIG9mZnNldDogMCxcbiAgb3ZlcmZsb3c6IGZhbHNlLFxuICByZXNpemU6IGZhbHNlLFxuICBzY3JvbGw6IHRydWUsXG4gIHVubW91bnRJZkludmlzaWJsZTogZmFsc2Vcbn07XG5cbnZhciBnZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufTtcblxudmFyIGRlY29yYXRvciA9IGZ1bmN0aW9uIGRlY29yYXRvcigpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbGF6eWxvYWQoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICAgIF9pbmhlcml0cyhMYXp5TG9hZERlY29yYXRlZCwgX0NvbXBvbmVudDIpO1xuXG4gICAgICBmdW5jdGlvbiBMYXp5TG9hZERlY29yYXRlZCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhenlMb2FkRGVjb3JhdGVkKTtcblxuICAgICAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExhenlMb2FkRGVjb3JhdGVkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGF6eUxvYWREZWNvcmF0ZWQpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgICBfdGhpczIuZGlzcGxheU5hbWUgPSAnTGF6eUxvYWQnICsgZ2V0RGlzcGxheU5hbWUoV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBfdGhpczI7XG4gICAgICB9XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhMYXp5TG9hZERlY29yYXRlZCwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBMYXp5TG9hZCxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLnByb3BzKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIExhenlMb2FkRGVjb3JhdGVkO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG4gIH07XG59O1xuXG5leHBvcnRzLmxhenlsb2FkID0gZGVjb3JhdG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGF6eUxvYWQ7XG5leHBvcnRzLmZvcmNlQ2hlY2sgPSBsYXp5TG9hZEhhbmRsZXI7XG5leHBvcnRzLmZvcmNlVmlzaWJsZSA9IGZvcmNlVmlzaWJsZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlYm91bmNlO1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0ID0gdm9pZCAwO1xuICB2YXIgYXJncyA9IHZvaWQgMDtcbiAgdmFyIGNvbnRleHQgPSB2b2lkIDA7XG4gIHZhciB0aW1lc3RhbXAgPSB2b2lkIDA7XG4gIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cbiAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgdmFyIGxhc3QgPSArbmV3IERhdGUoKSAtIHRpbWVzdGFtcDtcblxuICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgYXJncyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICBjb250ZXh0ID0gdGhpcztcbiAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHRpbWVzdGFtcCA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgfVxuXG4gICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgIGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm9uID0gb247XG5leHBvcnRzLm9mZiA9IG9mZjtcbmZ1bmN0aW9uIG9uKGVsLCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IGZhbHNlO1xuICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0cyk7XG4gIH0gZWxzZSBpZiAoZWwuYXR0YWNoRXZlbnQpIHtcbiAgICBlbC5hdHRhY2hFdmVudChcIm9uXCIgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKGVsLCBlIHx8IHdpbmRvdy5ldmVudCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb2ZmKGVsLCBldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IGZhbHNlO1xuICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0cyk7XG4gIH0gZWxzZSBpZiAoZWwuZGV0YWNoRXZlbnQpIHtcbiAgICBlbC5kZXRhY2hFdmVudChcIm9uXCIgKyBldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuLyoqXG4gKiBAZmlsZU92ZXJ2aWV3IEZpbmQgc2Nyb2xsIHBhcmVudFxuICovXG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmICghKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIGV4Y2x1ZGVTdGF0aWNQYXJlbnQgPSBub2RlLnN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnO1xuICB2YXIgb3ZlcmZsb3dSZWdleCA9IC8oc2Nyb2xsfGF1dG8pLztcbiAgdmFyIHBhcmVudCA9IG5vZGU7XG5cbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmICghcGFyZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7XG4gICAgdmFyIHBvc2l0aW9uID0gc3R5bGUucG9zaXRpb247XG4gICAgdmFyIG92ZXJmbG93ID0gc3R5bGUub3ZlcmZsb3c7XG4gICAgdmFyIG92ZXJmbG93WCA9IHN0eWxlWydvdmVyZmxvdy14J107XG4gICAgdmFyIG92ZXJmbG93WSA9IHN0eWxlWydvdmVyZmxvdy15J107XG5cbiAgICBpZiAocG9zaXRpb24gPT09ICdzdGF0aWMnICYmIGV4Y2x1ZGVTdGF0aWNQYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93UmVnZXgudGVzdChvdmVyZmxvdykgJiYgb3ZlcmZsb3dSZWdleC50ZXN0KG92ZXJmbG93WCkgJiYgb3ZlcmZsb3dSZWdleC50ZXN0KG92ZXJmbG93WSkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0aHJvdHRsZTtcbi8qZXNsaW50LWRpc2FibGUgKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCB0aHJlc2hob2xkLCBzY29wZSkge1xuICB0aHJlc2hob2xkIHx8ICh0aHJlc2hob2xkID0gMjUwKTtcbiAgdmFyIGxhc3QsIGRlZmVyVGltZXI7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuXG4gICAgdmFyIG5vdyA9ICtuZXcgRGF0ZSgpLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkKSB7XG4gICAgICAvLyBob2xkIG9uIHRvIGl0XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBub3c7XG4gICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gIH07XG59IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlR3V0dGVyczoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZml4ZWQ9e3RydWV9YC4gKi9cbiAgICBmaXhlZDogT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgICBtYXhXaWR0aDogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInhzXCJgLiAqL1xuICAgIG1heFdpZHRoWHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hzJyksIHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwic21cImAuICovXG4gICAgbWF4V2lkdGhTbTogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJtZFwiYC4gKi9cbiAgICBtYXhXaWR0aE1kOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cImxnXCJgLiAqL1xuICAgIG1heFdpZHRoTGc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ2xnJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieGxcImAuICovXG4gICAgbWF4V2lkdGhYbDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneGwnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bFxuICAgIH0pXG4gIH07XG59O1xudmFyIENvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbnRhaW5lcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyRmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgZml4ZWQgPSBfcHJvcHMkZml4ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZpeGVkLFxuICAgICAgX3Byb3BzJG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IF9wcm9wcyRtYXhXaWR0aCA9PT0gdm9pZCAwID8gJ2xnJyA6IF9wcm9wcyRtYXhXaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmaXhlZFwiLCBcIm1heFdpZHRoXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmaXhlZCAmJiBjbGFzc2VzLmZpeGVkLCBkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmRpc2FibGVHdXR0ZXJzLCBtYXhXaWR0aCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcIm1heFdpZHRoXCIuY29uY2F0KGNhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0IHRoZSBtYXgtd2lkdGggdG8gbWF0Y2ggdGhlIG1pbi13aWR0aCBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UnZCBwcmVmZXIgdG8gZGVzaWduIGZvciBhIGZpeGVkIHNldCBvZiBzaXplc1xuICAgKiBpbnN0ZWFkIG9mIHRyeWluZyB0byBhY2NvbW1vZGF0ZSBhIGZ1bGx5IGZsdWlkIHZpZXdwb3J0LlxuICAgKiBJdCdzIGZsdWlkIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqL1xuICBtYXhXaWR0aDogUHJvcFR5cGVzLm9uZU9mKFsnbGcnLCAnbWQnLCAnc20nLCAneGwnLCAneHMnLCBmYWxzZV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNvbnRhaW5lcidcbn0pKENvbnRhaW5lcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCB2YXIgaHRtbCA9IHtcbiAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgLy8gQW50aWFsaWFzaW5nLlxuICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgLy8gQW50aWFsaWFzaW5nLlxuICAvLyBDaGFuZ2UgZnJvbSBgYm94LXNpemluZzogY29udGVudC1ib3hgIHNvIHRoYXQgYHdpZHRoYFxuICAvLyBpcyBub3QgYWZmZWN0ZWQgYnkgYHBhZGRpbmdgIG9yIGBib3JkZXJgLlxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufTtcbmV4cG9ydCB2YXIgYm9keSA9IGZ1bmN0aW9uIGJvZHkodGhlbWUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgfSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsXG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIC8vIFNhdmUgcHJpbnRlciBpbmsuXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlXG4gICAgfVxuICB9KTtcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgICdAZ2xvYmFsJzoge1xuICAgICAgaHRtbDogaHRtbCxcbiAgICAgICcqLCAqOjpiZWZvcmUsICo6OmFmdGVyJzoge1xuICAgICAgICBib3hTaXppbmc6ICdpbmhlcml0J1xuICAgICAgfSxcbiAgICAgICdzdHJvbmcsIGInOiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGRcbiAgICAgIH0sXG4gICAgICBib2R5OiBfZXh0ZW5kcyh7XG4gICAgICAgIG1hcmdpbjogMFxuICAgICAgfSwgYm9keSh0aGVtZSksIHtcbiAgICAgICAgLy8gQWRkIHN1cHBvcnQgZm9yIGRvY3VtZW50LmJvZHkucmVxdWVzdEZ1bGxTY3JlZW4oKS5cbiAgICAgICAgLy8gT3RoZXIgZWxlbWVudHMsIGlmIGJhY2tncm91bmQgdHJhbnNwYXJlbnQsIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAnJjo6YmFja2Ryb3AnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEtpY2tzdGFydCBhbiBlbGVnYW50LCBjb25zaXN0ZW50LCBhbmQgc2ltcGxlIGJhc2VsaW5lIHRvIGJ1aWxkIHVwb24uXG4gKi9cblxuZnVuY3Rpb24gQ3NzQmFzZWxpbmUocHJvcHMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgdmFyIF9wcm9wcyRjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2hpbGRyZW4gPSBfcHJvcHMkY2hpbGRyZW4gPT09IHZvaWQgMCA/IG51bGwgOiBfcHJvcHMkY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcztcbiAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NCYXNlbGluZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIHdyYXAgYSBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBDc3NCYXNlbGluZVsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChDc3NCYXNlbGluZS5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ3NzQmFzZWxpbmUnXG59KShDc3NCYXNlbGluZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIGFzIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1ha2VTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgbWFyZ2luOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MlwiYC4gKi9cbiAgICBib2R5MjogdGhlbWUudHlwb2dyYXBoeS5ib2R5MixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MVwiYC4gKi9cbiAgICBib2R5MTogdGhlbWUudHlwb2dyYXBoeS5ib2R5MSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjYXB0aW9uXCJgLiAqL1xuICAgIGNhcHRpb246IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidXR0b25cImAuICovXG4gICAgYnV0dG9uOiB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMVwiYC4gKi9cbiAgICBoMTogdGhlbWUudHlwb2dyYXBoeS5oMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMlwiYC4gKi9cbiAgICBoMjogdGhlbWUudHlwb2dyYXBoeS5oMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoM1wiYC4gKi9cbiAgICBoMzogdGhlbWUudHlwb2dyYXBoeS5oMyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNFwiYC4gKi9cbiAgICBoNDogdGhlbWUudHlwb2dyYXBoeS5oNCxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNVwiYC4gKi9cbiAgICBoNTogdGhlbWUudHlwb2dyYXBoeS5oNSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNlwiYC4gKi9cbiAgICBoNjogdGhlbWUudHlwb2dyYXBoeS5oNixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTFcImAuICovXG4gICAgc3VidGl0bGUxOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTJcImAuICovXG4gICAgc3VidGl0bGUyOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdmVybGluZVwiYC4gKi9cbiAgICBvdmVybGluZTogdGhlbWUudHlwb2dyYXBoeS5vdmVybGluZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzck9ubHlcImAuIE9ubHkgYWNjZXNzaWJsZSB0byBzY3JlZW4gcmVhZGVycy4gKi9cbiAgICBzck9ubHk6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJqdXN0aWZ5XCJgLiAqL1xuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbm93cmFwPXt0cnVlfWAuICovXG4gICAgbm9XcmFwOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBndXR0ZXJCb3R0b209e3RydWV9YC4gKi9cbiAgICBndXR0ZXJCb3R0b206IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFyYWdyYXBoPXt0cnVlfWAuICovXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRQcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRTZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImlubGluZVwiYC4gKi9cbiAgICBkaXNwbGF5SW5saW5lOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiYmxvY2tcImAuICovXG4gICAgZGlzcGxheUJsb2NrOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0VmFyaWFudE1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnXG59O1xudmFyIFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2JvZHkxJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgX3Byb3BzJHZhcmlhbnRNYXBwaW5nID0gcHJvcHMudmFyaWFudE1hcHBpbmcsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IF9wcm9wcyR2YXJpYW50TWFwcGluZyA9PT0gdm9pZCAwID8gZGVmYXVsdFZhcmlhbnRNYXBwaW5nIDogX3Byb3BzJHZhcmlhbnRNYXBwaW5nLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzcGxheVwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIE92ZXJyaWRlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGB2YXJpYW50TWFwcGluZ2AgcHJvcC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbn0pKFR5cG9ncmFwaHkpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcbnZhciBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdlbGV2YXRpb24nIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzLm91dGxpbmVkIDogY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgIXNxdWFyZSAmJiBjbGFzc2VzLnJvdW5kZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlciwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb247IC8vIGluIGNhc2UgYHdpdGhTdHlsZXNgIGZhaWxzIHRvIGluamVjdCB3ZSBkb24ndCBuZWVkIHRoaXMgd2FybmluZ1xuXG4gICAgaWYgKGNsYXNzZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVsZXZhdGlvbiAhPSBudWxsICYmIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZWxldmF0aW9uJywgJ291dGxpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBhcGVyJ1xufSkoUGFwZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9XG59O1xudmFyIENhcmQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJHJhaXNlZCA9IHByb3BzLnJhaXNlZCxcbiAgICAgIHJhaXNlZCA9IF9wcm9wcyRyYWlzZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJhaXNlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicmFpc2VkXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGVsZXZhdGlvbjogcmFpc2VkID8gOCA6IDEsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2FyZCB3aWxsIHVzZSByYWlzZWQgc3R5bGluZy5cbiAgICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZCdcbn0pKENhcmQpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmlwcGxlKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRwdWxzYXRlID0gcHJvcHMucHVsc2F0ZSxcbiAgICAgIHB1bHNhdGUgPSBfcHJvcHMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVggPSBwcm9wcy5yaXBwbGVYLFxuICAgICAgcmlwcGxlWSA9IHByb3BzLnJpcHBsZVksXG4gICAgICByaXBwbGVTaXplID0gcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgX3Byb3BzJG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRlZCA9IF9wcm9wcyRvbkV4aXRlZCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcHJvcHMkb25FeGl0ZWQsXG4gICAgICB0aW1lb3V0ID0gcHJvcHMudGltZW91dDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldExlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHJpcHBsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yaXBwbGUsIGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgcHVsc2F0ZSAmJiBjbGFzc2VzLnJpcHBsZVB1bHNhdGUpO1xuICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IHVzZUV2ZW50Q2FsbGJhY2sob25FeGl0ZWQpOyAvLyBSaXBwbGUgaXMgdXNlZCBmb3IgdXNlciBmZWVkYmFjayAoZS5nLiBjbGljayBvciBwcmVzcykgc28gd2Ugd2FudCB0byBhcHBseSBzdHlsZXMgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eVxuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWluUHJvcCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRcbiAgICAgIHNldExlYXZpbmcodHJ1ZSk7IC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0ZWRcblxuICAgICAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoaGFuZGxlRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlc1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xudmFyIERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IHZhciBERUxBWV9SSVBQTEUgPSA4MDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHpJbmRleDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZToge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVWaXNpYmxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVWaXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICBhbmltYXRpb246IFwiJGVudGVyIFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVQdWxzYXRlOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogXCJcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgXCJtc1wiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRgIGNsYXNzLiAqL1xuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZExlYXZpbmdgIGNsYXNzLiAqL1xuICAgIGNoaWxkTGVhdmluZzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkZXhpdCBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkcHVsc2F0ZSAyNTAwbXMgXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIFwiIDIwMG1zIGluZmluaXRlXCIpXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBlbnRlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgcHVsc2F0ZSc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMC45MiknXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxudmFyIFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbnRlciA9IHByb3BzLmNlbnRlcixcbiAgICAgIGNlbnRlclByb3AgPSBfcHJvcHMkY2VudGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgcmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICB2YXIgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgdmFyIHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSA9IHBhcmFtcy5yaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9sZFJpcHBsZXMpLCBbLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlwcGxlLCB7XG4gICAgICAgIGtleTogbmV4dEtleS5jdXJyZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIHZhciBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgcHVsc2F0ZSA9IF9vcHRpb25zJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcHVsc2F0ZSxcbiAgICAgICAgX29wdGlvbnMkY2VudGVyID0gb3B0aW9ucy5jZW50ZXIsXG4gICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUgOiBfb3B0aW9ucyRjZW50ZXIsXG4gICAgICAgIF9vcHRpb25zJGZha2VFbGVtZW50ID0gb3B0aW9ucy5mYWtlRWxlbWVudCxcbiAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBjb250YWluZXIuY3VycmVudDtcbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIHZhciByaXBwbGVYO1xuICAgIHZhciByaXBwbGVZO1xuICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudCxcbiAgICAgICAgICBjbGllbnRYID0gX3JlZi5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBfcmVmLmNsaWVudFk7XG5cbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlbGF5IHRoZSBleGVjdXRpb24gb2YgdGhlIHJpcHBsZSBlZmZlY3QuXG5cblxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgY2I6IGNiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjZW50ZXJQcm9wLCBzdGFydENvbW1pdF0pO1xuICB2YXIgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgdmFyIHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQsIGNiKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7IC8vIFRoZSB0b3VjaCBpbnRlcmFjdGlvbiBvY2N1cnMgdG9vIHF1aWNrbHkuXG4gICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgc3RvcDogc3RvcFxuICAgIH07XG4gIH0sIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGV4aXQ6IHRydWVcbiAgfSwgcmlwcGxlcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKCAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyhUb3VjaFJpcHBsZSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICAgIH0sXG4gICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgIH0sXG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cbnZhciBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgb25EcmFnTGVhdmUgPSBwcm9wcy5vbkRyYWdMZWF2ZSxcbiAgICAgIF9wcm9wcyR0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdGFiSW5kZXggPSBfcHJvcHMkdGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdGFiSW5kZXgsXG4gICAgICBUb3VjaFJpcHBsZVByb3BzID0gcHJvcHMuVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJidXR0b25SZWZcIiwgXCJjZW50ZXJSaXBwbGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrKSB7XG4gICAgdmFyIHNraXBSaXBwbGVBY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudENhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgdmFyIGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Nb3VzZVVwKTtcbiAgdmFyIGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIHZhciBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICB2YXIgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBvbkJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgdmFyIGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGlzTm9uTmF0aXZlQnV0dG9uID0gZnVuY3Rpb24gaXNOb25OYXRpdmVCdXR0b24oKSB7XG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcbiAgLyoqXG4gICAqIElFIDExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIHZhciBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIG90aGVyLmhyZWYpIHtcbiAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICB9XG5cbiAgdmFyIGJ1dHRvblByb3BzID0ge307XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoQ29tcG9uZW50UHJvcCAhPT0gJ2EnIHx8ICFvdGhlci5ocmVmKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICB9XG5cbiAgdmFyIGhhbmRsZVVzZXJSZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZlByb3AsIHJlZik7XG4gIHZhciBoYW5kbGVPd25SZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlVXNlclJlZiwgaGFuZGxlT3duUmVmKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZvY3VzVmlzaWJsZSAmJiBbY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gIC8qI19fUFVSRV9fKi9cblxuICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmlwcGxlUmVmLFxuICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVmYCBpbnN0ZWFkLlxuICAgKi9cbiAgYnV0dG9uUmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGVzIHdpbGwgYmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9tYXN0ZXIvZXhwbGFpbmVyLm1kKS5cbiAgICogQSBbcG9seWZpbGwgY2FuIGJlIHVzZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUpIHRvIGFwcGx5IGEgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIG90aGVyIGNvbXBvbmVudHNcbiAgICogaWYgbmVlZGVkLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG59KShCdXR0b25CYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdGV4dEFsaWduOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgJyY6aG92ZXIgJGZvY3VzSGlnaGxpZ2h0Jzoge1xuICAgICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHlcbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUgJGZvY3VzSGlnaGxpZ2h0Jzoge1xuICAgICAgICBvcGFjaXR5OiAwLjEyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYWN0aW9uIGFyZWEgaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c1Zpc2libGU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIG92ZXJsYXkgdGhhdCBjb3ZlcnMgdGhlIGFjdGlvbiBhcmVhIHdoZW4gaXQgaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c0hpZ2hsaWdodDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Y29sb3InLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbnZhciBDYXJkQWN0aW9uQXJlYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRBY3Rpb25BcmVhKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLCBjbGFzc2VzLmZvY3VzVmlzaWJsZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZm9jdXNIaWdobGlnaHRcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9uQXJlYS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25BcmVhJ1xufSkoQ2FyZEFjdGlvbkFyZWEpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgcGFkZGluZzogMTYsXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IDI0XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbn0pKENhcmRDb250ZW50KTsiLCJleHBvcnQgY29uc3Qgb25seVVuaXF1ZUFycmF5ID0gKHZhbHVlLCBpbmRleCwgc2VsZikgPT4ge1xuICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY0Rpc3RhbmNlQnlMYXRMbmcgPSAobGF0LCBsbmcsIGN1cnJlbnRMb2NhdGlvbikgPT4ge1xuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgY29uc3QgUiA9IDYzNzFlMzsgLy8gbWV0cmVzXG4gICAgY29uc3Qgz4YxID0gKGN1cnJlbnRMb2NhdGlvbj8ubGF0ICogTWF0aC5QSSkgLyAxODA7IC8vIM+GLCDOuyBpbiByYWRpYW5zXG4gICAgY29uc3Qgz4YyID0gKGxhdCAqIE1hdGguUEkpIC8gMTgwO1xuICAgIGNvbnN0IM6Uz4YgPSAoKGxhdCAtIGN1cnJlbnRMb2NhdGlvbj8ubGF0KSAqIE1hdGguUEkpIC8gMTgwO1xuICAgIGNvbnN0IM6UzrsgPSAoKGxuZyAtIGN1cnJlbnRMb2NhdGlvbj8ubG5nKSAqIE1hdGguUEkpIC8gMTgwO1xuXG4gICAgY29uc3QgYSA9XG4gICAgICBNYXRoLnNpbijOlM+GIC8gMikgKiBNYXRoLnNpbijOlM+GIC8gMikgK1xuICAgICAgTWF0aC5jb3Moz4YxKSAqIE1hdGguY29zKM+GMikgKiBNYXRoLnNpbijOlM67IC8gMikgKiBNYXRoLnNpbijOlM67IC8gMik7XG4gICAgY29uc3QgYyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSk7XG5cbiAgICBjb25zdCBkID0gKFIgKiBjKSAvIDEwMDA7IC8vIGluIEttXG4gICAgcmV0dXJuIGQudG9GaXhlZCgxKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRHZW9GaW5kTWUgPSAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSA9PiB7XG4gIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXG4gICAgKGUpID0+IHN1Y2Nlc3NHZXRMb2NhdGlvbihlLCBzdWNjZXNzQ2FsbGJhY2spLFxuICAgIChlKSA9PiBlcnJvckdldExvY2F0aW9uKGUsIGVycm9yQ2FsbGJhY2spXG4gICk7XG4gIC8vIHN1Y2Nlc3NDYWxsYmFjayh7IGxhdDogNTIuMzY3NiwgbG5nOiA0LjkwNDEgfSk7IC8vIGZvciB0ZXN0IChDZW50ZXIgQW1zdGVyZGFtKVxufTtcbmZ1bmN0aW9uIHN1Y2Nlc3NHZXRMb2NhdGlvbihwb3NpdGlvbiwgY2FsbGJhY2spIHtcbiAgbGV0IGxhdCA9IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcbiAgbGV0IGxuZyA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7XG4gIGNhbGxiYWNrKHsgbGF0LCBsbmcgfSk7XG59XG5cbmZ1bmN0aW9uIGVycm9yR2V0TG9jYXRpb24oZXJyb3IsIGNhbGxiYWNrKSB7XG4gIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgIGNhc2UgZXJyb3IuUEVSTUlTU0lPTl9ERU5JRUQ6XG4gICAgICBjYWxsYmFjayhcIlVzZXIgZGVuaWVkIHRoZSByZXF1ZXN0IGZvciBHZW9sb2NhdGlvbi5cIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGVycm9yLlBPU0lUSU9OX1VOQVZBSUxBQkxFOlxuICAgICAgY2FsbGJhY2soXCJMb2NhdGlvbiBpbmZvcm1hdGlvbiBpcyB1bmF2YWlsYWJsZS5cIik7XG5cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXJyb3IuVElNRU9VVDpcbiAgICAgIGNhbGxiYWNrKFwiVGhlIHJlcXVlc3QgdG8gZ2V0IHVzZXIgbG9jYXRpb24gdGltZWQgb3V0LlwiKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXJyb3IuVU5LTk9XTl9FUlJPUjpcbiAgICAgIGNhbGxiYWNrKFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC5cIik7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2hvd0VtcHR5U3RyaW5nID0gKHN0cmluZykgPT4gKHN0cmluZyA9PT0gXCJcIiA/IFwidW5rbm93blwiIDogc3RyaW5nKTtcblxuZXhwb3J0IGNvbnN0IHNlYXJjaEFycmF5V2l0aEtleUFuZEtleXdvcmQgPSAoYXJyYXksIGtleSwga2V5d29yZCkgPT4ge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKFxuICAgIChpdGVtKSA9PlxuICAgICAgU3RyaW5nKGl0ZW1ba2V5XSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGtleXdvcmQudG9Mb3dlckNhc2UoKSkgPiAtMVxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XG5pbXBvcnQge1xuICBDYXJkLFxuICBDYXJkQWN0aW9uQXJlYSxcbiAgQ2FyZENvbnRlbnQsXG4gIFR5cG9ncmFwaHksXG59IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xuaW1wb3J0IExhenlsb2FkIGZyb20gXCJyZWFjdC1sYXp5bG9hZFwiO1xuLy8gaGVscGVyXG5pbXBvcnQgeyBzaG93RW1wdHlTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaGVscGVyXCI7XG5cbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xuICByb290OiB7fSxcbiAgdHJhbnNpdGlvbjogXCJhbGwgMC44c1wiLFxuICBjYXJkOiB7XG4gICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIHRyYW5zaXRpb246IFwiYWxsIDAuM3NcIixcbiAgfSxcbiAgYWN0aXZlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgIHRyYW5zaXRpb246IFwiYWxsIDAuNXNcIixcbiAgfSxcbn0pKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGlzdCh7IGRhdGEsIG9uQ2xpY2ssIGN1cnJlbnRDaXR5SW5kZXggfSkge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHRTZWNvbmRhcnlcIiBjb21wb25lbnQ9XCJwXCI+XG4gICAgICAgIHtkYXRhPy5sZW5ndGggPiAwID8gYFJlc3VsdHM6JHtkYXRhPy5sZW5ndGh9YCA6IFwiUmVzdWx0OiBOb3QgRm91bmQgOihcIn1cbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIHtkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgPExhenlsb2FkIHBsYWNlaG9sZGVyPVwibG9hZGluZy4uLlwiIGtleT17aW5kZXh9PlxuICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake2NsYXNzZXMuY2FyZH0gJHtcbiAgICAgICAgICAgICAgaW5kZXggPT09IGN1cnJlbnRDaXR5SW5kZXggJiYgY2xhc3Nlcy5hY3RpdmVcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DbGljayhpbmRleCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPENhcmRBY3Rpb25BcmVhPlxuICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgZ3V0dGVyQm90dG9tIHZhcmlhbnQ9XCJoNVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICAgICAgICAgICAge2l0ZW0uY2l0eX1cbiAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MlwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImRpdlwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtpdGVtLmFkbWluX25hbWV9XG4gICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cInBcIj5cbiAgICAgICAgICAgICAgICAgIFBvcHVsYXRpb246IHtzaG93RW1wdHlTdHJpbmcoaXRlbS5wb3B1bGF0aW9uKX1cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY29tcG9uZW50PVwicFwiPlxuICAgICAgICAgICAgICAgICAgUG9wdWxhdGlvbiBQcm9wZXI6IHtzaG93RW1wdHlTdHJpbmcoaXRlbS5wb3B1bGF0aW9uX3Byb3Blcil9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIHsvKiAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY29tcG9uZW50PVwicFwiPlxuICAgICAgICAgICAgICAgICAgRGlzdGFuY2U6IHtgJHtpdGVtLmRpc3RhbmNlfSBrbWB9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PiAqL31cbiAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDwvQ2FyZEFjdGlvbkFyZWE+XG4gICAgICAgICAgPC9DYXJkPlxuICAgICAgICA8L0xhenlsb2FkPlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJleHBvcnQgY29uc3QgR0VUX0NJVElFUyA9IFwiR0VUX0NJVElFU1wiO1xuZXhwb3J0IGNvbnN0IEdFVF9DSVRJRVNfRkFJTCA9IFwiR0VUX0NJVElFU19GQUlMXCI7XG5leHBvcnQgY29uc3QgR0VUX0NJVElFU19TVUNDRVNTID0gXCJHRVRfQ0lUSUVTX1NVQ0NFU1NcIjtcbmV4cG9ydCBjb25zdCBDSEFOR0VfUkVTVUxUID0gXCJDSEFOR0VfUkVTVUxUXCI7XG5leHBvcnQgY29uc3QgQ1VSUkVOVF9DSVRZX0lOREVYID0gXCJDVVJSRU5UX0NJVFlfSU5ERVhcIjtcbmV4cG9ydCBjb25zdCBHRVRfQ1VSUkVOVF9MT0NBVElPTiA9IFwiR0VUX0NVUlJFTlRfTE9DQVRJT05cIjtcbmV4cG9ydCBjb25zdCBHRVRfQ1VSUkVOVF9MT0NBVElPTl9GQUlMID0gXCJHRVRfQ1VSUkVOVF9MT0NBVElPTl9GQUlMXCI7XG5leHBvcnQgY29uc3QgQ0hBTkdFX0tFWVdPUkRfU0VBUkNIID0gXCJDSEFOR0VfS0VZV09SRF9TRUFSQ0hcIjtcbiIsImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VSZWR1Y2VyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBHRVRfQ0lUSUVTLFxuICBDSEFOR0VfUkVTVUxULFxuICBHRVRfQ0lUSUVTX0ZBSUwsXG4gIEdFVF9DSVRJRVNfU1VDQ0VTUyxcbiAgQ1VSUkVOVF9DSVRZX0lOREVYLFxuICBHRVRfQ1VSUkVOVF9MT0NBVElPTixcbiAgR0VUX0NVUlJFTlRfTE9DQVRJT05fRkFJTCxcbiAgQ0hBTkdFX0tFWVdPUkRfU0VBUkNILFxufSBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGNpdGllczogW10sXG4gIGxvYWRpbmc6IHRydWUsXG4gIHJlc3VsdFNlYXJjaDogW10sXG4gIGN1cnJlbnRDaXR5SW5kZXg6IDAsXG4gIGVycm9yOiBmYWxzZSxcbiAgY3VycmVudExvY2F0aW9uOiB7IGxhdDogMCwgbG5nOiAwIH0sXG4gIGN1cnJlbnRMb2NhdGlvbkVycm9yOiBcIlwiLFxuICBrZXl3b3JkOiBcIlwiLFxufTtcbmNvbnN0IHN0b3JlID0gY3JlYXRlQ29udGV4dChpbml0aWFsU3RhdGUpO1xuY29uc3QgeyBQcm92aWRlciB9ID0gc3RvcmU7XG5cbmNvbnN0IFN0YXRlUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcigoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgR0VUX0NJVElFUzpcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IHRydWUgfTtcbiAgICAgIGNhc2UgR0VUX0NJVElFU19TVUNDRVNTOlxuICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgY2l0aWVzOiBhY3Rpb24udmFsdWUsIGVycm9yOiBmYWxzZSwgbG9hZGluZzogZmFsc2UgfTtcbiAgICAgIGNhc2UgR0VUX0NJVElFU19GQUlMOlxuICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgY2l0aWVzOiBbXSwgZXJyb3I6IHRydWUsIGxvYWRpbmc6IGZhbHNlIH07XG4gICAgICBjYXNlIENIQU5HRV9SRVNVTFQ6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCByZXN1bHRTZWFyY2g6IGFjdGlvbi52YWx1ZSB9O1xuICAgICAgY2FzZSBDVVJSRU5UX0NJVFlfSU5ERVg6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBjdXJyZW50Q2l0eUluZGV4OiBhY3Rpb24udmFsdWUgfTtcbiAgICAgIGNhc2UgR0VUX0NVUlJFTlRfTE9DQVRJT046XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBhY3Rpb24udmFsdWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uRXJyb3I6IFwiXCIsXG4gICAgICAgIH07XG4gICAgICBjYXNlIEdFVF9DVVJSRU5UX0xPQ0FUSU9OX0ZBSUw6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uRXJyb3I6IGFjdGlvbi52YWx1ZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgQ0hBTkdFX0tFWVdPUkRfU0VBUkNIOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIGtleXdvcmQ6IGFjdGlvbi52YWx1ZSxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgfSwgaW5pdGlhbFN0YXRlKTtcblxuICByZXR1cm4gPFByb3ZpZGVyIHZhbHVlPXt7IHN0YXRlLCBkaXNwYXRjaCB9fT57Y2hpbGRyZW59PC9Qcm92aWRlcj47XG59O1xuXG5leHBvcnQgeyBzdG9yZSwgU3RhdGVQcm92aWRlciB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGJhY2tncm91bmRDb2xvckRlZmF1bHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs5MDBdO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAvLyBQcmV2ZW50IHBhZGRpbmcgaXNzdWUgd2l0aCB0aGUgTW9kYWwgYW5kIGZpeGVkIHBvc2l0aW9uZWQgQXBwQmFyLlxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguYXBwQmFyLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImZpeGVkXCJgLiAqL1xuICAgIHBvc2l0aW9uRml4ZWQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICAvLyBQcmV2ZW50IHRoZSBhcHAgYmFyIHRvIGJlIHZpc2libGUgb24gZWFjaCBwcmludGVkIHBhZ2UuXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiYWJzb2x1dGVcImAuICovXG4gICAgcG9zaXRpb25BYnNvbHV0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0aWNreVwiYC4gKi9cbiAgICBwb3NpdGlvblN0aWNreToge1xuICAgICAgLy8g4pqg77iPIHN0aWNreSBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFIDExLlxuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJzdGF0aWNcImAuICovXG4gICAgcG9zaXRpb25TdGF0aWM6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RhdGljJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInJlbGF0aXZlXCJgLiAqL1xuICAgIHBvc2l0aW9uUmVsYXRpdmU6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGVmYXVsdFwiYC4gKi9cbiAgICBjb2xvckRlZmF1bHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yRGVmYXVsdCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRyYW5zcGFyZW50XCJgLiAqL1xuICAgIGNvbG9yVHJhbnNwYXJlbnQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xudmFyIEFwcEJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEFwcEJhcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgcG9zaXRpb24gPSBfcHJvcHMkcG9zaXRpb24gPT09IHZvaWQgMCA/ICdmaXhlZCcgOiBfcHJvcHMkcG9zaXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwicG9zaXRpb25cIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IFwiaGVhZGVyXCIsXG4gICAgZWxldmF0aW9uOiA0LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJwb3NpdGlvblwiLmNvbmNhdChjYXBpdGFsaXplKHBvc2l0aW9uKSldLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgY2xhc3NOYW1lLCBwb3NpdGlvbiA9PT0gJ2ZpeGVkJyAmJiAnbXVpLWZpeGVkJyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQXBwQmFyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RyYW5zcGFyZW50J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb25pbmcgdHlwZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWRcbiAgICogW2luIHRoZSBNRE4gd2ViIGRvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vQ1NTL0NTU19sYXlvdXQvUG9zaXRpb25pbmcpLlxuICAgKiBOb3RlOiBgc3RpY2t5YCBpcyBub3QgdW5pdmVyc2FsbHkgc3VwcG9ydGVkIGFuZCB3aWxsIGZhbGwgYmFjayB0byBgc3RhdGljYCB3aGVuIHVuYXZhaWxhYmxlLlxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2Fic29sdXRlJywgJ2ZpeGVkJywgJ3JlbGF0aXZlJywgJ3N0YXRpYycsICdzdGlja3knXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQXBwQmFyJ1xufSkoQXBwQmFyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e2ZhbHNlfWAuICovXG4gICAgZ3V0dGVyczogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwicmVndWxhclwiYC4gKi9cbiAgICByZWd1bGFyOiB0aGVtZS5taXhpbnMudG9vbGJhcixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkZW5zZVwiYC4gKi9cbiAgICBkZW5zZToge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH1cbiAgfTtcbn07XG52YXIgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdyZWd1bGFyJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW3ZhcmlhbnRdLCBjbGFzc05hbWUsICFkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmd1dHRlcnMpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvb2xiYXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVG9vbGJhciBjaGlsZHJlbiwgdXN1YWxseSBhIG1peHR1cmUgb2YgYEljb25CdXR0b25gLCBgQnV0dG9uYCBhbmQgYFR5cG9ncmFwaHlgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBkaXNhYmxlcyBndXR0ZXIgcGFkZGluZy5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncmVndWxhcicsICdkZW5zZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sYmFyJ1xufSkoVG9vbGJhcik7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBGb3JtQ29udHJvbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEZvcm1Db250cm9sQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtQ29udHJvbENvbnRleHQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVtwcm9wZXJ0eV0sIDEwKSB8fCAwO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzaGFkb3cgdGV4dGFyZWEgZWxlbWVudC4gKi9cbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG52YXIgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIHJlZikge1xuICB2YXIgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBfcHJvcHMkcm93c01pbiA9IHByb3BzLnJvd3NNaW4sXG4gICAgICByb3dzTWluUHJvcCA9IF9wcm9wcyRyb3dzTWluID09PSB2b2lkIDAgPyAxIDogX3Byb3BzJHJvd3NNaW4sXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJvbkNoYW5nZVwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwicm93c01pblwiLCBcInN0eWxlXCIsIFwidmFsdWVcIl0pO1xuXG4gIHZhciByb3dzTWluID0gcm93cyB8fCByb3dzTWluUHJvcDtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWYpO1xuICB2YXIgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgcmVuZGVycyA9IFJlYWN0LnVzZVJlZigwKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoe30pLFxuICAgICAgc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuICAgIHZhciBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JztcblxuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cblxuICAgIHZhciBib3hTaXppbmcgPSBjb21wdXRlZFN0eWxlWydib3gtc2l6aW5nJ107XG4gICAgdmFyIHBhZGRpbmcgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLWJvdHRvbScpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy10b3AnKTtcbiAgICB2YXIgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLXRvcC13aWR0aCcpOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG5cbiAgICB2YXIgaW5uZXJIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0IC0gcGFkZGluZzsgLy8gTWVhc3VyZSBoZWlnaHQgb2YgYSB0ZXh0YXJlYSB3aXRoIGEgc2luZ2xlIHJvd1xuXG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gJ3gnO1xuICAgIHZhciBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0IC0gcGFkZGluZzsgLy8gVGhlIGhlaWdodCBvZiB0aGUgb3V0ZXIgY29udGVudFxuXG4gICAgdmFyIG91dGVySGVpZ2h0ID0gaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAocm93c01pbikge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIocm93c01pbikgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAocm93c01heCkge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIocm93c01heCkgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KG91dGVySGVpZ2h0LCBzaW5nbGVSb3dIZWlnaHQpOyAvLyBUYWtlIHRoZSBib3ggc2l6aW5nIGludG8gYWNjb3VudCBmb3IgYXBwbHlpbmcgdGhpcyB2YWx1ZSBhcyBhIHN0eWxlLlxuXG4gICAgdmFyIG91dGVySGVpZ2h0U3R5bGUgPSBvdXRlckhlaWdodCArIChib3hTaXppbmcgPT09ICdib3JkZXItYm94JyA/IHBhZGRpbmcgKyBib3JkZXIgOiAwKTtcbiAgICB2YXIgb3ZlcmZsb3cgPSBNYXRoLmFicyhvdXRlckhlaWdodCAtIGlubmVySGVpZ2h0KSA8PSAxO1xuICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byB1cGRhdGUgdGhlIGhlaWdodC5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICBpZiAocmVuZGVycy5jdXJyZW50IDwgMjAgJiYgKG91dGVySGVpZ2h0U3R5bGUgPiAwICYmIE1hdGguYWJzKChwcmV2U3RhdGUub3V0ZXJIZWlnaHRTdHlsZSB8fCAwKSAtIG91dGVySGVpZ2h0U3R5bGUpID4gMSB8fCBwcmV2U3RhdGUub3ZlcmZsb3cgIT09IG92ZXJmbG93KSkge1xuICAgICAgICByZW5kZXJzLmN1cnJlbnQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvdmVyZmxvdzogb3ZlcmZsb3csXG4gICAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZTogb3V0ZXJIZWlnaHRTdHlsZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVG9vIG1hbnkgcmUtcmVuZGVycy4gVGhlIGxheW91dCBpcyB1bnN0YWJsZS4nLCAnVGV4dGFyZWFBdXRvc2l6ZSBsaW1pdHMgdGhlIG51bWJlciBvZiByZW5kZXJzIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICB9KTtcbiAgfSwgW3Jvd3NNYXgsIHJvd3NNaW4sIHByb3BzLnBsYWNlaG9sZGVyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW3N5bmNIZWlnaHRdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHN5bmNIZWlnaHQoKTtcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgfSwgW3ZhbHVlXSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG5cbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc3luY0hlaWdodCgpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgX2V4dGVuZHMoe1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogaGFuZGxlUmVmIC8vIEFwcGx5IHRoZSByb3dzIHByb3AgdG8gZ2V0IGEgXCJjb3JyZWN0XCIgZmlyc3QgU1NSIHBhaW50XG4gICAgLFxuICAgIHJvd3M6IHJvd3NNaW4sXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIGhlaWdodDogc3RhdGUub3V0ZXJIZWlnaHRTdHlsZSxcbiAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgb3ZlcmZsb3c6IHN0YXRlLm92ZXJmbG93ID8gJ2hpZGRlbicgOiBudWxsXG4gICAgfSwgc3R5bGUpXG4gIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICByZWFkT25seTogdHJ1ZSxcbiAgICByZWY6IHNoYWRvd1JlZixcbiAgICB0YWJJbmRleDogLTEsXG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMuc2hhZG93LCBzdHlsZSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIGByb3dzTWluYCBpbnN0ZWFkLiBUaGUgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01pbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYUF1dG9zaXplOyIsIi8vIFN1cHBvcnRzIGRldGVybWluYXRpb24gb2YgaXNDb250cm9sbGVkKCkuXG4vLyBDb250cm9sbGVkIGlucHV0IGFjY2VwdHMgaXRzIGN1cnJlbnQgdmFsdWUgYXMgYSBwcm9wLlxuLy9cbi8vIEBzZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9mb3Jtcy5odG1sI2NvbnRyb2xsZWQtY29tcG9uZW50c1xuLy8gQHBhcmFtIHZhbHVlXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBzdHJpbmcgKGluY2x1ZGluZyAnJykgb3IgbnVtYmVyIChpbmNsdWRpbmcgemVybylcbmV4cG9ydCBmdW5jdGlvbiBoYXNWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59IC8vIERldGVybWluZSBpZiBmaWVsZCBpcyBlbXB0eSBvciBmaWxsZWQuXG4vLyBSZXNwb25zZSBkZXRlcm1pbmVzIGlmIGxhYmVsIGlzIHByZXNlbnRlZCBhYm92ZSBmaWVsZCBvciBhcyBwbGFjZWhvbGRlci5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcGFyYW0gU1NSXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBub3QgcHJlc2VudCBvciBlbXB0eSBzdHJpbmcuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFueSBudW1iZXIgb3Igc3RyaW5nIHdpdGggbGVuZ3RoLlxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxsZWQob2JqKSB7XG4gIHZhciBTU1IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICByZXR1cm4gb2JqICYmIChoYXNWYWx1ZShvYmoudmFsdWUpICYmIG9iai52YWx1ZSAhPT0gJycgfHwgU1NSICYmIGhhc1ZhbHVlKG9iai5kZWZhdWx0VmFsdWUpICYmIG9iai5kZWZhdWx0VmFsdWUgIT09ICcnKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGFuIElucHV0IGlzIGFkb3JuZWQgb24gc3RhcnQuXG4vLyBJdCdzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxlZnQgd2l0aCBMVFIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm8gYWRvcm5tZW50cy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYWRvcm5lZCBhdCB0aGUgc3RhcnQuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cywganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCwgeyB1c2VGb3JtQ29udHJvbCB9IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IFRleHRhcmVhQXV0b3NpemUgZnJvbSAnLi4vVGV4dGFyZWFBdXRvc2l6ZSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICB2YXIgcGxhY2Vob2xkZXJWaXNpYmxlID0ge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4ge1xuICAgICdAZ2xvYmFsJzoge1xuICAgICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbCc6IHt9LFxuICAgICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbC1jYW5jZWwnOiB7fVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBsaW5lSGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb2xvciBpcyBzZWNvbmRhcnkuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGhlaWdodDogJzEuMTg3NmVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEZpeCBJRSAxMSB3aWR0aCBpc3N1ZVxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwtY2FuY2VsJyxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMTBtcycsXG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIElFIDExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICAgJyY6aW52YWxpZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgICAgJ2xhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArICRmb3JtQ29udHJvbCAmJzoge1xuICAgICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBFZGdlXG4gICAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG5cbiAgICAgIH0sXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgaGlkZGVuTGFiZWw9e3RydWV9YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7fVxuICB9O1xufTtcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cblxudmFyIElucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhcmlhRGVzY3JpYmVkYnkgPSBwcm9wc1snYXJpYS1kZXNjcmliZWRieSddLFxuICAgICAgYXV0b0NvbXBsZXRlID0gcHJvcHMuYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVuZEFkb3JubWVudCA9IHByb3BzLmVuZEFkb3JubWVudCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBpbnB1dFByb3BzUHJvcCA9IF9wcm9wcyRpbnB1dFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRpbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWZQcm9wID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAgPSBwcm9wcy5vbktleVVwLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZW5kZXJTdWZmaXggPSBwcm9wcy5yZW5kZXJTdWZmaXgsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgcm93c01pbiA9IHByb3BzLnJvd3NNaW4sXG4gICAgICBzdGFydEFkb3JubWVudCA9IHByb3BzLnN0YXJ0QWRvcm5tZW50LFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIHZhbHVlUHJvcCA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInJvd3NNaW5cIiwgXCJzdGFydEFkb3JubWVudFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIHZhbHVlID0gaW5wdXRQcm9wc1Byb3AudmFsdWUgIT0gbnVsbCA/IGlucHV0UHJvcHNQcm9wLnZhbHVlIDogdmFsdWVQcm9wO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5ub2RlTmFtZSAhPT0gJ0lOUFVUJyAmJiAhaW5zdGFuY2UuZm9jdXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhIGBpbnB1dENvbXBvbmVudGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGBpbnB1dFJlZmAgcHJvcC4nLCAnTWFrZSBzdXJlIHRoZSBgaW5wdXRSZWZgIHByb3AgaXMgY2FsbGVkIHdpdGggYSBIVE1MSW5wdXRFbGVtZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZUlucHV0UHJvcHNSZWZQcm9wID0gdXNlRm9ya1JlZihpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UmVmUHJvcCwgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3ApO1xuICB2YXIgaGFuZGxlSW5wdXRSZWYgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBoYW5kbGVJbnB1dFJlZlByb3ApO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgICByZXR1cm4gbXVpRm9ybUNvbnRyb2wucmVnaXN0ZXJFZmZlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBbbXVpRm9ybUNvbnRyb2xdKTtcbiAgfVxuXG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdtYXJnaW4nLCAncmVxdWlyZWQnLCAnZmlsbGVkJ11cbiAgfSk7XG4gIGZjcy5mb2N1c2VkID0gbXVpRm9ybUNvbnRyb2wgPyBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIDogZm9jdXNlZDsgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghbXVpRm9ybUNvbnRyb2wgJiYgZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG5cbiAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgb25CbHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIGRpc2FibGVkLCBmb2N1c2VkLCBvbkJsdXJdKTtcbiAgdmFyIG9uRmlsbGVkID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQ7XG4gIHZhciBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgdmFyIGNoZWNrRGlydHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFt2YWx1ZSwgY2hlY2tEaXJ0eSwgaXNDb250cm9sbGVkXSk7XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICAvLyBGaXggYSBidWcgd2l0aCBJRSAxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBpbnB1dCBpcyBkaXNhYmxlZC5cbiAgICBpZiAoZmNzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25CbHVyKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gZXZlbnQudGFyZ2V0IHx8IGlucHV0UmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gYGlucHV0Q29tcG9uZW50YCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gU2VlIGh0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvaW5wdXQtY29tcG9uZW50LXJlZi1pbnRlcmZhY2UgZm9yIG1vcmUgaW5mby5cIiA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMSkpO1xuICAgICAgfVxuXG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UuYXBwbHkoaW5wdXRQcm9wc1Byb3AsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZS5hcHBseSh2b2lkIDAsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07IC8vIENoZWNrIHRoZSBpbnB1dCBzdGF0ZSBvbiBtb3VudCwgaW4gY2FzZSBpdCB3YXMgZmlsbGVkIGJ5IHRoZSB1c2VyXG4gIC8vIG9yIGF1dG8gZmlsbGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSB0aGUgaHlkcmF0aW9uIChmb3IgU1NSKS5cblxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tEaXJ0eShpbnB1dFJlZi5jdXJyZW50KTtcbiAgfSwgW10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcblxuICB2YXIgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHt9LCBpbnB1dFByb3BzUHJvcCwge1xuICAgIHJlZjogaGFuZGxlSW5wdXRSZWZcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBJbnB1dENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgLy8gUmVuYW1lIHJlZiB0byBpbnB1dFJlZiBhcyB3ZSBkb24ndCBrbm93IHRoZVxuICAgICAgLy8gcHJvdmlkZWQgYGlucHV0Q29tcG9uZW50YCBzdHJ1Y3R1cmUuXG4gICAgICBpbnB1dFJlZjogaGFuZGxlSW5wdXRSZWYsXG4gICAgICB0eXBlOiB0eXBlXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgcmVmOiBudWxsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobXVsdGlsaW5lKSB7XG4gICAgaWYgKHJvd3MgJiYgIXJvd3NNYXggJiYgIXJvd3NNaW4pIHtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gJ3RleHRhcmVhJztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgcm93c01heDogcm93c01heFxuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgICBJbnB1dENvbXBvbmVudCA9IFRleHRhcmVhQXV0b3NpemU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICB0eXBlOiB0eXBlXG4gICAgfSwgaW5wdXRQcm9wcyk7XG4gIH1cblxuICB2YXIgaGFuZGxlQXV0b0ZpbGwgPSBmdW5jdGlvbiBoYW5kbGVBdXRvRmlsbChldmVudCkge1xuICAgIC8vIFByb3ZpZGUgYSBmYWtlIHZhbHVlIGFzIENocm9tZSBtaWdodCBub3QgbGV0IHlvdSBhY2Nlc3MgaXQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gICAgY2hlY2tEaXJ0eShldmVudC5hbmltYXRpb25OYW1lID09PSAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnID8gaW5wdXRSZWYuY3VycmVudCA6IHtcbiAgICAgIHZhbHVlOiAneCdcbiAgICB9KTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgbXVpRm9ybUNvbnRyb2wuc2V0QWRvcm5lZFN0YXJ0KEJvb2xlYW4oc3RhcnRBZG9ybm1lbnQpKTtcbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgc3RhcnRBZG9ybm1lbnRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShmY3MuY29sb3IgfHwgJ3ByaW1hcnknKSldLCBjbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvciwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsIG11bHRpbGluZSAmJiBjbGFzc2VzLm11bHRpbGluZSwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5hZG9ybmVkU3RhcnQsIGVuZEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRFbmQsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSksXG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBzdGFydEFkb3JubWVudCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGxcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGlkOiBpZCxcbiAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICByb3dzOiByb3dzLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICBvbktleVVwOiBvbktleVVwXG4gIH0sIGlucHV0UHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wc1Byb3AuY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgbXVsdGlsaW5lICYmIGNsYXNzZXMuaW5wdXRNdWx0aWxpbmUsIGZjcy5oaWRkZW5MYWJlbCAmJiBjbGFzc2VzLmlucHV0SGlkZGVuTGFiZWwsIHN0YXJ0QWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkU3RhcnQsIGVuZEFkb3JubWVudCAmJiBjbGFzc2VzLmlucHV0QWRvcm5lZEVuZCwgdHlwZSA9PT0gJ3NlYXJjaCcgJiYgY2xhc3Nlcy5pbnB1dFR5cGVTZWFyY2gsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5pbnB1dE1hcmdpbkRlbnNlKSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1xuICB9KSkpLCBlbmRBZG9ybm1lbnQsIHJlbmRlclN1ZmZpeCA/IHJlbmRlclN1ZmZpeChfZXh0ZW5kcyh7fSwgZmNzLCB7XG4gICAgc3RhcnRBZG9ybm1lbnQ6IHN0YXJ0QWRvcm5tZW50XG4gIH0pKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEJhc2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBgaW5wdXRgIGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGluZGljYXRlIGFuIGVycm9yLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGlucHV0IGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNaW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZSdcbn0pKElucHV0QmFzZSk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZShfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBzdGF0ZXMgPSBfcmVmLnN0YXRlcyxcbiAgICAgIG11aUZvcm1Db250cm9sID0gX3JlZi5tdWlGb3JtQ29udHJvbDtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3RhdGUpIHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuXG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3N0YXRlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjW3N0YXRlXSA9IG11aUZvcm1Db250cm9sW3N0YXRlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbi8vU3RvcmVcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi4uLy4uL3N0b3JlL3N0b3JlXCI7XG5pbXBvcnQgeyBDSEFOR0VfUkVTVUxULCBDSEFOR0VfS0VZV09SRF9TRUFSQ0ggfSBmcm9tIFwiLi4vLi4vc3RvcmUvY29uc3RhbnRcIjtcbi8vVUlcbmltcG9ydCB7IGZhZGUsIG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XG5pbXBvcnQgeyBBcHBCYXIsIFRvb2xiYXIsIENvbnRhaW5lciwgSW5wdXRCYXNlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2ljb25zL1NlYXJjaFwiO1xuLy9IZWxwZXJcbmltcG9ydCB7XG4gIG9ubHlVbmlxdWVBcnJheSxcbiAgc2VhcmNoQXJyYXlXaXRoS2V5QW5kS2V5d29yZCxcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL2hlbHBlclwiO1xuXG4vLyBTdHlsZXNcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xuICBncm93OiB7XG4gICAgZmxleEdyb3c6IDEsXG4gIH0sXG5cbiAgc2VhcmNoOiB7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsIDAuMTUpLFxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsIDAuMjUpLFxuICAgIH0sXG5cbiAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoXCJzbVwiKV06IHtcbiAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICB9LFxuICB9LFxuICBzZWFyY2hJY29uOiB7XG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygwLCAyKSxcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgfSxcbiAgaW5wdXRSb290OiB7XG4gICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICB9LFxuICBpbnB1dElucHV0OiB7XG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxLCAxLCAxLCAwKSxcbiAgICBwYWRkaW5nTGVmdDogYGNhbGMoMWVtICsgJHt0aGVtZS5zcGFjaW5nKDQpfXB4KWAsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFwid2lkdGhcIiksXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cChcIm1kXCIpXToge1xuICAgICAgd2lkdGg6IFwiMjBjaFwiLFxuICAgIH0sXG4gIH0sXG4gIHNlY3Rpb25EZXNrdG9wOiB7XG4gICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKFwibWRcIildOiB7XG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICB9LFxuICB9LFxufSkpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIZWFkZXIoKSB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcbiAgY29uc3QgZ2xvYmFsU3RhdGUgPSB1c2VDb250ZXh0KHN0b3JlKTtcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IGdsb2JhbFN0YXRlO1xuXG4gIGNvbnN0IGhhbmRsZVNlYXJjaCA9IChlKSA9PiB7XG4gICAgY29uc3Qga2V5d29yZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX0tFWVdPUkRfU0VBUkNILCB2YWx1ZToga2V5d29yZCB9KTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBDSEFOR0VfUkVTVUxULFxuICAgICAgdmFsdWU6IHNlYXJjaEFycmF5V2l0aEtleUFuZEtleXdvcmQoc3RhdGUuY2l0aWVzLCBcImNpdHlcIiwga2V5d29yZClcbiAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICBzZWFyY2hBcnJheVdpdGhLZXlBbmRLZXl3b3JkKHN0YXRlLmNpdGllcywgXCJhZG1pbl9uYW1lXCIsIGtleXdvcmQpXG4gICAgICAgIClcbiAgICAgICAgLmZpbHRlcihvbmx5VW5pcXVlQXJyYXkpLFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZ3Jvd30+XG4gICAgICA8QXBwQmFyIHBvc2l0aW9uPVwic3RhdGljXCI+XG4gICAgICAgIDxDb250YWluZXI+XG4gICAgICAgICAgPFRvb2xiYXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZWFyY2h9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZWFyY2hJY29ufT5cbiAgICAgICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPElucHV0QmFzZVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNo4oCmXCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VhcmNofVxuICAgICAgICAgICAgICAgIGNsYXNzZXM9e3tcbiAgICAgICAgICAgICAgICAgIHJvb3Q6IGNsYXNzZXMuaW5wdXRSb290LFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IGNsYXNzZXMuaW5wdXRJbnB1dCxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3sgXCJhcmlhLWxhYmVsXCI6IFwic2VhcmNoXCIgfX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17c3RhdGUua2V5d29yZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZ3Jvd30gLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNlY3Rpb25EZXNrdG9wfT5cbiAgICAgICAgICAgICAgey8qIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJzaG93IDQgbmV3IG1haWxzXCIgY29sb3I9XCJpbmhlcml0XCI+XG4gICAgICAgICAgICA8QmFkZ2UgYmFkZ2VDb250ZW50PXs0fSBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICA8TWFpbEljb24gLz5cbiAgICAgICAgICAgIDwvQmFkZ2U+XG4gICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJzaG93IDE3IG5ldyBub3RpZmljYXRpb25zXCIgY29sb3I9XCJpbmhlcml0XCI+XG4gICAgICAgICAgICA8QmFkZ2UgYmFkZ2VDb250ZW50PXsxN30gY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbnNJY29uIC8+XG4gICAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgZWRnZT1cImVuZFwiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiYWNjb3VudCBvZiBjdXJyZW50IHVzZXJcIlxuICAgICAgICAgICAgYXJpYS1jb250cm9scz17bWVudUlkfVxuICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUHJvZmlsZU1lbnVPcGVufVxuICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8QWNjb3VudENpcmNsZSAvPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj4gKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNlY3Rpb25Nb2JpbGV9PlxuICAgICAgICAgICAgICB7LyogPEljb25CdXR0b25cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJzaG93IG1vcmVcIlxuICAgICAgICAgICAgYXJpYS1jb250cm9scz17bW9iaWxlTWVudUlkfVxuICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTW9iaWxlTWVudU9wZW59XG4gICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxNb3JlSWNvbiAvPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj4gKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1Rvb2xiYXI+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgPC9BcHBCYXI+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVNwYWNpbmc9e2ZhbHNlfWAuICovXG4gIHNwYWNpbmc6IHtcbiAgICAnJiA+IDpub3QoOmZpcnN0LWNoaWxkKSc6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDhcbiAgICB9XG4gIH1cbn07XG52YXIgQ2FyZEFjdGlvbnMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkQWN0aW9ucyhwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZGlzYWJsZVNwYWNpbmcgPSBwcm9wcy5kaXNhYmxlU3BhY2luZyxcbiAgICAgIGRpc2FibGVTcGFjaW5nID0gX3Byb3BzJGRpc2FibGVTcGFjaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU3BhY2luZyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVTcGFjaW5nXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsICFkaXNhYmxlU3BhY2luZyAmJiBjbGFzc2VzLnNwYWNpbmcpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25zLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKi9cbiAgZGlzYWJsZVNwYWNpbmc6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25zJ1xufSkoQ2FyZEFjdGlvbnMpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiwge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtaW5XaWR0aDogNjQsXG4gICAgICBwYWRkaW5nOiAnNnB4IDE2cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3BhbiBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIGNoaWxkcmVuLiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRW5zdXJlIHRoZSBjb3JyZWN0IHdpZHRoIGZvciBpT1MgU2FmYXJpXG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgLiAqL1xuICAgIHRleHQ6IHtcbiAgICAgIHBhZGRpbmc6ICc2cHggOHB4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICB0ZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgdGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIHBhZGRpbmc6ICc1cHggMTVweCcsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKScpLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBvdXRsaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdKSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0sXG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzRdLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzZdXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbOF1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMF0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29udGFpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlRWxldmF0aW9uPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZUVsZXZhdGlvbjoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgQnV0dG9uQmFzZSByb290IGVsZW1lbnQgaWYgdGhlIGJ1dHRvbiBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBib3JkZXJDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCA1cHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgIGFuZCBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dFNpemVMYXJnZToge1xuICAgICAgcGFkZGluZzogJzhweCAxMXB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYCBhbmQgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzNweCA5cHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnN3B4IDIxcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cImNvbnRhaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWRTaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc0cHggMTBweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVMYXJnZToge1xuICAgICAgcGFkZGluZzogJzhweCAyMnB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIHNpemVMYXJnZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHN0YXJ0SWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkLiAqL1xuICAgIHN0YXJ0SWNvbjoge1xuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgbWFyZ2luUmlnaHQ6IDgsXG4gICAgICBtYXJnaW5MZWZ0OiAtNCxcbiAgICAgICcmJGljb25TaXplU21hbGwnOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IC0yXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBlbmRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgZW5kSWNvbjoge1xuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgbWFyZ2luUmlnaHQ6IC00LFxuICAgICAgbWFyZ2luTGVmdDogOCxcbiAgICAgICcmJGljb25TaXplU21hbGwnOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkIGFuZCBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGljb25TaXplU21hbGw6IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDE4XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibWVkaXVtXCJgLiAqL1xuICAgIGljb25TaXplTWVkaXVtOiB7XG4gICAgICAnJiA+ICo6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGZvbnRTaXplOiAyMFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkIGFuZCBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGljb25TaXplTGFyZ2U6IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIyXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBCdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVFbGV2YXRpID0gcHJvcHMuZGlzYWJsZUVsZXZhdGlvbixcbiAgICAgIGRpc2FibGVFbGV2YXRpb24gPSBfcHJvcHMkZGlzYWJsZUVsZXZhdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFbGV2YXRpLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c1JpID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzJGRpc2FibGVGb2N1c1JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSxcbiAgICAgIGVuZEljb25Qcm9wID0gcHJvcHMuZW5kSWNvbixcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBzdGFydEljb25Qcm9wID0gcHJvcHMuc3RhcnRJY29uLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUVsZXZhdGlvblwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImVuZEljb25cIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJmdWxsV2lkdGhcIiwgXCJzaXplXCIsIFwic3RhcnRJY29uXCIsIFwidHlwZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBzdGFydEljb24gPSBzdGFydEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc3RhcnRJY29uLCBjbGFzc2VzW1wiaWNvblNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldKVxuICB9LCBzdGFydEljb25Qcm9wKTtcbiAgdmFyIGVuZEljb24gPSBlbmRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmVuZEljb24sIGNsYXNzZXNbXCJpY29uU2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0pXG4gIH0sIGVuZEljb25Qcm9wKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkJhc2UsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW3ZhcmlhbnRdLCBjbGFzc05hbWUsIGNvbG9yID09PSAnaW5oZXJpdCcgPyBjbGFzc2VzLmNvbG9ySW5oZXJpdCA6IGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcIlwiLmNvbmNhdCh2YXJpYW50KS5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgc2l6ZSAhPT0gJ21lZGl1bScgJiYgW2NsYXNzZXNbXCJcIi5jb25jYXQodmFyaWFudCwgXCJTaXplXCIpLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0sIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXV0sIGRpc2FibGVFbGV2YXRpb24gJiYgY2xhc3Nlcy5kaXNhYmxlRWxldmF0aW9uLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIHN0YXJ0SWNvbiwgY2hpbGRyZW4sIGVuZEljb24pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgbm8gZWxldmF0aW9uIGlzIHVzZWQuXG4gICAqL1xuICBkaXNhYmxlRWxldmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYWZ0ZXIgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgZW5kSWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBkZWZpbmVkLCBhbiBgYWAgZWxlbWVudCB3aWxsIGJlIHVzZWQgYXMgdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydsYXJnZScsICdtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBzdGFydEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2NvbnRhaW5lZCcsICdvdXRsaW5lZCcsICd0ZXh0J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbidcbn0pKEJ1dHRvbik7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIG1hcmdpbkxlZnQ6IC0xMSxcbiAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgIC8vIHVzZWQgZm9yIHJvdyBwcmVzZW50YXRpb24gb2YgcmFkaW8vY2hlY2tib3hcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cInN0YXJ0XCJgLiAqL1xuICAgIGxhYmVsUGxhY2VtZW50U3RhcnQ6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gICAgICBtYXJnaW5MZWZ0OiAxNixcbiAgICAgIC8vIHVzZWQgZm9yIHJvdyBwcmVzZW50YXRpb24gb2YgcmFkaW8vY2hlY2tib3hcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbGFiZWxQbGFjZW1lbnQ9XCJ0b3BcImAuICovXG4gICAgbGFiZWxQbGFjZW1lbnRUb3A6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gICAgICBtYXJnaW5MZWZ0OiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cImJvdHRvbVwiYC4gKi9cbiAgICBsYWJlbFBsYWNlbWVudEJvdHRvbToge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBtYXJnaW5MZWZ0OiAxNlxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsYWJlbCdzIFR5cG9ncmFwaHkgY29tcG9uZW50LiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIERyb3AgaW4gcmVwbGFjZW1lbnQgb2YgdGhlIGBSYWRpb2AsIGBTd2l0Y2hgIGFuZCBgQ2hlY2tib3hgIGNvbXBvbmVudC5cbiAqIFVzZSB0aGlzIGNvbXBvbmVudCBpZiB5b3Ugd2FudCB0byBkaXNwbGF5IGFuIGV4dHJhIGxhYmVsLlxuICovXG5cbnZhciBGb3JtQ29udHJvbExhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUNvbnRyb2xMYWJlbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZCxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udHJvbCA9IHByb3BzLmNvbnRyb2wsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgX3Byb3BzJGxhYmVsUGxhY2VtZW50ID0gcHJvcHMubGFiZWxQbGFjZW1lbnQsXG4gICAgICBsYWJlbFBsYWNlbWVudCA9IF9wcm9wcyRsYWJlbFBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2VuZCcgOiBfcHJvcHMkbGFiZWxQbGFjZW1lbnQsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoZWNrZWRcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udHJvbFwiLCBcImRpc2FibGVkXCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbFwiLCBcImxhYmVsUGxhY2VtZW50XCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwidmFsdWVcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcblxuICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29udHJvbC5wcm9wcy5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkaXNhYmxlZCA9IGNvbnRyb2wucHJvcHMuZGlzYWJsZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gIH1cblxuICB2YXIgY29udHJvbFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9O1xuICBbJ2NoZWNrZWQnLCAnbmFtZScsICdvbkNoYW5nZScsICd2YWx1ZScsICdpbnB1dFJlZiddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICh0eXBlb2YgY29udHJvbC5wcm9wc1trZXldID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvcHNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnRyb2xQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBsYWJlbFBsYWNlbWVudCAhPT0gJ2VuZCcgJiYgY2xhc3Nlc1tcImxhYmVsUGxhY2VtZW50XCIuY29uY2F0KGNhcGl0YWxpemUobGFiZWxQbGFjZW1lbnQpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjb250cm9sLCBjb250cm9sUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7XG4gICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZClcbiAgfSwgbGFiZWwpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2xMYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgYXBwZWFycyBzZWxlY3RlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBjb250cm9sIGVsZW1lbnQuIEZvciBpbnN0YW5jZSwgaXQgY2FuIGJlIGJlIGEgYFJhZGlvYCwgYSBgU3dpdGNoYCBvciBhIGBDaGVja2JveGAuXG4gICAqL1xuICBjb250cm9sOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb250cm9sIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBiZSB1c2VkIGluIGFuIGVuY2xvc2luZyBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdlbmQnLCAnc3RhcnQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyBjaGVja2VkIHN0YXRlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgIChib29sZWFuKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbExhYmVsJ1xufSkoRm9ybUNvbnRyb2xMYWJlbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRSAxMS5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJzdGFydFwiYC4gKi9cbiAgICBlZGdlU3RhcnQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IC0xMixcbiAgICAgICckc2l6ZVNtYWxsJic6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTNcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cImVuZFwiYC4gKi9cbiAgICBlZGdlRW5kOiB7XG4gICAgICBtYXJnaW5SaWdodDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5SaWdodDogLTNcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAzLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxOClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNoaWxkcmVuIGNvbnRhaW5lciBlbGVtZW50LiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFJlZmVyIHRvIHRoZSBbSWNvbnNdKC9jb21wb25lbnRzL2ljb25zLykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvblxuICogcmVnYXJkaW5nIHRoZSBhdmFpbGFibGUgaWNvbiBvcHRpb25zLlxuICovXG5cbnZhciBJY29uQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbkJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZWRnZSA9IHByb3BzLmVkZ2UsXG4gICAgICBlZGdlID0gX3Byb3BzJGVkZ2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVkZ2UsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZWRnZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJzaXplXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc2l6ZSA9PT0gXCJzbWFsbFwiICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwge1xuICAgICAgJ3N0YXJ0JzogY2xhc3Nlcy5lZGdlU3RhcnQsXG4gICAgICAnZW5kJzogY2xhc3Nlcy5lZGdlRW5kXG4gICAgfVtlZGdlXSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGljb24gZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2s7XG4gICAgfSk7XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciAnICsgJ3RvIGEgY2hpbGQgb2YgYSBidXR0b24gZWxlbWVudC4nLCAnRmlyZWZveCB3aWxsIG5ldmVyIHRyaWdnZXIgdGhlIGV2ZW50LicsICdZb3Ugc2hvdWxkIG1vdmUgdGhlIG9uQ2xpY2sgbGlzdGVuZXIgdG8gdGhlIHBhcmVudCBidXR0b24gZWxlbWVudC4nLCAnaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzOTU3J10uam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nXG59KShJY29uQnV0dG9uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIHBhZGRpbmc6IDlcbiAgfSxcbiAgY2hlY2tlZDoge30sXG4gIGRpc2FibGVkOiB7fSxcbiAgaW5wdXQ6IHtcbiAgICBjdXJzb3I6ICdpbmhlcml0JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgekluZGV4OiAxXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFN3aXRjaEJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2l0Y2hCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNoZWNrZWRQcm9wID0gcHJvcHMuY2hlY2tlZCxcbiAgICAgIGNoZWNrZWRJY29uID0gcHJvcHMuY2hlY2tlZEljb24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRDaGVja2VkID0gcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Gb2N1c1wiLCBcImNoZWNrZWRcIiwgXCJjaGVja2VkSWNvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0Q2hlY2tlZFwiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogY2hlY2tlZFByb3AsXG4gICAgZGVmYXVsdDogQm9vbGVhbihkZWZhdWx0Q2hlY2tlZCksXG4gICAgbmFtZTogJ1N3aXRjaEJhc2UnLFxuICAgIHN0YXRlOiAnY2hlY2tlZCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSBfc2xpY2VkVG9BcnJheShfdXNlQ29udHJvbGxlZCwgMiksXG4gICAgICBjaGVja2VkID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0Q2hlY2tlZFN0YXRlID0gX3VzZUNvbnRyb2xsZWQyWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIG5ld0NoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICBzZXRDaGVja2VkU3RhdGUobmV3Q2hlY2tlZCk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIC8vIFRPRE8gdjU6IHJlbW92ZSB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgICAgb25DaGFuZ2UoZXZlbnQsIG5ld0NoZWNrZWQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlZFByb3A7XG5cbiAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgaWYgKHR5cGVvZiBkaXNhYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhc0xhYmVsRm9yID0gdHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGVja2VkICYmIGNsYXNzZXMuY2hlY2tlZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHJvbGU6IHVuZGVmaW5lZCxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHtcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBjaGVja2VkOiBjaGVja2VkUHJvcCxcbiAgICBkZWZhdWx0Q2hlY2tlZDogZGVmYXVsdENoZWNrZWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmlucHV0LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBpZDogaGFzTGFiZWxGb3IgJiYgaWQsXG4gICAgbmFtZTogbmFtZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHJlZjogaW5wdXRSZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCBpbnB1dFByb3BzKSksIGNoZWNrZWQgPyBjaGVja2VkSWNvbiA6IGljb24pO1xufSk7IC8vIE5COiBJZiBjaGFuZ2VkLCBwbGVhc2UgdXBkYXRlIENoZWNrYm94LCBTd2l0Y2ggYW5kIFJhZGlvXG4vLyBzbyB0aGF0IHRoZSBBUEkgZG9jdW1lbnRhdGlvbiBpcyB1cGRhdGVkLlxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2l0Y2hCYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jaGVja2VkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyBjaGVja2VkIHN0YXRlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgIChib29sZWFuKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGNvbXBvbmVudCBwcm9wIGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlU3dpdGNoQmFzZSdcbn0pKFN3aXRjaEJhc2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgSWNvbkJ1dHRvblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgU3dpdGNoQmFzZSBmcm9tICcuLi9pbnRlcm5hbC9Td2l0Y2hCYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgd2lkdGg6IDM0ICsgMTIgKiAyLFxuICAgICAgaGVpZ2h0OiAxNCArIDEyICogMixcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICAvLyBSZXNldCB0aGUgc3RhY2tpbmcgY29udGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwic3RhcnRcImAuICovXG4gICAgZWRnZVN0YXJ0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFN3aXRjaEJhc2VgIGNvbXBvbmVudCdzIGByb290YCBjbGFzcy4gKi9cbiAgICBzd2l0Y2hCYXNlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB6SW5kZXg6IDEsXG4gICAgICAvLyBSZW5kZXIgYWJvdmUgdGhlIGZvY3VzIHJpcHBsZS5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNTBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0sXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydsZWZ0JywgJ3RyYW5zZm9ybSddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDIwcHgpJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjEyIDogMC4xXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs4MDBdXG4gICAgICB9LFxuICAgICAgJyYkY2hlY2tlZCArICR0cmFjayc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIFN3aXRjaEJhc2UgY29tcG9uZW50J3Mgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgd2lkdGg6IDQwLFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIHBhZGRpbmc6IDcsXG4gICAgICAnJiAkdGh1bWInOiB7XG4gICAgICAgIHdpZHRoOiAxNixcbiAgICAgICAgaGVpZ2h0OiAxNlxuICAgICAgfSxcbiAgICAgICcmICRzd2l0Y2hCYXNlJzoge1xuICAgICAgICBwYWRkaW5nOiA0LFxuICAgICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTZweCknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBTd2l0Y2hCYXNlYCBjb21wb25lbnQncyBgY2hlY2tlZGAgY2xhc3MuICovXG4gICAgY2hlY2tlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgU3dpdGNoQmFzZSBjb21wb25lbnQncyBkaXNhYmxlZCBjbGFzcy4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgU3dpdGNoQmFzZSBjb21wb25lbnQncyBpbnB1dCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBsZWZ0OiAnLTEwMCUnLFxuICAgICAgd2lkdGg6ICczMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgdXNlZCB0byBjcmVhdGUgdGhlIHRodW1iIHBhc3NlZCB0byB0aGUgaW50ZXJuYWwgYFN3aXRjaEJhc2VgIGNvbXBvbmVudCBgaWNvbmAgcHJvcC4gKi9cbiAgICB0aHVtYjoge1xuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHdpZHRoOiAyMCxcbiAgICAgIGhlaWdodDogMjAsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0cmFjayBlbGVtZW50LiAqL1xuICAgIHRyYWNrOiB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6IDE0IC8gMixcbiAgICAgIHpJbmRleDogLTEsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydvcGFjaXR5JywgJ2JhY2tncm91bmQtY29sb3InXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmNvbW1vbi5ibGFjayA6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gMC4zOCA6IDAuM1xuICAgIH1cbiAgfTtcbn07XG52YXIgU3dpdGNoID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3dpdGNoKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3NlY29uZGFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZWRnZSA9IHByb3BzLmVkZ2UsXG4gICAgICBlZGdlID0gX3Byb3BzJGVkZ2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVkZ2UsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZWRnZVwiLCBcInNpemVcIl0pO1xuXG4gIHZhciBpY29uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudGh1bWJcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwge1xuICAgICAgJ3N0YXJ0JzogY2xhc3Nlcy5lZGdlU3RhcnQsXG4gICAgICAnZW5kJzogY2xhc3Nlcy5lZGdlRW5kXG4gICAgfVtlZGdlXSwgc2l6ZSA9PT0gXCJzbWFsbFwiICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpdGNoQmFzZSwgX2V4dGVuZHMoe1xuICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICBpY29uOiBpY29uLFxuICAgIGNoZWNrZWRJY29uOiBpY29uLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5zd2l0Y2hCYXNlLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSksXG4gICAgICBpbnB1dDogY2xhc3Nlcy5pbnB1dCxcbiAgICAgIGNoZWNrZWQ6IGNsYXNzZXMuY2hlY2tlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFja1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRDaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3dpdGNoIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydlbmQnLCAnc3RhcnQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgc3dpdGNoLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIHN3aXRjaCBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICogVGhlIGJyb3dzZXIgdXNlcyBcIm9uXCIgYXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTd2l0Y2gnXG59KShTd2l0Y2gpOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG4vL1N0b3JlXG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gXCIuLi8uLi9zdG9yZS9zdG9yZVwiO1xuaW1wb3J0IHtcbiAgQ0hBTkdFX0tFWVdPUkRfU0VBUkNILFxuICBDSEFOR0VfUkVTVUxULFxuICBDVVJSRU5UX0NJVFlfSU5ERVgsXG4gIEdFVF9DSVRJRVMsXG4gIEdFVF9DSVRJRVNfU1VDQ0VTUyxcbiAgR0VUX0NJVElFU19GQUlMLFxuICBHRVRfQ1VSUkVOVF9MT0NBVElPTixcbiAgR0VUX0NVUlJFTlRfTE9DQVRJT05fRkFJTCxcbn0gZnJvbSBcIi4uLy4uL3N0b3JlL2NvbnN0YW50XCI7XG4vLyBVSVxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgQ2FyZCxcbiAgQ2FyZEFjdGlvbnMsXG4gIFR5cG9ncmFwaHksXG4gIFN3aXRjaCxcbiAgRm9ybUNvbnRyb2xMYWJlbCxcbiAgQWxlcnQsXG59IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xuXG4vLyBIZWxwZXJcbmltcG9ydCB7XG4gIGNhbGNEaXN0YW5jZUJ5TGF0TG5nLFxuICBnZXRHZW9GaW5kTWUsXG4gIHNlYXJjaEFycmF5V2l0aEtleUFuZEtleXdvcmQsXG4gIG9ubHlVbmlxdWVBcnJheSxcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL2hlbHBlclwiO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcbiAgcm9vdDoge1xuICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygxLCAwLCAxLCAwKSxcbiAgfSxcbiAgY2FyZEFjdGlvbjoge1xuICAgIGZsZXhXcmFwOiBcIndyYXBcIixcbiAgICBbdGhlbWUuYnJlYWtwb2ludHMuZG93bihcInhzXCIpXToge1xuICAgICAgbWluSGVpZ2h0OiBcIjEwMHB4XCIsXG4gICAgfSxcbiAgfSxcbiAgYXJyb3c6IHtcbiAgICBib3JkZXI6IFwic29saWQgI2ZmZlwiLFxuICAgIGJvcmRlcldpZHRoOiBcIjAgMnB4IDJweCAwXCIsXG4gICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAuMyksXG4gICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygxKSxcbiAgfSxcbiAgYXJyb3dVcDoge1xuICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoLTEzNWRlZylcIixcbiAgfSxcbiAgYXJyb3dEb3duOiB7XG4gICAgdHJhbnNmb3JtOiBcInJvdGF0ZSg0NWRlZylcIixcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogMTQsXG4gIH0sXG4gIGFsZXJ0OiB7XG4gICAgcGFkZGluZzogXCIxMHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgbWFyZ2luTGVmdDogXCIxNXB4XCIsXG4gIH0sXG59KSk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGaWx0ZXJzKCkge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIGNvbnN0IGdsb2JhbFN0YXRlID0gdXNlQ29udGV4dChzdG9yZSk7XG4gIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSBnbG9iYWxTdGF0ZTtcbiAgY29uc3QgW3R5cGVTb3J0Q2l0eSwgc2V0VHlwZVNvcnRDaXR5XSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbdHlwZVNvcnRQb3B1bGF0aW9uLCBzZXRUeXBlU29ydFBvcHVsYXRpb25dID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtmaW5kTmVhckNpdGllcywgc2V0RmluZE5lYXJDaXRpZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZpbmROZWFyQ2l0aWVzKSB7XG4gICAgICBnZXRGaW5kTmVhckNpdGllcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IENIQU5HRV9SRVNVTFQsXG4gICAgICAgIHZhbHVlOiBzZWFyY2hBcnJheVdpdGhLZXlBbmRLZXl3b3JkKHN0YXRlLmNpdGllcywgXCJjaXR5XCIsIHN0YXRlLmtleXdvcmQpXG4gICAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICAgIHNlYXJjaEFycmF5V2l0aEtleUFuZEtleXdvcmQoXG4gICAgICAgICAgICAgIHN0YXRlLmNpdGllcyxcbiAgICAgICAgICAgICAgXCJhZG1pbl9uYW1lXCIsXG4gICAgICAgICAgICAgIHN0YXRlLmtleXdvcmRcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICAgLmZpbHRlcihvbmx5VW5pcXVlQXJyYXkpLFxuICAgICAgfSk7IC8vIHJlc2V0IERpc3RhbmNlXG4gICAgfVxuICB9LCBbZmluZE5lYXJDaXRpZXNdKTtcblxuICBjb25zdCBnZXRGaW5kTmVhckNpdGllcyA9ICgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEdFVF9DSVRJRVMgfSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgY2l0aWVzID0gYWRkRGlzdGFuY2VUb1Jlc3VsdChzdGF0ZS5jaXRpZXMpO1xuICAgICAgY29uc3QgcmVzdWx0U2VhcmNoID0gYWRkRGlzdGFuY2VUb1Jlc3VsdChzdGF0ZS5yZXN1bHRTZWFyY2gpXG4gICAgICAgIC5maWx0ZXIoKGNpdHkpID0+IHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKGNpdHkuZGlzdGFuY2UpIDwgMzA7XG4gICAgICAgIH0pXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PlxuICAgICAgICAgIE51bWJlcihhW1wiZGlzdGFuY2VcIl0pID4gTnVtYmVyKGJbXCJkaXN0YW5jZVwiXSkgPyAxIDogLTFcbiAgICAgICAgKTtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogR0VUX0NJVElFU19TVUNDRVNTLCB2YWx1ZTogY2l0aWVzIH0pO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBDSEFOR0VfUkVTVUxULFxuICAgICAgICB2YWx1ZTogcmVzdWx0U2VhcmNoLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBHRVRfQ0lUSUVTX0ZBSUwsIHZhbHVlOiBlIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYWRkRGlzdGFuY2VUb1Jlc3VsdCA9IChjaXRpZXMpID0+IHtcbiAgICByZXR1cm4gY2l0aWVzLm1hcCgoY2l0eSkgPT4gKHtcbiAgICAgIC4uLmNpdHksXG4gICAgICBkaXN0YW5jZTogY2FsY0Rpc3RhbmNlQnlMYXRMbmcoXG4gICAgICAgIGNpdHk/LmxhdCxcbiAgICAgICAgY2l0eT8ubG5nLFxuICAgICAgICBzdGF0ZS5jdXJyZW50TG9jYXRpb25cbiAgICAgICksXG4gICAgfSkpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVNvcnQgPSAobGlzdCwgZmllbGQsIHR5cGUpID0+IHtcbiAgICBsZXQgbmV3TGlzdDtcbiAgICBpZiAodHlwZSA9PT0gXCJhc2NcIikge1xuICAgICAgbmV3TGlzdCA9IGxpc3Quc29ydCgoYSwgYikgPT4gKGFbZmllbGRdID4gYltmaWVsZF0gPyAxIDogLTEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3TGlzdCA9IGxpc3Quc29ydCgoYSwgYikgPT4gKGFbZmllbGRdIDwgYltmaWVsZF0gPyAxIDogLTEpKTtcbiAgICB9XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDVVJSRU5UX0NJVFlfSU5ERVgsIHZhbHVlOiAwIH0pO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1JFU1VMVCwgdmFsdWU6IG5ld0xpc3QgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmVzZXQgPSAoKSA9PiB7XG4gICAgc2V0VHlwZVNvcnRDaXR5KHRydWUpO1xuICAgIHNldFR5cGVTb3J0UG9wdWxhdGlvbih0cnVlKTtcbiAgICBzZXRGaW5kTmVhckNpdGllcyhmYWxzZSk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDVVJSRU5UX0NJVFlfSU5ERVgsIHZhbHVlOiAwIH0pO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX0tFWVdPUkRfU0VBUkNILCB2YWx1ZTogXCJcIiB9KTtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEdFVF9DVVJSRU5UX0xPQ0FUSU9OX0ZBSUwsIHZhbHVlOiBcIlwiIH0pO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1JFU1VMVCwgdmFsdWU6IHN0YXRlLmNpdGllcyB9KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaW5kQ2l0aWVzTmVhck1lID0gKCkgPT4ge1xuICAgIHNldEZpbmROZWFyQ2l0aWVzKCFmaW5kTmVhckNpdGllcyk7XG4gICAgZ2V0R2VvRmluZE1lKGhhbmRsZVN1Y2Nlc3NHZXRMb2NhdGlvbiwgaGFuZGxlRXJyb3JHZXRMb2NhdGlvbik7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVycm9yR2V0TG9jYXRpb24gPSAoZSkgPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogR0VUX0NVUlJFTlRfTE9DQVRJT05fRkFJTCwgdmFsdWU6IGUgfSk7XG4gICAgc2V0RmluZE5lYXJDaXRpZXMoZmFsc2UpO1xuICB9O1xuICBjb25zdCBoYW5kbGVTdWNjZXNzR2V0TG9jYXRpb24gPSAob2JqZWN0KSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBHRVRfQ1VSUkVOVF9MT0NBVElPTiwgdmFsdWU6IG9iamVjdCB9KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxDYXJkIGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgIDxDYXJkQWN0aW9ucyBjbGFzc05hbWU9e2NsYXNzZXMuY2FyZEFjdGlvbn0+XG4gICAgICAgIDxUeXBvZ3JhcGh5PlNvcnQgQnk6PC9UeXBvZ3JhcGh5PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZVNvcnQoXG4gICAgICAgICAgICAgIHN0YXRlLnJlc3VsdFNlYXJjaCxcbiAgICAgICAgICAgICAgXCJjaXR5XCIsXG4gICAgICAgICAgICAgIHR5cGVTb3J0Q2l0eSA/IFwiYXNjXCIgOiBcImRlc2NcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNldFR5cGVTb3J0Q2l0eSghdHlwZVNvcnRDaXR5KTtcbiAgICAgICAgICAgIHNldFR5cGVTb3J0UG9wdWxhdGlvbih0cnVlKTtcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgQ2l0eSBOYW1le1wiIFwifVxuICAgICAgICAgIDxpXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake2NsYXNzZXMuYXJyb3d9ICR7XG4gICAgICAgICAgICAgIHR5cGVTb3J0Q2l0eSA/IGNsYXNzZXMuYXJyb3dVcCA6IGNsYXNzZXMuYXJyb3dEb3duXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVTb3J0KFxuICAgICAgICAgICAgICBzdGF0ZS5yZXN1bHRTZWFyY2gsXG4gICAgICAgICAgICAgIFwicG9wdWxhdGlvbnNcIixcbiAgICAgICAgICAgICAgdHlwZVNvcnRQb3B1bGF0aW9uID8gXCJhc2NcIiA6IFwiZGVzY1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2V0VHlwZVNvcnRQb3B1bGF0aW9uKCF0eXBlU29ydFBvcHVsYXRpb24pO1xuICAgICAgICAgICAgc2V0VHlwZVNvcnRDaXR5KHRydWUpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBQb3B1bGF0aW9ue1wiIFwifVxuICAgICAgICAgIDxpXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake2NsYXNzZXMuYXJyb3d9ICR7XG4gICAgICAgICAgICAgIHR5cGVTb3J0UG9wdWxhdGlvbiA/IGNsYXNzZXMuYXJyb3dVcCA6IGNsYXNzZXMuYXJyb3dEb3duXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8Rm9ybUNvbnRyb2xMYWJlbFxuICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRmluZENpdGllc05lYXJNZX1cbiAgICAgICAgICAgICAgY2hlY2tlZD17ZmluZE5lYXJDaXRpZXN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIH1cbiAgICAgICAgICBsYWJlbFBsYWNlbWVudD1cInN0YXJ0XCJcbiAgICAgICAgICBsYWJlbD1cIkZpbmQgTmVhciBDaXRpZXNcIlxuICAgICAgICAvPlxuICAgICAgICA8QnV0dG9uIHNpemU9XCJzbWFsbFwiIHZhcmlhbnQ9XCJjb250YWluZWRcIiBvbkNsaWNrPXtoYW5kbGVSZXNldH0+XG4gICAgICAgICAgQ2xlYXIgRmlsdGVyc1xuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAge3N0YXRlLmN1cnJlbnRMb2NhdGlvbkVycm9yLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmFsZXJ0fT57c3RhdGUuY3VycmVudExvY2F0aW9uRXJyb3J9PC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L0NhcmRBY3Rpb25zPlxuICAgIDwvQ2FyZD5cbiAgKTtcbn1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xudmFyIFNJWkUgPSA0NDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3RhdGljXCJgLiAqL1xuICAgIHN0YXRpYzoge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBpbmRldGVybWluYXRlOiB7XG4gICAgICBhbmltYXRpb246ICckY2lyY3VsYXItcm90YXRlIDEuNHMgbGluZWFyIGluZmluaXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcImAuICovXG4gICAgZGV0ZXJtaW5hdGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYHN2Z2AgZWxlbWVudC4gKi9cbiAgICBzdmc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycgLy8gS2VlcHMgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoLiAqL1xuICAgIGNpcmNsZToge1xuICAgICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyAvLyBVc2UgYnV0dCB0byBmb2xsb3cgdGhlIHNwZWNpZmljYXRpb24sIGJ5IGNoYW5jZSwgaXQncyBhbHJlYWR5IHRoZSBkZWZhdWx0IENTUyB2YWx1ZS5cbiAgICAgIC8vIHN0cm9rZUxpbmVjYXA6ICdidXR0JyxcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJzdGF0aWNcImAuICovXG4gICAgY2lyY2xlU3RhdGljOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3N0cm9rZS1kYXNob2Zmc2V0JylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoIGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBjaXJjbGVJbmRldGVybWluYXRlOiB7XG4gICAgICBhbmltYXRpb246ICckY2lyY3VsYXItZGFzaCAxLjRzIGVhc2UtaW4tb3V0IGluZmluaXRlJyxcbiAgICAgIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgICAgIHN0cm9rZURhc2hhcnJheTogJzgwcHgsIDIwMHB4JyxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICcwcHgnIC8vIEFkZCB0aGUgdW5pdCB0byBmaXggYSBFZGdlIDE2IGFuZCBiZWxvdyBidWcuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoIGlmIGB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcImAuICovXG4gICAgY2lyY2xlRGV0ZXJtaW5hdGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgY2lyY3VsYXItcm90YXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICAvLyBGaXggSUUgMTEgd29iYmx5XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgzNjBkZWcpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgY2lyY3VsYXItZGFzaCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnMXB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICcwcHgnXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnMTAwcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJy0xNXB4J1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTEyNXB4J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYGRpc2FibGVTaHJpbms9e3RydWV9YC4gKi9cbiAgICBjaXJjbGVEaXNhYmxlU2hyaW5rOiB7XG4gICAgICBhbmltYXRpb246ICdub25lJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cblxudmFyIENpcmN1bGFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaXJjdWxhclByb2dyZXNzKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVTaHJpbmsgPSBwcm9wcy5kaXNhYmxlU2hyaW5rLFxuICAgICAgZGlzYWJsZVNocmluayA9IF9wcm9wcyRkaXNhYmxlU2hyaW5rID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU2hyaW5rLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyA0MCA6IF9wcm9wcyRzaXplLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIF9wcm9wcyR0aGlja25lc3MgPSBwcm9wcy50aGlja25lc3MsXG4gICAgICB0aGlja25lc3MgPSBfcHJvcHMkdGhpY2tuZXNzID09PSB2b2lkIDAgPyAzLjYgOiBfcHJvcHMkdGhpY2tuZXNzLFxuICAgICAgX3Byb3BzJHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2YWx1ZSA9IF9wcm9wcyR2YWx1ZSA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR2YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2luZGV0ZXJtaW5hdGUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZVNocmlua1wiLCBcInNpemVcIiwgXCJzdHlsZVwiLCBcInRoaWNrbmVzc1wiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGNpcmNsZVN0eWxlID0ge307XG4gIHZhciByb290U3R5bGUgPSB7fTtcbiAgdmFyIHJvb3RQcm9wcyA9IHt9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdzdGF0aWMnKSB7XG4gICAgdmFyIGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqICgoU0laRSAtIHRoaWNrbmVzcykgLyAyKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gXCJcIi5jb25jYXQoKCgxMDAgLSB2YWx1ZSkgLyAxMDAgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpLCBcInB4XCIpO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHtcbiAgICAgICdkZXRlcm1pbmF0ZSc6IGNsYXNzZXMuZGV0ZXJtaW5hdGUsXG4gICAgICAnaW5kZXRlcm1pbmF0ZSc6IGNsYXNzZXMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgICdzdGF0aWMnOiBjbGFzc2VzLnN0YXRpY1xuICAgIH1bdmFyaWFudF0pLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICB3aWR0aDogc2l6ZSxcbiAgICAgIGhlaWdodDogc2l6ZVxuICAgIH0sIHJvb3RTdHlsZSwgc3R5bGUpLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgdmlld0JveDogXCJcIi5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSwgXCIgXCIpLmNvbmNhdChTSVpFKVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY2lyY2xlLCBkaXNhYmxlU2hyaW5rICYmIGNsYXNzZXMuY2lyY2xlRGlzYWJsZVNocmluaywge1xuICAgICAgJ2RldGVybWluYXRlJzogY2xhc3Nlcy5jaXJjbGVEZXRlcm1pbmF0ZSxcbiAgICAgICdpbmRldGVybWluYXRlJzogY2xhc3Nlcy5jaXJjbGVJbmRldGVybWluYXRlLFxuICAgICAgJ3N0YXRpYyc6IGNsYXNzZXMuY2lyY2xlU3RhdGljXG4gICAgfVt2YXJpYW50XSksXG4gICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgIGN4OiBTSVpFLFxuICAgIGN5OiBTSVpFLFxuICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICB9KSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2hyaW5rIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICogVGhpcyBvbmx5IHdvcmtzIGlmIHZhcmlhbnQgaXMgYGluZGV0ZXJtaW5hdGVgLlxuICAgKi9cbiAgZGlzYWJsZVNocmluazogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgdGhlIGBkaXNhYmxlU2hyaW5rYCBwcm9wICcgKyAnd2l0aCBhIHZhcmlhbnQgb3RoZXIgdGhhbiBgaW5kZXRlcm1pbmF0ZWAuIFRoaXMgd2lsbCBoYXZlIG5vIGVmZmVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaXJjbGUuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGUuZyAnM3JlbScuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICB0aGlja25lc3M6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdzdGF0aWMnXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciB2YXJpYW50ID0gcHJvcHMudmFyaWFudDtcblxuICAgIGlmICh2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogYHZhcmlhbnQ9XCJzdGF0aWNcImAgd2FzIGRlcHJlY2F0ZWQuIFVzZSBgdmFyaWFudD1cImRldGVybWluYXRlXCJgIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBmbGlwOiBmYWxzZVxufSkoQ2lyY3VsYXJQcm9ncmVzcyk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuLy9TdG9yZVxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi4vLi4vc3RvcmUvc3RvcmVcIjtcbmltcG9ydCB7XG4gIENIQU5HRV9SRVNVTFQsXG4gIEdFVF9DSVRJRVMsXG4gIEdFVF9DSVRJRVNfRkFJTCxcbiAgR0VUX0NJVElFU19TVUNDRVNTLFxuICBDVVJSRU5UX0NJVFlfSU5ERVgsXG59IGZyb20gXCIuLi8uLi9zdG9yZS9jb25zdGFudFwiO1xuLy8gQ01QXG5pbXBvcnQgeyBMaXN0LCBGaWx0ZXJzIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcbi8vVUlcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XG5pbXBvcnQgeyBQYXBlciwgVHlwb2dyYXBoeSwgQ2lyY3VsYXJQcm9ncmVzcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xuLy8gSGVscGVyXG5pbXBvcnQgeyBzaG93RW1wdHlTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaGVscGVyXCI7XG5cbi8vIFN0eWxlc1xuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XG4gIGZpbHRlckJveDoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZWRcIixcbiAgfSxcbiAgY29udGVudDoge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICB9LFxuICBzaWRlQmFyOiB7XG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oXCJ4c1wiKV06IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICB9LFxuICB9LFxuICByZXN1bHQ6IHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgbWF4SGVpZ2h0OiBcIjI5NXB4XCIsXG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygyLjQsIDEpLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy5kb3duKFwieHNcIildOiB7XG4gICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICB9LFxuICB9LFxuICBwYXBlcjoge1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMiksXG4gIH0sXG4gIGxvYWRpbmc6IHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIGhlaWdodDogXCI0MHZoXCIsXG4gIH0sXG59KSk7XG5cbmNvbnN0IEhvbWUgPSAoKSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcblxuICBjb25zdCBnbG9iYWxTdGF0ZSA9IHVzZUNvbnRleHQoc3RvcmUpO1xuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gZ2xvYmFsU3RhdGU7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZmV0Y2hDaXR5KCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBmZXRjaENpdHkgPSBhc3luYyAoKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBHRVRfQ0lUSUVTIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZldGNoKFwiL3Rlc3QvZGIuanNvblwiKVxuICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNpdGllcyA9IGRhdGE/Lm5sO1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogR0VUX0NJVElFU19TVUNDRVNTLCB2YWx1ZTogY2l0aWVzIH0pO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IENIQU5HRV9SRVNVTFQsXG4gICAgICAgICAgICB2YWx1ZTogY2l0aWVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IEdFVF9DSVRJRVNfRkFJTCwgdmFsdWU6IGUgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJldmlld0NpdHkgPSAoaW5kZXgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IENVUlJFTlRfQ0lUWV9JTkRFWCwgdmFsdWU6IGluZGV4IH0pO1xuICB9O1xuICBjb25zdCByZW5kZXJSZXN1bHQgPSAoKSA9PiAoXG4gICAgPFBhcGVyIGNvbXBvbmVudD1cImRpdlwiIGVsZXZhdGlvbj17M30gY2xhc3NOYW1lPXtjbGFzc2VzLnBhcGVyfT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICB7c3RhdGUucmVzdWx0U2VhcmNoW3N0YXRlLmN1cnJlbnRDaXR5SW5kZXhdPy5jaXR5fVxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY29tcG9uZW50PVwiZGl2XCI+XG4gICAgICAgIFByb3ZlbmNlOlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIiBjb2xvcj1cInRleHRQcmltYXJ5XCIgY29tcG9uZW50PVwic3BhblwiPlxuICAgICAgICAgIHtzdGF0ZS5yZXN1bHRTZWFyY2hbc3RhdGUuY3VycmVudENpdHlJbmRleF0/LmFkbWluX25hbWV9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICBjYXBpdGFsOlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIiBjb2xvcj1cInRleHRQcmltYXJ5XCIgY29tcG9uZW50PVwic3BhblwiPlxuICAgICAgICAgIHtzdGF0ZS5yZXN1bHRTZWFyY2hbc3RhdGUuY3VycmVudENpdHlJbmRleF0/LmNhcGl0YWx9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDwvVHlwb2dyYXBoeT57XCIgXCJ9XG4gICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHRTZWNvbmRhcnlcIiBjb21wb25lbnQ9XCJkaXZcIj5cbiAgICAgICAgcG9wdWxhdGlvbjpcbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg2XCIgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiIGNvbXBvbmVudD1cInNwYW5cIj5cbiAgICAgICAgICB7c2hvd0VtcHR5U3RyaW5nKFxuICAgICAgICAgICAgc3RhdGUucmVzdWx0U2VhcmNoW3N0YXRlLmN1cnJlbnRDaXR5SW5kZXhdPy5wb3B1bGF0aW9uXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgey8qIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICBEaXN0YW5jZTpcbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg2XCIgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiIGNvbXBvbmVudD1cInNwYW5cIj5cbiAgICAgICAgICB7YCR7c3RhdGUucmVzdWx0U2VhcmNoW3N0YXRlLmN1cnJlbnRDaXR5SW5kZXhdPy5kaXN0YW5jZX0ga21gfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L1R5cG9ncmFwaHk+ICovfVxuICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCIgY29tcG9uZW50PVwiZGl2XCI+XG4gICAgICAgIExhdDpcbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg2XCIgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiIGNvbXBvbmVudD1cInNwYW5cIj5cbiAgICAgICAgICB7c3RhdGUucmVzdWx0U2VhcmNoW3N0YXRlLmN1cnJlbnRDaXR5SW5kZXhdPy5sYXR9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICBMbmc6XG4gICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNlwiIGNvbG9yPVwidGV4dFByaW1hcnlcIiBjb21wb25lbnQ9XCJzcGFuXCI+XG4gICAgICAgICAge3N0YXRlLnJlc3VsdFNlYXJjaFtzdGF0ZS5jdXJyZW50Q2l0eUluZGV4XT8ubG5nfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgPC9QYXBlcj5cbiAgKTtcblxuICByZXR1cm4gc3RhdGUubG9hZGluZyA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5sb2FkaW5nfT5cbiAgICAgIDxDaXJjdWxhclByb2dyZXNzIC8+XG4gICAgPC9kaXY+XG4gICkgOiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZpbHRlckJveH0+XG4gICAgICAgIDxGaWx0ZXJzIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zaWRlQmFyfT5cbiAgICAgICAgICA8TGlzdFxuICAgICAgICAgICAgZGF0YT17c3RhdGUucmVzdWx0U2VhcmNofVxuICAgICAgICAgICAgY3VycmVudENpdHlJbmRleD17c3RhdGUuY3VycmVudENpdHlJbmRleH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVJldmlld0NpdHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJlc3VsdH0+XG4gICAgICAgICAge3N0YXRlLnJlc3VsdFNlYXJjaD8ubGVuZ3RoID4gMCAmJiByZW5kZXJSZXN1bHQoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4vLyBVSVxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xuaW1wb3J0IENzc0Jhc2VsaW5lIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZVwiO1xuLy9DTVBcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcbi8vIFBhZ2VzXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9wYWdlcy9ob21lXCI7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENzc0Jhc2VsaW5lIC8+XG4gICAgICA8SGVhZGVyIC8+XG4gICAgICA8Q29udGFpbmVyPlxuICAgICAgICA8SG9tZSAvPlxuICAgICAgPC9Db250YWluZXI+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcbi8vIFN0b3JlXG5pbXBvcnQgeyBTdGF0ZVByb3ZpZGVyIH0gZnJvbSBcIi4vc3RvcmUvc3RvcmUuanNcIjtcblxuUmVhY3RET00ucmVuZGVyKFxuICA8U3RhdGVQcm92aWRlcj5cbiAgICA8QXBwIC8+XG4gIDwvU3RhdGVQcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=